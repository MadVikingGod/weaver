{
  "groups": [
    {
      "id": "opentracing",
      "type": "span",
      "brief": "This document defines semantic conventions for the OpenTracing Shim",
      "note": "These conventions are used by the OpenTracing Shim layer.\n",
      "attributes": [
        {
          "name": "opentracing.ref_type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "child_of",
                "value": "child_of",
                "brief": "The parent Span depends on the child Span in some capacity",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "follows_from",
                "value": "follows_from",
                "brief": "The parent Span doesn't depend in any way on the result of the child Span",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Parent-child Reference type",
          "requirement_level": "recommended",
          "note": "The causal relationship between a child Span and a parent Span.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/compatibility.yaml",
        "attributes": {
          "opentracing.ref_type": {
            "source_group": "registry.opentracing",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "trace.gen_ai.client",
      "type": "span",
      "brief": "Describes GenAI operation span.\n",
      "attributes": [
        {
          "name": "gen_ai.request.max_tokens",
          "type": "int",
          "brief": "The maximum number of tokens the model generates for a request.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.temperature",
          "type": "double",
          "brief": "The temperature setting for the GenAI request.",
          "examples": [
            0.0
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.top_p",
          "type": "double",
          "brief": "The top_p sampling setting for the GenAI request.",
          "examples": [
            1.0
          ],
          "tag": "llm-generic-request",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.top_k",
          "type": "double",
          "brief": "The top_k sampling setting for the GenAI request.",
          "examples": [
            1.0
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.stop_sequences",
          "type": "string[]",
          "brief": "List of sequences that the model will use to stop generating further tokens.",
          "examples": [
            "forest",
            "lived"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.frequency_penalty",
          "type": "double",
          "brief": "The frequency penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.presence_penalty",
          "type": "double",
          "brief": "The presence penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.response.id",
          "type": "string",
          "brief": "The unique identifier for the completion.",
          "examples": [
            "chatcmpl-123"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.response.finish_reasons",
          "type": "string[]",
          "brief": "Array of reasons the model stopped generating tokens, corresponding to each generation received.",
          "examples": [
            "stop"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.usage.input_tokens",
          "type": "int",
          "brief": "The number of tokens used in the GenAI input (prompt).",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.usage.output_tokens",
          "type": "int",
          "brief": "The number of tokens used in the GenAI response (completion).",
          "examples": [
            180
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The actual GenAI product may differ from the one identified by the client. For example, when using OpenAI client libraries to communicate with Mistral, the `gen_ai.system` is set to `openai` based on the instrumentation's best knowledge.\nFor custom model, a custom friendly name SHOULD be used. If none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": "required",
          "note": "The name of the GenAI model a request is being made to. If the model is supplied by a vendor, then the value must be the exact name of the model requested. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.\n",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "note": "If available. The name of the GenAI model that provided the response. If the model is supplied by a vendor, then the value must be the exact name of the model actually used. If the model is a fine-tuned custom model, the value should have a more specific name than the base model that's been fine-tuned.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [
        "gen_ai.content.prompt",
        "gen_ai.content.completion"
      ],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/gen-ai.yaml",
        "attributes": {
          "gen_ai.request.frequency_penalty": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.max_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.request.presence_penalty": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.stop_sequences": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.temperature": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.top_k": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.top_p": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.finish_reasons": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.id": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.usage.input_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.usage.output_tokens": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "gen_ai.content.prompt",
      "type": "event",
      "brief": "In the lifetime of an GenAI span, events for prompts sent and completions received may be created, depending on the configuration of the instrumentation.\n",
      "attributes": [
        {
          "name": "gen_ai.prompt",
          "type": "string",
          "brief": "The full prompt sent to the GenAI model.",
          "examples": [
            "[{'role': 'user', 'content': 'What is the capital of France?'}]"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if corresponding event is enabled"
          },
          "note": "It's RECOMMENDED to format prompts as JSON string matching [OpenAI messages format](https://platform.openai.com/docs/guides/text-generation)\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "gen_ai.content.prompt",
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/gen-ai.yaml",
        "attributes": {
          "gen_ai.prompt": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "gen_ai.content.completion",
      "type": "event",
      "brief": "In the lifetime of an GenAI span, events for prompts sent and completions received may be created, depending on the configuration of the instrumentation.\n",
      "attributes": [
        {
          "name": "gen_ai.completion",
          "type": "string",
          "brief": "The full response received from the GenAI model.",
          "examples": [
            "[{'role': 'assistant', 'content': 'The capital of France is Paris.'}]"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if corresponding event is enabled"
          },
          "note": "It's RECOMMENDED to format completions as JSON string matching [OpenAI messages format](https://platform.openai.com/docs/guides/text-generation)\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "gen_ai.content.completion",
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/gen-ai.yaml",
        "attributes": {
          "gen_ai.completion": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.dns.lookup.duration",
      "type": "metric",
      "brief": "Measures the time taken to perform a DNS lookup.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "dns.question.name",
          "type": "string",
          "brief": "The name being queried.",
          "examples": [
            "www.example.com",
            "dot.net"
          ],
          "requirement_level": "required",
          "note": "If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \\t, \\r, and \\n respectively.\n",
          "stability": "experimental"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes the error the DNS lookup failed with.",
          "examples": [
            "host_not_found",
            "no_recovery",
            "java.net.UnknownHostException"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if an error has occurred."
          },
          "note": "Instrumentations SHOULD use error code such as one of errors reported by `getaddrinfo`([Linux or other POSIX systems](https://man7.org/linux/man-pages/man3/getaddrinfo.3.html) / [Windows](https://learn.microsoft.com/windows/win32/api/ws2tcpip/nf-ws2tcpip-getaddrinfo)) or one reported by the runtime or client library. If error code is not available, the full name of exception type SHOULD be used.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "dns.lookup.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dns.yaml",
        "attributes": {
          "dns.question.name": {
            "source_group": "registry.dns",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.signalr.server.connection.duration",
      "type": "metric",
      "brief": "The duration of connections on the server.",
      "note": "Meter name: `Microsoft.AspNetCore.Http.Connections`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "signalr.connection.status",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "normal_closure",
                "value": "normal_closure",
                "brief": "The connection was closed normally.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "timeout",
                "value": "timeout",
                "brief": "The connection was closed due to a timeout.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "app_shutdown",
                "value": "app_shutdown",
                "brief": "The connection was closed because the app is shutting down.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "SignalR HTTP connection closure status.",
          "examples": [
            "app_shutdown",
            "timeout"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "signalr.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "server_sent_events",
                "value": "server_sent_events",
                "brief": "ServerSentEvents protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "long_polling",
                "value": "long_polling",
                "brief": "LongPolling protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "web_sockets",
                "value": "web_sockets",
                "brief": "WebSockets protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)",
          "examples": [
            "web_sockets",
            "long_polling"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "signalr.server.connection.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-signalr.yaml",
        "attributes": {
          "signalr.connection.status": {
            "source_group": "registry.signalr",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "signalr.transport": {
            "source_group": "registry.signalr",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.signalr.server.active_connections",
      "type": "metric",
      "brief": "Number of connections that are currently active on the server.",
      "note": "Meter name: `Microsoft.AspNetCore.Http.Connections`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "signalr.connection.status",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "normal_closure",
                "value": "normal_closure",
                "brief": "The connection was closed normally.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "timeout",
                "value": "timeout",
                "brief": "The connection was closed due to a timeout.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "app_shutdown",
                "value": "app_shutdown",
                "brief": "The connection was closed because the app is shutting down.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "SignalR HTTP connection closure status.",
          "examples": [
            "app_shutdown",
            "timeout"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "signalr.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "server_sent_events",
                "value": "server_sent_events",
                "brief": "ServerSentEvents protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "long_polling",
                "value": "long_polling",
                "brief": "LongPolling protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "web_sockets",
                "value": "web_sockets",
                "brief": "WebSockets protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)",
          "examples": [
            "web_sockets",
            "long_polling"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "signalr.server.active_connections",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-signalr.yaml",
        "attributes": {
          "signalr.connection.status": {
            "source_group": "registry.signalr",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "signalr.transport": {
            "source_group": "registry.signalr",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "service",
      "type": "resource",
      "brief": "A service instance.\n",
      "prefix": "service",
      "attributes": [
        {
          "name": "service.version",
          "type": "string",
          "brief": "The version string of the service API or implementation. The format is not defined by these conventions.\n",
          "examples": [
            "2.0.0",
            "a01dbef8a"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "service.name",
          "type": "string",
          "brief": "Logical name of the service.\n",
          "examples": [
            "shoppingcart"
          ],
          "requirement_level": "required",
          "note": "MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/service.yaml",
        "attributes": {
          "service.name": {
            "source_group": "registry.service",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "service.version": {
            "source_group": "registry.service",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "faas_resource",
      "type": "resource",
      "brief": "A serverless instance.\n",
      "prefix": "faas",
      "attributes": [
        {
          "name": "cloud.resource_id",
          "type": "string",
          "brief": "Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://cloud.google.com/apis/design/resource_names#full_resource_name) on GCP)\n",
          "examples": [
            "arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function",
            "//run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID",
            "/subscriptions/<SUBSCIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>"
          ],
          "requirement_level": "recommended",
          "note": "On some cloud providers, it may not be possible to determine the full ID at startup,\nso it may be necessary to set `cloud.resource_id` as a span attribute instead.\n\nThe exact value to use for `cloud.resource_id` depends on the cloud provider.\nThe following well-known definitions MUST be used if you set this attribute and they apply:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\n  Take care not to use the \"invoked ARN\" directly but replace any\n  [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)\n  with the resolved function version, as the same runtime instance may be invocable with\n  multiple different aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/rest/api/resources/resources/get-by-id) of the invoked function,\n  *not* the function app, having the form\n  `/subscriptions/<SUBSCIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.\n  This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share\n  a TracerProvider.\n",
          "stability": "experimental"
        },
        {
          "name": "faas.version",
          "type": "string",
          "brief": "The immutable version of the function being executed.",
          "examples": [
            "26",
            "pinkfroid-00002"
          ],
          "requirement_level": "recommended",
          "note": "Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run (Services):** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n",
          "stability": "experimental"
        },
        {
          "name": "faas.instance",
          "type": "string",
          "brief": "The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n",
          "examples": [
            "2021/06/28/[$LATEST]2f399eb14537447da05ab2a2e39309de"
          ],
          "requirement_level": "recommended",
          "note": "* **AWS Lambda:** Use the (full) log stream name.\n",
          "stability": "experimental"
        },
        {
          "name": "faas.max_memory",
          "type": "int",
          "brief": "The amount of memory available to the serverless function converted to Bytes.\n",
          "examples": 134217728,
          "requirement_level": "recommended",
          "note": "It's recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information (which must be multiplied by 1,048,576).\n",
          "stability": "experimental"
        },
        {
          "name": "faas.name",
          "type": "string",
          "brief": "The name of the single function that this runtime instance executes.\n",
          "examples": [
            "my-function",
            "myazurefunctionapp/some-function-name"
          ],
          "requirement_level": "required",
          "note": "This is the name of the function as configured/deployed on the FaaS\nplatform and is usually different from the name of the callback\nfunction (which may be stored in the\n[`code.namespace`/`code.function`](/docs/general/attributes.md#source-code-attributes)\nspan attributes).\n\nFor some cloud providers, the above definition is ambiguous. The following\ndefinition of function name MUST be used for this attribute\n(and consequently the span name) for the listed cloud providers/products:\n\n* **Azure:**  The full name `<FUNCAPP>/<FUNC>`, i.e., function app name\n  followed by a forward slash followed by the function name (this form\n  can also be seen in the resource JSON for the function).\n  This means that a span attribute MUST be used, as an Azure function\n  app can host multiple functions that would usually share\n  a TracerProvider (see also the `cloud.resource_id` attribute).\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/faas.yaml",
        "attributes": {
          "cloud.resource_id": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.instance": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.max_memory": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.name": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.version": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "cloud",
      "type": "resource",
      "brief": "A cloud environment (e.g. GCP, Azure, AWS)\n",
      "prefix": "cloud",
      "attributes": [
        {
          "name": "cloud.provider",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "alibaba_cloud",
                "value": "alibaba_cloud",
                "brief": "Alibaba Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws",
                "value": "aws",
                "brief": "Amazon Web Services",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure",
                "value": "azure",
                "brief": "Microsoft Azure",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp",
                "value": "gcp",
                "brief": "Google Cloud Platform",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "heroku",
                "value": "heroku",
                "brief": "Heroku Platform as a Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ibm_cloud",
                "value": "ibm_cloud",
                "brief": "IBM Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "tencent_cloud",
                "value": "tencent_cloud",
                "brief": "Tencent Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Name of the cloud provider.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "cloud.account.id",
          "type": "string",
          "brief": "The cloud account ID the resource is assigned to.\n",
          "examples": [
            "111111111111",
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "cloud.region",
          "type": "string",
          "brief": "The geographical region the resource is running.\n",
          "examples": [
            "us-central1",
            "us-east-1"
          ],
          "requirement_level": "recommended",
          "note": "Refer to your provider's docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/global-infrastructure/geographies/), [Google Cloud regions](https://cloud.google.com/about/locations), or [Tencent Cloud regions](https://www.tencentcloud.com/document/product/213/6091).\n",
          "stability": "experimental"
        },
        {
          "name": "cloud.resource_id",
          "type": "string",
          "brief": "Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://cloud.google.com/apis/design/resource_names#full_resource_name) on GCP)\n",
          "examples": [
            "arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function",
            "//run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID",
            "/subscriptions/<SUBSCIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>"
          ],
          "requirement_level": "recommended",
          "note": "On some cloud providers, it may not be possible to determine the full ID at startup,\nso it may be necessary to set `cloud.resource_id` as a span attribute instead.\n\nThe exact value to use for `cloud.resource_id` depends on the cloud provider.\nThe following well-known definitions MUST be used if you set this attribute and they apply:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\n  Take care not to use the \"invoked ARN\" directly but replace any\n  [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)\n  with the resolved function version, as the same runtime instance may be invocable with\n  multiple different aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/rest/api/resources/resources/get-by-id) of the invoked function,\n  *not* the function app, having the form\n  `/subscriptions/<SUBSCIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.\n  This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share\n  a TracerProvider.\n",
          "stability": "experimental"
        },
        {
          "name": "cloud.availability_zone",
          "type": "string",
          "brief": "Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n",
          "examples": [
            "us-east-1c"
          ],
          "requirement_level": "recommended",
          "note": "Availability zones are called \"zones\" on Alibaba Cloud and Google Cloud.\n",
          "stability": "experimental"
        },
        {
          "name": "cloud.platform",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "alibaba_cloud_ecs",
                "value": "alibaba_cloud_ecs",
                "brief": "Alibaba Cloud Elastic Compute Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "alibaba_cloud_fc",
                "value": "alibaba_cloud_fc",
                "brief": "Alibaba Cloud Function Compute",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "alibaba_cloud_openshift",
                "value": "alibaba_cloud_openshift",
                "brief": "Red Hat OpenShift on Alibaba Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_ec2",
                "value": "aws_ec2",
                "brief": "AWS Elastic Compute Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_ecs",
                "value": "aws_ecs",
                "brief": "AWS Elastic Container Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_eks",
                "value": "aws_eks",
                "brief": "AWS Elastic Kubernetes Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_lambda",
                "value": "aws_lambda",
                "brief": "AWS Lambda",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_elastic_beanstalk",
                "value": "aws_elastic_beanstalk",
                "brief": "AWS Elastic Beanstalk",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_app_runner",
                "value": "aws_app_runner",
                "brief": "AWS App Runner",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_openshift",
                "value": "aws_openshift",
                "brief": "Red Hat OpenShift on AWS (ROSA)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure_vm",
                "value": "azure_vm",
                "brief": "Azure Virtual Machines",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure_container_apps",
                "value": "azure_container_apps",
                "brief": "Azure Container Apps",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure_container_instances",
                "value": "azure_container_instances",
                "brief": "Azure Container Instances",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure_aks",
                "value": "azure_aks",
                "brief": "Azure Kubernetes Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure_functions",
                "value": "azure_functions",
                "brief": "Azure Functions",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure_app_service",
                "value": "azure_app_service",
                "brief": "Azure App Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure_openshift",
                "value": "azure_openshift",
                "brief": "Azure Red Hat OpenShift",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_bare_metal_solution",
                "value": "gcp_bare_metal_solution",
                "brief": "Google Bare Metal Solution (BMS)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_compute_engine",
                "value": "gcp_compute_engine",
                "brief": "Google Cloud Compute Engine (GCE)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_cloud_run",
                "value": "gcp_cloud_run",
                "brief": "Google Cloud Run",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_kubernetes_engine",
                "value": "gcp_kubernetes_engine",
                "brief": "Google Cloud Kubernetes Engine (GKE)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_cloud_functions",
                "value": "gcp_cloud_functions",
                "brief": "Google Cloud Functions (GCF)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_app_engine",
                "value": "gcp_app_engine",
                "brief": "Google Cloud App Engine (GAE)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_openshift",
                "value": "gcp_openshift",
                "brief": "Red Hat OpenShift on Google Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ibm_cloud_openshift",
                "value": "ibm_cloud_openshift",
                "brief": "Red Hat OpenShift on IBM Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "tencent_cloud_cvm",
                "value": "tencent_cloud_cvm",
                "brief": "Tencent Cloud Cloud Virtual Machine (CVM)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "tencent_cloud_eks",
                "value": "tencent_cloud_eks",
                "brief": "Tencent Cloud Elastic Kubernetes Service (EKS)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "tencent_cloud_scf",
                "value": "tencent_cloud_scf",
                "brief": "Tencent Cloud Serverless Cloud Function (SCF)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The cloud platform in use.\n",
          "requirement_level": "recommended",
          "note": "The prefix of the service SHOULD match the one specified in `cloud.provider`.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/cloud.yaml",
        "attributes": {
          "cloud.account.id": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloud.availability_zone": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloud.platform": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloud.provider": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloud.region": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "cloud.resource_id": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "heroku",
      "type": "resource",
      "brief": "Heroku dyno metadata\n",
      "attributes": [
        {
          "name": "heroku.release.creation_timestamp",
          "type": "string",
          "brief": "Time and date the release was created\n",
          "examples": [
            "2022-10-23T18:00:42Z"
          ],
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "heroku.release.commit",
          "type": "string",
          "brief": "Commit hash for the current release\n",
          "examples": [
            "e6134959463efd8966b20e75b913cafe3f5ec"
          ],
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "heroku.app.id",
          "type": "string",
          "brief": "Unique identifier for the application\n",
          "examples": [
            "2daa2797-e42b-4624-9322-ec3f968df4da"
          ],
          "requirement_level": "opt_in",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/cloud_provider/heroku.yaml",
        "attributes": {
          "heroku.app.id": {
            "source_group": "registry.heroku",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "heroku.release.commit": {
            "source_group": "registry.heroku",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "heroku.release.creation_timestamp": {
            "source_group": "registry.heroku",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.peer",
      "type": "attribute_group",
      "brief": "Operations that access some remote service.\n",
      "prefix": "peer",
      "attributes": [
        {
          "name": "peer.service",
          "type": "string",
          "brief": "The [`service.name`](/docs/resource/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n",
          "examples": "AuthTokenCache",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/peer.yaml"
      }
    },
    {
      "id": "registry.device",
      "type": "attribute_group",
      "brief": "Describes device attributes.\n",
      "prefix": "device",
      "attributes": [
        {
          "name": "device.id",
          "type": "string",
          "brief": "A unique identifier representing the device\n",
          "examples": [
            "2ab2916d-a51f-4ac8-80ee-45ac31a28092"
          ],
          "requirement_level": "recommended",
          "note": "The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n",
          "stability": "experimental"
        },
        {
          "name": "device.manufacturer",
          "type": "string",
          "brief": "The name of the device manufacturer\n",
          "examples": [
            "Apple",
            "Samsung"
          ],
          "requirement_level": "recommended",
          "note": "The Android OS provides this field via [Build](https://developer.android.com/reference/android/os/Build#MANUFACTURER). iOS apps SHOULD hardcode the value `Apple`.\n",
          "stability": "experimental"
        },
        {
          "name": "device.model.identifier",
          "type": "string",
          "brief": "The model identifier for the device\n",
          "examples": [
            "iPhone3,4",
            "SM-G920F"
          ],
          "requirement_level": "recommended",
          "note": "It's recommended this value represents a machine-readable version of the model identifier rather than the market or consumer-friendly name of the device.\n",
          "stability": "experimental"
        },
        {
          "name": "device.model.name",
          "type": "string",
          "brief": "The marketing name for the device model\n",
          "examples": [
            "iPhone 6s Plus",
            "Samsung Galaxy S6"
          ],
          "requirement_level": "recommended",
          "note": "It's recommended this value represents a human-readable version of the device model rather than a machine-readable alternative.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/device.yaml"
      }
    },
    {
      "id": "registry.ios.deprecated",
      "type": "attribute_group",
      "brief": "The iOS platform on which the iOS application is running.\n",
      "prefix": "ios",
      "attributes": [
        {
          "name": "ios.state",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "active",
                "value": "active",
                "brief": "The app has become `active`. Associated with UIKit notification `applicationDidBecomeActive`.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "inactive",
                "value": "inactive",
                "brief": "The app is now `inactive`. Associated with UIKit notification `applicationWillResignActive`.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "background",
                "value": "background",
                "brief": "The app is now in the background. This value is associated with UIKit notification `applicationDidEnterBackground`.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "foreground",
                "value": "foreground",
                "brief": "The app is now in the foreground. This value is associated with UIKit notification `applicationWillEnterForeground`.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "terminate",
                "value": "terminate",
                "brief": "The app is about to terminate. Associated with UIKit notification `applicationWillTerminate`.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated use the `device.app.lifecycle` event definition including `ios.state` as a payload field instead.\n",
          "requirement_level": "recommended",
          "note": "The iOS lifecycle states are defined in the [UIApplicationDelegate documentation](https://developer.apple.com/documentation/uikit/uiapplicationdelegate#1656902), and from which the `OS terminology` column values are derived.\n",
          "stability": "experimental",
          "deprecated": "Moved to a payload field of `device.app.lifecycle`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deprecated/ios.yaml"
      }
    },
    {
      "id": "registry.rpc.deprecated",
      "type": "attribute_group",
      "brief": "Deprecated rpc message attributes.",
      "attributes": [
        {
          "name": "message.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "sent",
                "value": "SENT",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "received",
                "value": "RECEIVED",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `rpc.message.type` instead.",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `rpc.message.type`."
        },
        {
          "name": "message.id",
          "type": "int",
          "brief": "Deprecated, use `rpc.message.id` instead.",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `rpc.message.id`."
        },
        {
          "name": "message.compressed_size",
          "type": "int",
          "brief": "Deprecated, use `rpc.message.compressed_size` instead.",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `rpc.message.compressed_size`."
        },
        {
          "name": "message.uncompressed_size",
          "type": "int",
          "brief": "Deprecated, use `rpc.message.uncompressed_size` instead.",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `rpc.message.uncompressed_size`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deprecated/rpc.yaml"
      }
    },
    {
      "id": "registry.host",
      "type": "attribute_group",
      "brief": "A host is defined as a computing instance. For example, physical servers, virtual machines, switches or disk array.\n",
      "prefix": "host",
      "attributes": [
        {
          "name": "host.id",
          "type": "string",
          "brief": "Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider. For non-containerized systems, this should be the `machine-id`. See the table below for the sources to use to determine the `machine-id` based on operating system.\n",
          "examples": [
            "fdbf79e8af94cb7f9e8df36789187052"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.name",
          "type": "string",
          "brief": "Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n",
          "examples": [
            "opentelemetry-test"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.type",
          "type": "string",
          "brief": "Type of host. For Cloud, this must be the machine type.\n",
          "examples": [
            "n1-standard-1"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.arch",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "amd64",
                "value": "amd64",
                "brief": "AMD64",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "arm32",
                "value": "arm32",
                "brief": "ARM32",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "arm64",
                "value": "arm64",
                "brief": "ARM64",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ia64",
                "value": "ia64",
                "brief": "Itanium",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ppc32",
                "value": "ppc32",
                "brief": "32-bit PowerPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ppc64",
                "value": "ppc64",
                "brief": "64-bit PowerPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "s390x",
                "value": "s390x",
                "brief": "IBM z/Architecture",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "x86",
                "value": "x86",
                "brief": "32-bit x86",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The CPU architecture the host system is running on.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.image.name",
          "type": "string",
          "brief": "Name of the VM image or OS install the host was instantiated from.\n",
          "examples": [
            "infra-ami-eks-worker-node-7d4ec78312",
            "CentOS-8-x86_64-1905"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.image.id",
          "type": "string",
          "brief": "VM image ID or host OS image ID. For Cloud, this value is from the provider.\n",
          "examples": [
            "ami-07b06b442921831e5"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.image.version",
          "type": "string",
          "brief": "The version string of the VM image or host OS as defined in [Version Attributes](/docs/resource/README.md#version-attributes).\n",
          "examples": [
            "0.1"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.ip",
          "type": "string[]",
          "brief": "Available IP addresses of the host, excluding loopback interfaces.\n",
          "examples": [
            "192.168.1.140",
            "fe80::abc2:4a28:737a:609e"
          ],
          "requirement_level": "recommended",
          "note": "IPv4 Addresses MUST be specified in dotted-quad notation. IPv6 addresses MUST be specified in the [RFC 5952](https://www.rfc-editor.org/rfc/rfc5952.html) format.\n",
          "stability": "experimental"
        },
        {
          "name": "host.mac",
          "type": "string[]",
          "brief": "Available MAC addresses of the host, excluding loopback interfaces.\n",
          "examples": [
            "AC-DE-48-23-45-67",
            "AC-DE-48-23-45-67-01-9F"
          ],
          "requirement_level": "recommended",
          "note": "MAC Addresses MUST be represented in [IEEE RA hexadecimal form](https://standards.ieee.org/wp-content/uploads/import/documents/tutorials/eui.pdf): as hyphen-separated octets in uppercase hexadecimal form from most to least significant.\n",
          "stability": "experimental"
        },
        {
          "name": "host.cpu.vendor.id",
          "type": "string",
          "brief": "Processor manufacturer identifier. A maximum 12-character string.\n",
          "examples": [
            "GenuineIntel"
          ],
          "requirement_level": "recommended",
          "note": "[CPUID](https://wiki.osdev.org/CPUID) command returns the vendor ID string in EBX, EDX and ECX registers. Writing these to memory in this order results in a 12-character string.\n",
          "stability": "experimental"
        },
        {
          "name": "host.cpu.family",
          "type": "string",
          "brief": "Family or generation of the CPU.\n",
          "examples": [
            "6",
            "PA-RISC 1.1e"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.cpu.model.id",
          "type": "string",
          "brief": "Model identifier. It provides more granular information about the CPU, distinguishing it from other CPUs within the same family.\n",
          "examples": [
            "6",
            "9000/778/B180L"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.cpu.model.name",
          "type": "string",
          "brief": "Model designation of the processor.\n",
          "examples": [
            "11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.cpu.stepping",
          "type": "string",
          "brief": "Stepping or core revisions.\n",
          "examples": [
            "1",
            "r1p1"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.cpu.cache.l2.size",
          "type": "int",
          "brief": "The amount of level 2 memory cache available to the processor (in Bytes).\n",
          "examples": [
            12288000
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/host.yaml"
      }
    },
    {
      "id": "messaging.destination_publish",
      "type": "attribute_group",
      "brief": "Semantic convention for attributes that describe the publish messaging destination on broker. The term Publish Destination refers to the destination the message was originally published to. These attributes should be used on the consumer side when information about the publish destination is available and different than the destination message are consumed from.\n",
      "note": "Publish destination attributes should be set on publish, receive,\nor other spans describing messaging operations.\nDestination attributes should be set when the messaging operation handles\nsingle messages. When the operation handles a batch of messages,\nthe destination attributes should only be applied when the attribute value\napplies to all messages in the batch.\nIn other cases, destination attributes may be set on links.\n",
      "prefix": "messaging.destination_publish",
      "attributes": [
        {
          "name": "messaging.destination_publish.anonymous",
          "type": "boolean",
          "brief": "A boolean that is true if the publish message destination is anonymous (could be unnamed or have auto-generated name).",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination_publish.name",
          "type": "string",
          "brief": "The name of the original destination the message was published to",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "The name SHOULD uniquely identify a specific queue, topic, or other entity within the broker. If\nthe broker doesn't have such notion, the original destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/messaging.yaml",
        "attributes": {
          "messaging.destination_publish.anonymous": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.destination_publish.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.messaging.trace.minimal",
      "type": "attribute_group",
      "brief": "Defines minimal set of attributes used by all messaging systems.\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "publish",
                "value": "publish",
                "brief": "One or more messages are provided for publishing to an intermediary. If a single message is published, the context of the \"Publish\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch publishing scenarios.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `process`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "experimental"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/messaging.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging",
      "type": "span",
      "brief": "Defines a full set of attributes used in messaging systems.\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.client.id",
          "type": "string",
          "brief": "A unique identifier for the client that consumes or produces a message.\n",
          "examples": [
            "client-5",
            "myhost@8742@s8083jm"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.conversation_id",
          "type": "string",
          "brief": "The conversation ID identifying the conversation to which the message belongs, represented as a string. Sometimes called \"Correlation ID\".\n",
          "examples": "MyConversationId",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.envelope.size",
          "type": "int",
          "brief": "The size of the message body and metadata in bytes.\n",
          "examples": 2738,
          "requirement_level": "recommended",
          "note": "This can refer to both the compressed or uncompressed size. If both sizes are known, the uncompressed\nsize should be used.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.body.size",
          "type": "int",
          "brief": "The size of the message body in bytes.\n",
          "examples": 1439,
          "requirement_level": "recommended",
          "note": "This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed\nbody size should be used.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "publish",
                "value": "publish",
                "brief": "One or more messages are provided for publishing to an intermediary. If a single message is published, the context of the \"Publish\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch publishing scenarios.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `process`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "experimental"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.batch.message_count",
          "type": "int",
          "brief": "The number of messages sent, received, or processed in the scope of the batching operation.",
          "examples": [
            0,
            1,
            2
          ],
          "requirement_level": {
            "conditionally_required": "If the span describes an operation on a batch of messages."
          },
          "note": "Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "The name of the consumer group with which a consumer is associated.\n",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.anonymous",
          "type": "boolean",
          "brief": "A boolean that is true if the message destination is anonymous (could be unnamed or have auto-generated name).",
          "requirement_level": {
            "conditionally_required": "If value is `true`. When missing, the value is assumed to be `false`."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": {
            "recommended": "When applicable."
          },
          "sampling_relevant": true,
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "The name of the destination subscription from which a message is consumed.",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": {
            "conditionally_required": "If available. Instrumentations MUST NOT use `messaging.destination.name` as template unless low-cardinality of destination name is guaranteed.\n"
          },
          "sampling_relevant": true,
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.temporary",
          "type": "boolean",
          "brief": "A boolean that is true if the message destination is temporary and might not exist anymore after messages are processed.",
          "requirement_level": {
            "conditionally_required": "If value is `true`. When missing, the value is assumed to be `false`."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "experimental"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the messaging intermediary node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "recommended": "If applicable for this messaging system."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `network.peer.*` attributes are applicable.\nNetwork peer address and port are important when the application interacts with individual intermediary nodes directly,\nIf a messaging operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port of the messaging intermediary node where the operation was performed.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "if and only if `network.peer.address` is set."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/messaging.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.batch.message_count": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.client.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.anonymous": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.subscription.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.template": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.temporary": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.message.body.size": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.message.conversation_id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.message.envelope.size": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.system": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging.network.attributes",
      "type": "attribute_group",
      "brief": "Attributes that describe messaging operation along with network information.",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "publish",
                "value": "publish",
                "brief": "One or more messages are provided for publishing to an intermediary. If a single message is published, the context of the \"Publish\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch publishing scenarios.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `process`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "experimental"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "If an operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/messaging.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging.rabbitmq",
      "type": "attribute_group",
      "brief": "Attributes for RabbitMQ\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.message.body.size",
          "type": "int",
          "brief": "The size of the message body in bytes.\n",
          "examples": 1439,
          "requirement_level": "recommended",
          "note": "This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed\nbody size should be used.\n",
          "stability": "experimental"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "publish",
                "value": "publish",
                "brief": "One or more messages are provided for publishing to an intermediary. If a single message is published, the context of the \"Publish\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch publishing scenarios.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `process`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "experimental"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "If an operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.message.conversation_id",
          "type": "string",
          "brief": "Message [correlation Id](https://www.rabbitmq.com/tutorials/tutorial-six-java#correlation-id) property.\n",
          "examples": "MyConversationId",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.rabbitmq.destination.routing_key",
          "type": "string",
          "brief": "RabbitMQ message routing key.\n",
          "examples": "myKey",
          "requirement_level": {
            "conditionally_required": "If not empty."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.rabbitmq.message.delivery_tag",
          "type": "int",
          "brief": "RabbitMQ message delivery tag\n",
          "examples": 123,
          "requirement_level": {
            "conditionally_required": "When available."
          },
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/messaging.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.message.body.size": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.message.conversation_id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.rabbitmq.destination.routing_key": {
            "source_group": "registry.messaging.rabbitmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.rabbitmq.message.delivery_tag": {
            "source_group": "registry.messaging.rabbitmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging.kafka",
      "type": "attribute_group",
      "brief": "Attributes for Apache Kafka\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.client.id",
          "type": "string",
          "brief": "A unique identifier for the client that consumes or produces a message.\n",
          "examples": [
            "client-5",
            "myhost@8742@s8083jm"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "publish",
                "value": "publish",
                "brief": "One or more messages are provided for publishing to an intermediary. If a single message is published, the context of the \"Publish\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch publishing scenarios.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `process`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "experimental"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.batch.message_count",
          "type": "int",
          "brief": "The number of messages sent, received, or processed in the scope of the batching operation.",
          "examples": [
            0,
            1,
            2
          ],
          "requirement_level": {
            "conditionally_required": "If the span describes an operation on a batch of messages."
          },
          "note": "Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "Kafka [consumer group id](https://docs.confluent.io/platform/current/clients/consumer.html).",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "String representation of the partition id the message (or batch) is sent to or received from.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "experimental"
        },
        {
          "name": "messaging.kafka.message.key",
          "type": "string",
          "brief": "Message keys in Kafka are used for grouping alike messages to ensure they're processed on the same partition. They differ from `messaging.message.id` in that they're not unique. If the key is `null`, the attribute MUST NOT be set.\n",
          "examples": "myKey",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "note": "If the key type is not string, it's string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don't include its value.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.kafka.message.offset",
          "type": "int",
          "brief": "The offset of a record in the corresponding Kafka partition.\n",
          "examples": 42,
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.kafka.message.tombstone",
          "type": "boolean",
          "brief": "A boolean that is true if the message is a tombstone.",
          "requirement_level": {
            "conditionally_required": "If value is `true`. When missing, the value is assumed to be `false`."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.message.body.size",
          "type": "int",
          "brief": "The size of the message body in bytes.\n",
          "examples": 1439,
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "note": "This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed\nbody size should be used.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/messaging.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.batch.message_count": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.client.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "sampling_relevant"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.kafka.message.key": {
            "source_group": "registry.messaging.kafka",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.kafka.message.offset": {
            "source_group": "registry.messaging.kafka",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.kafka.message.tombstone": {
            "source_group": "registry.messaging.kafka",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.message.body.size": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging.rocketmq",
      "type": "attribute_group",
      "brief": "Attributes for Apache RocketMQ\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.client.id",
          "type": "string",
          "brief": "A unique identifier for the client that consumes or produces a message.\n",
          "examples": [
            "client-5",
            "myhost@8742@s8083jm"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.body.size",
          "type": "int",
          "brief": "The size of the message body in bytes.\n",
          "examples": 1439,
          "requirement_level": "recommended",
          "note": "This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed\nbody size should be used.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.rocketmq.consumption_model",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "clustering",
                "value": "clustering",
                "brief": "Clustering consumption model",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "broadcasting",
                "value": "broadcasting",
                "brief": "Broadcasting consumption model",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Model of message consumption. This only applies to consumer spans.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.rocketmq.message.keys",
          "type": "string[]",
          "brief": "Key(s) of message, another way to mark message besides message id.\n",
          "examples": [
            "keyA",
            "keyB"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.rocketmq.message.tag",
          "type": "string",
          "brief": "The secondary classifier of message besides topic.\n",
          "examples": "tagA",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.rocketmq.message.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "normal",
                "value": "normal",
                "brief": "Normal message",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "fifo",
                "value": "fifo",
                "brief": "FIFO message",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "delay",
                "value": "delay",
                "brief": "Delay message",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "transaction",
                "value": "transaction",
                "brief": "Transaction message",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of message.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "publish",
                "value": "publish",
                "brief": "One or more messages are provided for publishing to an intermediary. If a single message is published, the context of the \"Publish\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch publishing scenarios.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `process`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "experimental"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.batch.message_count",
          "type": "int",
          "brief": "The number of messages sent, received, or processed in the scope of the batching operation.",
          "examples": [
            0,
            1,
            2
          ],
          "requirement_level": {
            "conditionally_required": "If the span describes an operation on a batch of messages."
          },
          "note": "Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "RocketMQ [consumer group name](https://rocketmq.apache.org/docs/domainModel/07consumergroup).",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "stability": "experimental"
        },
        {
          "name": "messaging.rocketmq.message.delay_time_level",
          "type": "int",
          "brief": "The delay time level for delay message, which determines the message delay time.\n",
          "examples": 3,
          "requirement_level": {
            "conditionally_required": "If the message type is delay and delivery timestamp is not specified."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.rocketmq.message.delivery_timestamp",
          "type": "int",
          "brief": "The timestamp in milliseconds that the delay message is expected to be delivered to consumer.\n",
          "examples": 1665987217045,
          "requirement_level": {
            "conditionally_required": "If the message type is delay and delay time level is not specified."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.rocketmq.message.group",
          "type": "string",
          "brief": "It is essential for FIFO message. Messages that belong to the same message group are always processed one by one within the same consumer group.\n",
          "examples": "myMessageGroup",
          "requirement_level": {
            "conditionally_required": "If the message type is FIFO."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.rocketmq.namespace",
          "type": "string",
          "brief": "Namespace of RocketMQ resources, resources in different namespaces are individual.\n",
          "examples": "myNamespace",
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/messaging.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.batch.message_count": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.client.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.message.body.size": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.rocketmq.consumption_model": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.rocketmq.message.delay_time_level": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.rocketmq.message.delivery_timestamp": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.rocketmq.message.group": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.rocketmq.message.keys": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.rocketmq.message.tag": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.rocketmq.message.type": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.rocketmq.namespace": {
            "source_group": "registry.messaging.rocketmq",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging.gcp_pubsub",
      "type": "attribute_group",
      "brief": "Attributes for Google Cloud Pub/Sub\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.gcp_pubsub.message.ack_id",
          "type": "string",
          "brief": "The ack id for a given message.\n",
          "examples": "ack_id",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.gcp_pubsub.message.ack_deadline",
          "type": "int",
          "brief": "The ack deadline in seconds set for the modify ack deadline request.\n",
          "examples": 10,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.gcp_pubsub.message.delivery_attempt",
          "type": "int",
          "brief": "The delivery attempt for a given message.\n",
          "examples": 2,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "publish",
                "value": "publish",
                "brief": "One or more messages are provided for publishing to an intermediary. If a single message is published, the context of the \"Publish\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch publishing scenarios.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `process`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "experimental"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.batch.message_count",
          "type": "int",
          "brief": "The number of messages sent, received, or processed in the scope of the batching operation.",
          "examples": [
            0,
            1,
            2
          ],
          "requirement_level": {
            "conditionally_required": "If the span describes an operation on a batch of messages."
          },
          "note": "Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "Google Pub/Sub [subscription name](https://cloud.google.com/pubsub/docs/subscription-overview).",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "experimental"
        },
        {
          "name": "messaging.gcp_pubsub.message.ordering_key",
          "type": "string",
          "brief": "The ordering key for a given message. If the attribute is not present, the message does not have an ordering key.\n",
          "examples": "ordering_key",
          "requirement_level": {
            "conditionally_required": "If the message type has an ordering key set."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "The `messaging.operation.name` has the following list of well-known values in the context of Google Pub/Sub.\nIf one of them applies, then the respective value MUST be used; otherwise, a custom value MAY be used.\n\n- `ack` and `nack` for settlement operations\n- `send` for publishing operations\n- `modack` for extending the lease for a single message or batch of messages\n- `subscribe` for operations that represent the time from after the message was received to when the message is acknowledged, negatively acknowledged, or expired.\n- `create` and `receive` for [common messaging operations](/docs/messaging/messaging-spans.md#common-messaging-operations)\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/messaging.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.batch.message_count": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.subscription.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "sampling_relevant"
            ]
          },
          "messaging.gcp_pubsub.message.ack_deadline": {
            "source_group": "registry.messaging.gcp_pubsub",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.gcp_pubsub.message.ack_id": {
            "source_group": "registry.messaging.gcp_pubsub",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.gcp_pubsub.message.delivery_attempt": {
            "source_group": "registry.messaging.gcp_pubsub",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.gcp_pubsub.message.ordering_key": {
            "source_group": "registry.messaging.gcp_pubsub",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging.servicebus",
      "type": "attribute_group",
      "brief": "Attributes for Azure Service Bus\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.servicebus.message.enqueued_time",
          "type": "int",
          "brief": "The UTC epoch seconds at which the message has been accepted and stored in the entity.\n",
          "examples": 1701393730,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "publish",
                "value": "publish",
                "brief": "One or more messages are provided for publishing to an intermediary. If a single message is published, the context of the \"Publish\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch publishing scenarios.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `process`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "experimental"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.batch.message_count",
          "type": "int",
          "brief": "The number of messages sent, received, or processed in the scope of the batching operation.",
          "examples": [
            0,
            1,
            2
          ],
          "requirement_level": {
            "conditionally_required": "If the span describes an operation on a batch of messages."
          },
          "note": "Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "Azure Service Bus [subscription name](https://learn.microsoft.com/azure/service-bus-messaging/service-bus-queues-topics-subscriptions#topics-and-subscriptions).",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": {
            "conditionally_required": "If messages are received from the subscription."
          },
          "sampling_relevant": true,
          "stability": "experimental"
        },
        {
          "name": "messaging.message.conversation_id",
          "type": "string",
          "brief": "Message [correlation Id](https://learn.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads#message-routing-and-correlation) property.",
          "examples": "MyConversationId",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "Azure Service Bus operation name.",
          "examples": [
            "send",
            "receive",
            "complete",
            "process",
            "peek"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "The operation name SHOULD match one of the following values:\n\n- sender operations: `send`, `schedule`, `cancel_scheduled`\n- transaction operations: `create_transaction`, `commit_transaction`, `rollback_transaction`\n- receiver operation: `receive`, `peek`, `receive_deferred`, `renew_message_lock`\n- settlement operations: `abandon`, `complete`, `defer`, `dead_letter`, `delete`\n- session operations: `accept_session`, `get_session_state`, `set_session_state`, `renew_session_lock`\n\nIf none of the above operation names apply, the attribute SHOULD be set\nto the name of the client method in snake_case.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.servicebus.disposition_status",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "complete",
                "value": "complete",
                "brief": "Message is completed",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "abandon",
                "value": "abandon",
                "brief": "Message is abandoned",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dead_letter",
                "value": "dead_letter",
                "brief": "Message is sent to dead letter queue",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "defer",
                "value": "defer",
                "brief": "Message is deferred",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes the [settlement type](https://learn.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock).\n",
          "requirement_level": {
            "conditionally_required": "if and only if `messaging.operation` is `settle`."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.servicebus.message.delivery_count",
          "type": "int",
          "brief": "Number of deliveries that have been attempted for this message.\n",
          "examples": 2,
          "requirement_level": {
            "conditionally_required": "If delivery count is available and is bigger than 0."
          },
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/messaging.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.batch.message_count": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.subscription.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.message.conversation_id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.servicebus.disposition_status": {
            "source_group": "registry.messaging.servicebus",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.servicebus.message.delivery_count": {
            "source_group": "registry.messaging.servicebus",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.servicebus.message.enqueued_time": {
            "source_group": "registry.messaging.servicebus",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "messaging.eventhubs",
      "type": "attribute_group",
      "brief": "Attributes for Azure Event Hubs\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.eventhubs.message.enqueued_time",
          "type": "int",
          "brief": "The UTC epoch seconds at which the message has been accepted and stored in the entity.\n",
          "examples": 1701393730,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": {
            "conditionally_required": "If span describes operation on a single message or if the value applies to all messages in the batch."
          },
          "sampling_relevant": true,
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": {
            "recommended": "If span describes operation on a single message."
          },
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "publish",
                "value": "publish",
                "brief": "One or more messages are provided for publishing to an intermediary. If a single message is published, the context of the \"Publish\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch publishing scenarios.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `process`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "sampling_relevant": true,
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "experimental"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.batch.message_count",
          "type": "int",
          "brief": "The number of messages sent, received, or processed in the scope of the batching operation.",
          "examples": [
            0,
            1,
            2
          ],
          "requirement_level": {
            "conditionally_required": "If the span describes an operation on a batch of messages."
          },
          "note": "Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "Azure Event Hubs [consumer group name](https://learn.microsoft.com/en-us/azure/event-hubs/event-hubs-features#consumer-groups).",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": {
            "conditionally_required": "On consumer spans."
          },
          "sampling_relevant": true,
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "String representation of the partition id messages are sent to or received from, unique within the Event Hub.\n",
          "examples": "1",
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "sampling_relevant": true,
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "Azure Event Hubs operation name.",
          "examples": [
            "send",
            "receive",
            "checkpoint"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "The operation name SHOULD match one of the following values:\n\n- `send`\n- `receive`\n- `process`\n- `checkpoint`\n- `get_partition_properties`\n- `get_event_hub_properties`\n\nIf none of the above operation names apply, the attribute SHOULD be set\nto the name of the client method in snake_case.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/messaging.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.batch.message_count": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.eventhubs.message.enqueued_time": {
            "source_group": "registry.messaging.eventhubs",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.message.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "registry.otel.library.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated otel.library attributes.",
      "prefix": "otel.library",
      "attributes": [
        {
          "name": "otel.library.name",
          "type": "string",
          "examples": [
            "io.opentelemetry.contrib.mongodb"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "use the `otel.scope.name` attribute."
        },
        {
          "name": "otel.library.version",
          "type": "string",
          "examples": [
            "1.0.0"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "use the `otel.scope.version` attribute."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deprecated/otel.yaml"
      }
    },
    {
      "id": "registry.android.deprecated",
      "type": "attribute_group",
      "brief": "This document defines attributes that represents an occurrence of a lifecycle transition on the Android platform.\n",
      "prefix": "android",
      "attributes": [
        {
          "name": "android.state",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "created",
                "value": "created",
                "brief": "Any time before Activity.onResume() or, if the app has no Activity, Context.startService() has been called in the app for the first time.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "background",
                "value": "background",
                "brief": "Any time after Activity.onPause() or, if the app has no Activity, Context.stopService() has been called when the app was in the foreground state.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "foreground",
                "value": "foreground",
                "brief": "Any time after Activity.onResume() or, if the app has no Activity, Context.startService() has been called when the app was in either the created or background states.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated use the `device.app.lifecycle` event definition including `android.state` as a payload field instead.\n",
          "requirement_level": "recommended",
          "note": "The Android lifecycle states are defined in [Activity lifecycle callbacks](https://developer.android.com/guide/components/activities/activity-lifecycle#lc), and from which the `OS identifiers` are derived.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deprecated/android.yaml"
      }
    },
    {
      "id": "registry.db.deprecated",
      "type": "attribute_group",
      "brief": "\"Describes deprecated db attributes.\"\n",
      "prefix": "db",
      "attributes": [
        {
          "name": "db.connection_string",
          "type": "string",
          "brief": "Deprecated, use `server.address`, `server.port` attributes instead.",
          "examples": "Server=(localdb)\\v11.0;Integrated Security=true;",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "\"Replaced by `server.address` and `server.port`.\"\n"
        },
        {
          "name": "db.jdbc.driver_classname",
          "type": "string",
          "brief": "Removed, no replacement at this time.",
          "examples": [
            "org.postgresql.Driver",
            "com.microsoft.sqlserver.jdbc.SQLServerDriver"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Removed as not used."
        },
        {
          "name": "db.operation",
          "type": "string",
          "brief": "Deprecated, use `db.operation.name` instead.",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `db.operation.name`."
        },
        {
          "name": "db.user",
          "type": "string",
          "brief": "Deprecated, no replacement at this time.",
          "examples": [
            "readonly_user",
            "reporting_user"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "No replacement at this time."
        },
        {
          "name": "db.statement",
          "type": "string",
          "brief": "The database statement being executed.",
          "examples": [
            "SELECT * FROM wuser_table",
            "SET mykey \"WuValue\""
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `db.query.text`."
        },
        {
          "name": "db.cassandra.table",
          "type": "string",
          "brief": "Deprecated, use `db.collection.name` instead.",
          "examples": "mytable",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `db.collection.name`."
        },
        {
          "name": "db.cosmosdb.container",
          "type": "string",
          "brief": "Deprecated, use `db.collection.name` instead.",
          "examples": "mytable",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `db.collection.name`."
        },
        {
          "name": "db.mongodb.collection",
          "type": "string",
          "brief": "Deprecated, use `db.collection.name` instead.",
          "examples": "mytable",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `db.collection.name`."
        },
        {
          "name": "db.sql.table",
          "type": "string",
          "brief": "Deprecated, use `db.collection.name` instead.",
          "examples": "mytable",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `db.collection.name`."
        },
        {
          "name": "db.redis.database_index",
          "type": "int",
          "brief": "Deprecated, use `db.namespace` instead.",
          "examples": [
            0,
            1,
            15
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `db.namespace`."
        },
        {
          "name": "db.name",
          "type": "string",
          "brief": "Deprecated, use `db.namespace` instead.",
          "examples": [
            "customers",
            "main"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `db.namespace`."
        },
        {
          "name": "db.mssql.instance_name",
          "type": "string",
          "brief": "Deprecated, SQL Server instance is now populated as a part of `db.namespace` attribute.",
          "examples": "MSSQLSERVER",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Deprecated, no replacement at this time."
        },
        {
          "name": "db.instance.id",
          "type": "string",
          "brief": "Deprecated, no general replacement at this time. For Elasticsearch, use `db.elasticsearch.node.name` instead.",
          "examples": "mysql-e26b99z.example.com",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Deprecated, no general replacement at this time. For Elasticsearch, use `db.elasticsearch.node.name` instead."
        },
        {
          "name": "db.elasticsearch.cluster.name",
          "type": "string",
          "brief": "Deprecated, use `db.namespace` instead.\n",
          "examples": [
            "e9106fc68e3044f0b1475b04bf4ffd5f"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `db.namespace`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deprecated/db.yaml"
      }
    },
    {
      "id": "registry.db.metrics.deprecated",
      "type": "attribute_group",
      "brief": "\"Describes deprecated db metrics attributes.\"\n",
      "attributes": [
        {
          "name": "state",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `db.client.connection.state` instead.",
          "examples": [
            "idle"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `db.client.connection.state`."
        },
        {
          "name": "pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `db.client.connection.pool.name`."
        },
        {
          "name": "db.client.connections.state",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `db.client.connection.state` instead.",
          "examples": [
            "idle"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `db.client.connection.state`."
        },
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `db.client.connection.pool.name`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deprecated/db.yaml"
      }
    },
    {
      "id": "otel.scope",
      "type": "resource",
      "brief": "Attributes used by non-OTLP exporters to represent OpenTelemetry Scope's concepts.",
      "attributes": [
        {
          "name": "otel.scope.name",
          "type": "string",
          "brief": "The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).",
          "examples": [
            "io.opentelemetry.contrib.mongodb"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "otel.scope.version",
          "type": "string",
          "brief": "The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).",
          "examples": [
            "1.0.0"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/scope/exporter/exporter.yaml",
        "attributes": {
          "otel.scope.name": {
            "source_group": "registry.otel.scope",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "otel.scope.version": {
            "source_group": "registry.otel.scope",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "feature_flag",
      "type": "event",
      "brief": "This semantic convention defines the attributes used to represent a feature flag evaluation as an event.\n",
      "attributes": [
        {
          "name": "feature_flag.provider_name",
          "type": "string",
          "brief": "The name of the service provider that performs the flag evaluation.",
          "examples": [
            "Flag Manager"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "feature_flag.variant",
          "type": "string",
          "brief": "SHOULD be a semantic identifier for a value. If one is unavailable, a stringified version of the value can be used.\n",
          "examples": [
            "red",
            "true",
            "on"
          ],
          "requirement_level": "recommended",
          "note": "A semantic identifier, commonly referred to as a variant, provides a means\nfor referring to a value without including the value itself. This can\nprovide additional context for understanding the meaning behind a value.\nFor example, the variant `red` maybe be used for the value `#c05543`.\n\nA stringified version of the value can be used in situations where a\nsemantic identifier is unavailable. String representation of the value\nshould be determined by the implementer.",
          "stability": "experimental"
        },
        {
          "name": "feature_flag.key",
          "type": "string",
          "brief": "The unique identifier of the feature flag.",
          "examples": [
            "logo-color"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "feature_flag",
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/feature-flag.yaml",
        "attributes": {
          "feature_flag.key": {
            "source_group": "registry.feature_flag",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "feature_flag.provider_name": {
            "source_group": "registry.feature_flag",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "feature_flag.variant": {
            "source_group": "registry.feature_flag",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "graphql",
      "type": "span",
      "brief": "This document defines semantic conventions to apply when instrumenting the GraphQL implementation. They map GraphQL operations to attributes on a Span.\n",
      "attributes": [
        {
          "name": "graphql.operation.name",
          "type": "string",
          "brief": "The name of the operation being executed.",
          "examples": "findBookById",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "graphql.operation.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "query",
                "value": "query",
                "brief": "GraphQL query",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mutation",
                "value": "mutation",
                "brief": "GraphQL mutation",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "subscription",
                "value": "subscription",
                "brief": "GraphQL subscription",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of the operation being executed.",
          "examples": [
            "query",
            "mutation",
            "subscription"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "graphql.document",
          "type": "string",
          "brief": "The GraphQL document being executed.",
          "examples": "query findBookById { bookById(id: ?) { name } }",
          "requirement_level": "recommended",
          "note": "The value may be sanitized to exclude sensitive information.",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/graphql.yml",
        "attributes": {
          "graphql.document": {
            "source_group": "registry.graphql",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "graphql.operation.name": {
            "source_group": "registry.graphql",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "graphql.operation.type": {
            "source_group": "registry.graphql",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "trace.http.client",
      "type": "span",
      "brief": "Semantic Convention for HTTP Client",
      "stability": "stable",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "http.request.header",
          "type": "template[string[]]",
          "brief": "HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            "http.request.header.content-type=[\"application/json\"]",
            "http.request.header.x-forwarded-for=[\"1.2.3.4\", \"1.2.3.5\"]"
          ],
          "requirement_level": "opt_in",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured. Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\nThe `User-Agent` header is already captured in the `user_agent.original` attribute. Users MAY explicitly configure instrumentations to capture them even though it is not recommended.\nThe attribute value MUST consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method_original",
          "type": "string",
          "brief": "Original HTTP method sent by the client in the request line.",
          "examples": [
            "GeT",
            "ACL",
            "foo"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's different than `http.request.method`."
          },
          "stability": "stable"
        },
        {
          "name": "http.request.resend_count",
          "type": "int",
          "brief": "The ordinal number of request resending attempt (for any reason, including redirects).\n",
          "examples": 3,
          "requirement_level": {
            "recommended": "if and only if request was retried."
          },
          "note": "The resend count SHOULD be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n",
          "stability": "stable"
        },
        {
          "name": "http.response.header",
          "type": "template[string[]]",
          "brief": "HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            "http.response.header.content-type=[\"application/json\"]",
            "http.response.header.my-custom-header=[\"abc\", \"def\"]"
          ],
          "requirement_level": "opt_in",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured. Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\nUsers MAY explicitly configure instrumentations to capture them even though it is not recommended.\nThe attribute value MUST consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "If `network.peer.address` is set."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "opt_in",
          "note": "Generally `tcp` for `HTTP/1.0`, `HTTP/1.1`, and `HTTP/2`. Generally `udp` for `HTTP/3`. Other obscure implementations are possible.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Host identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "url.full",
          "type": "string",
          "brief": "Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)",
          "examples": [
            "https://www.foo.bar/search?q=OpenTelemetry#SemConv",
            "//localhost"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment is not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.\n`url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case username and password SHOULD be redacted and attribute's value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.\n`url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed). Sensitive content provided in `url.full` SHOULD be scrubbed when instrumentations can identify it.\n",
          "stability": "stable"
        },
        {
          "name": "user_agent.original",
          "type": "string",
          "brief": "Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n",
          "examples": [
            "CERN-LineMode/2.15 libwww/2.17b3",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1",
            "YourApp/1.0.0 grpc-java-okhttp/1.27.2"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/http.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.header": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "http.request.method_original": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.request.resend_count": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.header": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "url.full": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "user_agent.original": {
            "source_group": "registry.user_agent",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "trace.http.client.experimental",
      "type": "attribute_group",
      "brief": "Experimental attributes for HTTP Client spans",
      "stability": "experimental",
      "attributes": [
        {
          "name": "http.request.body.size",
          "type": "int",
          "brief": "The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
          "examples": 3495,
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "http.request.size",
          "type": "int",
          "brief": "The total size of the request in bytes. This should be the total number of bytes sent over the wire, including the request line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and request body if any.\n",
          "examples": 1437,
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "http.response.body.size",
          "type": "int",
          "brief": "The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
          "examples": 3495,
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "http.response.size",
          "type": "int",
          "brief": "The total size of the response in bytes. This should be the total number of bytes sent over the wire, including the status line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and response body and trailers if any.\n",
          "examples": 1437,
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": "opt_in",
          "note": "The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/http.yaml",
        "attributes": {
          "http.request.body.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.request.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.body.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "url.template": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "trace.http.server",
      "type": "span",
      "brief": "Semantic Convention for HTTP Server",
      "stability": "stable",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method_original",
          "type": "string",
          "brief": "Original HTTP method sent by the client in the request line.",
          "examples": [
            "GeT",
            "ACL",
            "foo"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's different than `http.request.method`."
          },
          "stability": "stable"
        },
        {
          "name": "http.response.header",
          "type": "template[string[]]",
          "brief": "HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            "http.response.header.content-type=[\"application/json\"]",
            "http.response.header.my-custom-header=[\"abc\", \"def\"]"
          ],
          "requirement_level": "opt_in",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured. Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\nUsers MAY explicitly configure instrumentations to capture them even though it is not recommended.\nThe attribute value MUST consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "If `network.peer.address` is set."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "opt_in",
          "note": "Generally `tcp` for `HTTP/1.0`, `HTTP/1.1`, and `HTTP/2`. Generally `udp` for `HTTP/3`. Other obscure implementations are possible.\n",
          "stability": "stable"
        },
        {
          "name": "client.address",
          "type": "string",
          "brief": "Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "83.164.160.102"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "The IP address of the original client behind all proxies, if known (e.g. from [Forwarded#for](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#for), [X-Forwarded-For](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-For), or a similar header). Otherwise, the immediate client peer address.\n",
          "stability": "stable"
        },
        {
          "name": "client.port",
          "type": "int",
          "brief": "The port of whichever client was captured in `client.address`.",
          "examples": [
            65123
          ],
          "requirement_level": "opt_in",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries,  for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.header",
          "type": "template[string[]]",
          "brief": "HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            "http.request.header.content-type=[\"application/json\"]",
            "http.request.header.x-forwarded-for=[\"1.2.3.4\", \"1.2.3.5\"]"
          ],
          "requirement_level": "opt_in",
          "sampling_relevant": true,
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured. Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\nThe `User-Agent` header is already captured in the `user_agent.original` attribute. Users MAY explicitly configure instrumentations to capture them even though it is not recommended.\nThe attribute value MUST consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n",
          "stability": "stable"
        },
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's available"
          },
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        },
        {
          "name": "network.local.address",
          "type": "string",
          "brief": "Local socket address. Useful in case of a multi-IP host.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "network.local.port",
          "type": "int",
          "brief": "Local socket port. Useful in case of a multi-port host.",
          "examples": [
            65123
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "sampling_relevant": true,
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n",
          "stability": "stable"
        },
        {
          "name": "url.path",
          "type": "string",
          "brief": "The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n",
          "examples": [
            "/search"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "Sensitive content provided in `url.path` SHOULD be scrubbed when instrumentations can identify it.\n",
          "stability": "stable"
        },
        {
          "name": "url.query",
          "type": "string",
          "brief": "The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n",
          "examples": [
            "q=OpenTelemetry"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "sampling_relevant": true,
          "note": "Sensitive content provided in `url.query` SHOULD be scrubbed when instrumentations can identify it.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "required",
          "sampling_relevant": true,
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "stability": "stable"
        },
        {
          "name": "user_agent.original",
          "type": "string",
          "brief": "Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n",
          "examples": [
            "CERN-LineMode/2.15 libwww/2.17b3",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1",
            "YourApp/1.0.0 grpc-java-okhttp/1.27.2"
          ],
          "requirement_level": "recommended",
          "sampling_relevant": true,
          "stability": "stable"
        }
      ],
      "span_kind": "server",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/http.yaml",
        "attributes": {
          "client.address": {
            "source_group": "registry.client",
            "inherited_fields": [
              "brief",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "sampling_relevant"
            ]
          },
          "client.port": {
            "source_group": "registry.client",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.header": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "http.request.method_original": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.header": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.route": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.local.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "network.local.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "sampling_relevant"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "url.path": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "url.query": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level",
              "sampling_relevant"
            ]
          },
          "user_agent.original": {
            "source_group": "registry.user_agent",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "sampling_relevant"
            ]
          }
        }
      }
    },
    {
      "id": "trace.http.server.experimental",
      "type": "attribute_group",
      "brief": "Experimental attributes for HTTP Server spans",
      "stability": "experimental",
      "attributes": [
        {
          "name": "http.request.body.size",
          "type": "int",
          "brief": "The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
          "examples": 3495,
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "http.request.size",
          "type": "int",
          "brief": "The total size of the request in bytes. This should be the total number of bytes sent over the wire, including the request line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and request body if any.\n",
          "examples": 1437,
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "http.response.body.size",
          "type": "int",
          "brief": "The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
          "examples": 3495,
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "http.response.size",
          "type": "int",
          "brief": "The total size of the response in bytes. This should be the total number of bytes sent over the wire, including the status line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and response body and trailers if any.\n",
          "examples": 1437,
          "requirement_level": "opt_in",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/http.yaml",
        "attributes": {
          "http.request.body.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.request.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.body.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.size": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.http.common",
      "type": "attribute_group",
      "brief": "Describes HTTP attributes.",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/http-common.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.http.client",
      "type": "attribute_group",
      "brief": "HTTP Client attributes",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Host identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/http-common.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.http.client.experimental",
      "type": "attribute_group",
      "brief": "Experimental HTTP attributes.",
      "attributes": [
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": "opt_in",
          "note": "The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/http-common.yaml",
        "attributes": {
          "url.template": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.http.server",
      "type": "attribute_group",
      "brief": "HTTP Server attributes",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "required",
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's available"
          },
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `server.address` is set."
          },
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/http-common.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.route": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "process",
      "type": "resource",
      "brief": "An operating system process.\n",
      "prefix": "process",
      "attributes": [
        {
          "name": "process.pid",
          "type": "int",
          "brief": "Process identifier (PID).\n",
          "examples": [
            1234
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.parent_pid",
          "type": "int",
          "brief": "Parent Process identifier (PPID).\n",
          "examples": [
            111
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.owner",
          "type": "string",
          "brief": "The username of the user that owns the process.\n",
          "examples": [
            "root"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.executable.name",
          "type": "string",
          "brief": "The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n",
          "examples": [
            "otelcol"
          ],
          "requirement_level": {
            "conditionally_required": "See [Selecting process attributes](#selecting-process-attributes) for details."
          },
          "stability": "experimental"
        },
        {
          "name": "process.executable.path",
          "type": "string",
          "brief": "The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n",
          "examples": [
            "/usr/bin/cmd/otelcol"
          ],
          "requirement_level": {
            "conditionally_required": "See [Selecting process attributes](#selecting-process-attributes) for details."
          },
          "stability": "experimental"
        },
        {
          "name": "process.command",
          "type": "string",
          "brief": "The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n",
          "examples": [
            "cmd/otelcol"
          ],
          "requirement_level": {
            "conditionally_required": "See [Selecting process attributes](#selecting-process-attributes) for details."
          },
          "stability": "experimental"
        },
        {
          "name": "process.command_line",
          "type": "string",
          "brief": "The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n",
          "examples": [
            "C:\\cmd\\otecol --config=\"my directory\\config.yaml\""
          ],
          "requirement_level": {
            "conditionally_required": "See [Selecting process attributes](#selecting-process-attributes) for details."
          },
          "stability": "experimental"
        },
        {
          "name": "process.command_args",
          "type": "string[]",
          "brief": "All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n",
          "examples": [
            "cmd/otecol",
            "--config=config.yaml"
          ],
          "requirement_level": {
            "conditionally_required": "See [Selecting process attributes](#selecting-process-attributes) for details."
          },
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/process.yaml",
        "attributes": {
          "process.command": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.command_args": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.command_line": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.executable.name": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.executable.path": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "process.owner": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "process.parent_pid": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "process.pid": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "process.runtime",
      "type": "resource",
      "brief": "The single (language) runtime instance which is monitored.\n",
      "prefix": "process.runtime",
      "attributes": [
        {
          "name": "process.runtime.name",
          "type": "string",
          "brief": "The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n",
          "examples": [
            "OpenJDK Runtime Environment"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.runtime.version",
          "type": "string",
          "brief": "The version of the runtime of this process, as returned by the runtime without modification.\n",
          "examples": "14.0.2",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.runtime.description",
          "type": "string",
          "brief": "An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n",
          "examples": "Eclipse OpenJ9 Eclipse OpenJ9 VM openj9-0.21.0",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/process.yaml",
        "attributes": {
          "process.runtime.description": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "process.runtime.name": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "process.runtime.version": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "registry.android",
      "type": "attribute_group",
      "brief": "The Android platform on which the Android application is running.\n",
      "prefix": "android",
      "attributes": [
        {
          "name": "android.os.api_level",
          "type": "string",
          "brief": "Uniquely identifies the framework API revision offered by a version (`os.version`) of the android operating system. More information can be found [here](https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels).\n",
          "examples": [
            "33",
            "32"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/android.yaml"
      }
    },
    {
      "id": "registry.deployment",
      "type": "attribute_group",
      "brief": "This document defines attributes for software deployments.\n",
      "prefix": "deployment",
      "attributes": [
        {
          "name": "deployment.environment",
          "type": "string",
          "brief": "Name of the [deployment environment](https://wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n",
          "examples": [
            "staging",
            "production"
          ],
          "requirement_level": "recommended",
          "note": "`deployment.environment` does not affect the uniqueness constraints defined through\nthe `service.namespace`, `service.name` and `service.instance.id` resource attributes.\nThis implies that resources carrying the following attribute combinations MUST be\nconsidered to be identifying the same service:\n\n* `service.name=frontend`, `deployment.environment=production`\n* `service.name=frontend`, `deployment.environment=staging`.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deployment.yaml"
      }
    },
    {
      "id": "registry.webengine",
      "type": "attribute_group",
      "brief": "This document defines the attributes used to describe the packaged software running the application code.\n",
      "prefix": "webengine",
      "attributes": [
        {
          "name": "webengine.name",
          "type": "string",
          "brief": "The name of the web engine.\n",
          "examples": [
            "WildFly"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "webengine.version",
          "type": "string",
          "brief": "The version of the web engine.\n",
          "examples": [
            "21.0.0"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "webengine.description",
          "type": "string",
          "brief": "Additional description of the web engine (e.g. detailed version and edition information).\n",
          "examples": [
            "WildFly Full 21.0.0.Final (WildFly Core 13.0.1.Final) - 2.2.2.Final"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/webengine.yaml"
      }
    },
    {
      "id": "registry.gcp",
      "type": "attribute_group",
      "brief": "Attributes for Google Cloud",
      "prefix": "gcp",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/gcp.yaml"
      }
    },
    {
      "id": "registry.gcp.client",
      "type": "attribute_group",
      "brief": "Attributes for Google Cloud client libraries.\n",
      "prefix": "gcp.client",
      "attributes": [
        {
          "name": "gcp.client.service",
          "type": "string",
          "brief": "Identifies the Google Cloud service for which the official client library is intended.",
          "examples": [
            "appengine",
            "run",
            "firestore",
            "alloydb",
            "spanner"
          ],
          "requirement_level": "recommended",
          "note": "Intended to be a stable identifier for Google Cloud client libraries that is uniform across implementation languages. The value should be derived from the canonical service domain for the service; for example, 'foo.googleapis.com' should result in a value of 'foo'.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/gcp.yaml"
      }
    },
    {
      "id": "registry.gcp.cloud_run",
      "type": "attribute_group",
      "brief": "This document defines attributes for Google Cloud Run.\n",
      "prefix": "gcp.cloud_run",
      "attributes": [
        {
          "name": "gcp.cloud_run.job.execution",
          "type": "string",
          "brief": "The name of the Cloud Run [execution](https://cloud.google.com/run/docs/managing/job-executions) being run for the Job, as set by the [`CLOUD_RUN_EXECUTION`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.\n",
          "examples": [
            "job-name-xxxx",
            "sample-job-mdw84"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gcp.cloud_run.job.task_index",
          "type": "int",
          "brief": "The index for a task within an execution as provided by the [`CLOUD_RUN_TASK_INDEX`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.\n",
          "examples": [
            0,
            1
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/gcp.yaml"
      }
    },
    {
      "id": "registry.gcp.gce",
      "type": "attribute_group",
      "brief": "This document defines attributes for Google Compute Engine (GCE).\n",
      "prefix": "gcp.gce",
      "attributes": [
        {
          "name": "gcp.gce.instance.name",
          "type": "string",
          "brief": "The instance name of a GCE instance. This is the value provided by `host.name`, the visible name of the instance in the Cloud Console UI, and the prefix for the default hostname of the instance as defined by the [default internal DNS name](https://cloud.google.com/compute/docs/internal-dns#instance-fully-qualified-domain-names).\n",
          "examples": [
            "instance-1",
            "my-vm-name"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gcp.gce.instance.hostname",
          "type": "string",
          "brief": "The hostname of a GCE instance. This is the full value of the default or [custom hostname](https://cloud.google.com/compute/docs/instances/custom-hostname-vm).\n",
          "examples": [
            "my-host1234.example.com",
            "sample-vm.us-west1-b.c.my-project.internal"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/gcp.yaml"
      }
    },
    {
      "id": "registry.process.deprecated",
      "type": "attribute_group",
      "brief": "Deprecated process attributes.",
      "attributes": [
        {
          "name": "process.cpu.state",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "wait",
                "value": "wait",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `cpu.mode` instead.",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `cpu.mode`"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deprecated/process.yaml"
      }
    },
    {
      "id": "registry.server",
      "type": "attribute_group",
      "brief": "These attributes may be used to describe the server in a connection-based network interaction where there is one side that initiates the connection (the client is the side that initiates the connection). This covers all TCP network interactions since TCP is connection-based and one side initiates the connection (an exception is made for peer-to-peer communication over TCP where the \"user-facing\" surface of the protocol / API doesn't expose a clear notion of client and server). This also covers UDP network interactions where one side initiates the interaction, e.g. QUIC (HTTP/3) and DNS.\n",
      "prefix": "server",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/server.yaml"
      }
    },
    {
      "id": "registry.container",
      "type": "attribute_group",
      "brief": "A container instance.\n",
      "prefix": "container",
      "attributes": [
        {
          "name": "container.name",
          "type": "string",
          "brief": "Container name used by container runtime.\n",
          "examples": [
            "opentelemetry-autoconf"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "container.id",
          "type": "string",
          "brief": "Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n",
          "examples": [
            "a3bf90e006b2"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "container.runtime",
          "type": "string",
          "brief": "The container runtime managing this container.\n",
          "examples": [
            "docker",
            "containerd",
            "rkt"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "container.image.name",
          "type": "string",
          "brief": "Name of the image the container was built on.\n",
          "examples": [
            "gcr.io/opentelemetry/operator"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "container.image.tags",
          "type": "string[]",
          "brief": "Container image tags. An example can be found in [Docker Image Inspect](https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect). Should be only the `<tag>` section of the full name for example from `registry.example.com/my-org/my-image:<tag>`.\n",
          "examples": [
            "v1.27.1",
            "3.5.7-0"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "container.image.id",
          "type": "string",
          "brief": "Runtime specific image identifier. Usually a hash algorithm followed by a UUID.\n",
          "examples": [
            "sha256:19c92d0a00d1b66d897bceaa7319bee0dd38a10a851c60bcec9474aa3f01e50f"
          ],
          "requirement_level": "recommended",
          "note": "Docker defines a sha256 of the image id; `container.image.id` corresponds to the `Image` field from the Docker container inspect [API](https://docs.docker.com/engine/api/v1.43/#tag/Container/operation/ContainerInspect) endpoint.\nK8s defines a link to the container registry repository with digest `\"imageID\": \"registry.azurecr.io /namespace/service/dockerfile@sha256:bdeabd40c3a8a492eaf9e8e44d0ebbb84bac7ee25ac0cf8a7159d25f62555625\"`.\nThe ID is assigned by the container runtime and can vary in different environments. Consider using `oci.manifest.digest` if it is important to identify the same image in different environments/runtimes.\n",
          "stability": "experimental"
        },
        {
          "name": "container.image.repo_digests",
          "type": "string[]",
          "brief": "Repo digests of the container image as provided by the container runtime.\n",
          "examples": [
            "example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb",
            "internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578"
          ],
          "requirement_level": "recommended",
          "note": "[Docker](https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect) and [CRI](https://github.com/kubernetes/cri-api/blob/c75ef5b473bbe2d0a4fc92f82235efd665ea8e9f/pkg/apis/runtime/v1/api.proto#L1237-L1238) report those under the `RepoDigests` field.\n",
          "stability": "experimental"
        },
        {
          "name": "container.command",
          "type": "string",
          "brief": "The command used to run the container (i.e. the command name).\n",
          "examples": [
            "otelcontribcol"
          ],
          "requirement_level": "recommended",
          "note": "If using embedded credentials or sensitive data, it is recommended to remove them to prevent potential leakage.\n",
          "stability": "experimental"
        },
        {
          "name": "container.command_line",
          "type": "string",
          "brief": "The full command run by the container as a single string representing the full command. [2]\n",
          "examples": [
            "otelcontribcol --config config.yaml"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "container.command_args",
          "type": "string[]",
          "brief": "All the command arguments (including the command/executable itself) run by the container. [2]\n",
          "examples": [
            "otelcontribcol, --config, config.yaml"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "container.label",
          "type": "template[string]",
          "brief": "Container labels, `<key>` being the label name, the value being the label value.\n",
          "examples": [
            "container.label.app=nginx"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/container.yaml"
      }
    },
    {
      "id": "faas_span",
      "type": "span",
      "brief": "This semantic convention describes an instance of a function that runs without provisioning or managing of servers (also known as serverless functions or Function as a Service (FaaS)) with spans.\n",
      "prefix": "faas",
      "attributes": [
        {
          "name": "cloud.resource_id",
          "type": "string",
          "brief": "Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://cloud.google.com/apis/design/resource_names#full_resource_name) on GCP)\n",
          "examples": [
            "arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function",
            "//run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID",
            "/subscriptions/<SUBSCIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>"
          ],
          "requirement_level": "recommended",
          "note": "On some cloud providers, it may not be possible to determine the full ID at startup,\nso it may be necessary to set `cloud.resource_id` as a span attribute instead.\n\nThe exact value to use for `cloud.resource_id` depends on the cloud provider.\nThe following well-known definitions MUST be used if you set this attribute and they apply:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\n  Take care not to use the \"invoked ARN\" directly but replace any\n  [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)\n  with the resolved function version, as the same runtime instance may be invocable with\n  multiple different aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/rest/api/resources/resources/get-by-id) of the invoked function,\n  *not* the function app, having the form\n  `/subscriptions/<SUBSCIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.\n  This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share\n  a TracerProvider.\n",
          "stability": "experimental"
        },
        {
          "name": "faas.invocation_id",
          "type": "string",
          "brief": "The invocation ID of the current function invocation.\n",
          "examples": "af9d5aa4-a685-4c5f-a22b-444f80b3cc28",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "note": "For the server/consumer span on the incoming side,\n`faas.trigger` MUST be set.\n\nClients invoking FaaS instances usually cannot set `faas.trigger`,\nsince they would typically need to look in the payload to determine\nthe event type. If clients set it, it should be the same as the\ntrigger that corresponding incoming would have (i.e., this has\nnothing to do with the underlying transport used to make the API\ncall to invoke the lambda, which is often HTTP).\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/faas.yaml",
        "attributes": {
          "cloud.resource_id": {
            "source_group": "registry.cloud",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.invocation_id": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "note"
            ]
          }
        }
      }
    },
    {
      "id": "faas_span.datasource",
      "type": "span",
      "brief": "Semantic Convention for FaaS triggered as a response to some data source operation such as a database or filesystem read/write.\n",
      "prefix": "faas.document",
      "attributes": [
        {
          "name": "faas.document.time",
          "type": "string",
          "brief": "A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n",
          "examples": "2020-01-23T13:47:06Z",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "faas.document.name",
          "type": "string",
          "brief": "The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n",
          "examples": [
            "myFile.txt",
            "myTableName"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "faas.document.collection",
          "type": "string",
          "brief": "The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n",
          "examples": [
            "myBucketName",
            "myDbName"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "faas.document.operation",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "insert",
                "value": "insert",
                "brief": "When a new object is created.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "edit",
                "value": "edit",
                "brief": "When an object is modified.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "delete",
                "brief": "When an object is deleted.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes the type of the operation that was performed on the data.",
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/faas.yaml",
        "attributes": {
          "faas.document.collection": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.document.name": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.document.operation": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.document.time": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "faas_span.http",
      "type": "span",
      "brief": "Semantic Convention for FaaS triggered as a response to some data source operation such as a database or filesystem read/write.\n",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/faas.yaml"
      }
    },
    {
      "id": "faas_span.pubsub",
      "type": "span",
      "brief": "Semantic Convention for FaaS set to be executed when messages are sent to a messaging system.\n",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/faas.yaml"
      }
    },
    {
      "id": "faas_span.timer",
      "type": "span",
      "brief": "Semantic Convention for FaaS scheduled to be executed regularly.\n",
      "prefix": "faas",
      "attributes": [
        {
          "name": "faas.time",
          "type": "string",
          "brief": "A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n",
          "examples": "2020-01-23T13:47:06Z",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "faas.cron",
          "type": "string",
          "brief": "A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n",
          "examples": "0/5 * * * ? *",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/faas.yaml",
        "attributes": {
          "faas.cron": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.time": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "faas_span.in",
      "type": "span",
      "brief": "Contains additional attributes for incoming FaaS spans.\n",
      "prefix": "faas",
      "attributes": [
        {
          "name": "faas.coldstart",
          "type": "boolean",
          "brief": "A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "required",
          "note": "For the server/consumer span on the incoming side,\n`faas.trigger` MUST be set.\n\nClients invoking FaaS instances usually cannot set `faas.trigger`,\nsince they would typically need to look in the payload to determine\nthe event type. If clients set it, it should be the same as the\ntrigger that corresponding incoming would have (i.e., this has\nnothing to do with the underlying transport used to make the API\ncall to invoke the lambda, which is often HTTP).\n",
          "stability": "experimental"
        }
      ],
      "span_kind": "server",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/faas.yaml",
        "attributes": {
          "faas.coldstart": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "faas_span.out",
      "type": "span",
      "brief": "Contains additional attributes for outgoing FaaS spans.\n",
      "prefix": "faas",
      "attributes": [
        {
          "name": "faas.invoked_name",
          "type": "string",
          "brief": "The name of the invoked function.\n",
          "examples": "my-function",
          "requirement_level": "required",
          "note": "SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n",
          "stability": "experimental"
        },
        {
          "name": "faas.invoked_provider",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "alibaba_cloud",
                "value": "alibaba_cloud",
                "brief": "Alibaba Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws",
                "value": "aws",
                "brief": "Amazon Web Services",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure",
                "value": "azure",
                "brief": "Microsoft Azure",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp",
                "value": "gcp",
                "brief": "Google Cloud Platform",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "tencent_cloud",
                "value": "tencent_cloud",
                "brief": "Tencent Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The cloud provider of the invoked function.\n",
          "requirement_level": "required",
          "note": "SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n",
          "stability": "experimental"
        },
        {
          "name": "faas.invoked_region",
          "type": "string",
          "brief": "The cloud region of the invoked function.\n",
          "examples": "eu-central-1",
          "requirement_level": {
            "conditionally_required": "For some cloud providers, like AWS or GCP, the region in which a function is hosted is essential to uniquely identify the function and also part of its endpoint. Since it's part of the endpoint being called, the region is always known to clients. In these cases, `faas.invoked_region` MUST be set accordingly. If the region is unknown to the client or not required for identifying the invoked function, setting `faas.invoked_region` is optional.\n"
          },
          "note": "SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/faas.yaml",
        "attributes": {
          "faas.invoked_name": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.invoked_provider": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.invoked_region": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.messaging.common.minimal",
      "type": "attribute_group",
      "brief": "Common cross-signal messaging attributes.",
      "prefix": "messaging",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/messaging-common.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "session-id",
      "type": "attribute_group",
      "brief": "Session is defined as the period of time encompassing all activities performed by the application and the actions executed by the end user.\nConsequently, a Session is represented as a collection of Logs, Events, and Spans emitted by the Client Application throughout the Session's duration. Each Session is assigned a unique identifier, which is included as an attribute in the Logs, Events, and Spans generated during the Session's lifecycle.\nWhen a session reaches end of life, typically due to user inactivity or session timeout, a new session identifier will be assigned. The previous session identifier may be provided by the instrumentation so that telemetry backends can link the two sessions.\n",
      "prefix": "session",
      "attributes": [
        {
          "name": "session.id",
          "type": "string",
          "brief": "A unique id to identify a session.",
          "examples": "00112233-4455-6677-8899-aabbccddeeff",
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "session.previous_id",
          "type": "string",
          "brief": "The previous `session.id` for this user, when known.",
          "examples": "00112233-4455-6677-8899-aabbccddeeff",
          "requirement_level": "opt_in",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/session.yaml",
        "attributes": {
          "session.id": {
            "source_group": "registry.session",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "session.previous_id": {
            "source_group": "registry.session",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.process.cpu.time",
      "type": "metric",
      "brief": "Total CPU seconds broken down by different states.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "cpu.mode",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "A process SHOULD be characterized _either_ by data points with no `mode` labels, _or only_ data points with `mode` labels.\n",
          "examples": [
            "user",
            "system"
          ],
          "requirement_level": "recommended",
          "note": "Following states SHOULD be used: `user`, `system`, `wait`",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "process.cpu.time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/process-metrics.yaml",
        "attributes": {
          "cpu.mode": {
            "source_group": "registry.cpu",
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note"
            ]
          }
        }
      }
    },
    {
      "id": "metric.process.cpu.utilization",
      "type": "metric",
      "brief": "Difference in process.cpu.time since the last measurement, divided by the elapsed time and number of CPUs available to the process.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "cpu.mode",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "A process SHOULD be characterized _either_ by data points with no `mode` labels, _or only_ data points with `mode` labels.\n",
          "examples": [
            "user",
            "system"
          ],
          "requirement_level": "recommended",
          "note": "Following states SHOULD be used: `user`, `system`, `wait`",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "process.cpu.utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/process-metrics.yaml",
        "attributes": {
          "cpu.mode": {
            "source_group": "registry.cpu",
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note"
            ]
          }
        }
      }
    },
    {
      "id": "metric.process.memory.usage",
      "type": "metric",
      "brief": "The amount of physical memory in use.",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "process.memory.usage",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/process-metrics.yaml"
      }
    },
    {
      "id": "metric.process.memory.virtual",
      "type": "metric",
      "brief": "The amount of committed virtual memory.",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "process.memory.virtual",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/process-metrics.yaml"
      }
    },
    {
      "id": "metric.process.disk.io",
      "type": "metric",
      "brief": "Disk bytes transferred.",
      "prefix": "process.disk",
      "stability": "experimental",
      "attributes": [
        {
          "name": "disk.io.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "read",
                "value": "read",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "write",
                "value": "write",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The disk IO operation direction.",
          "examples": [
            "read"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "process.disk.io",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/process-metrics.yaml",
        "attributes": {
          "disk.io.direction": {
            "source_group": "registry.disk",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.process.network.io",
      "type": "metric",
      "brief": "Network bytes transferred.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "process.network.io",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/process-metrics.yaml",
        "attributes": {
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.process.thread.count",
      "type": "metric",
      "brief": "Process threads count.",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "process.thread.count",
      "instrument": "updowncounter",
      "unit": "{thread}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/process-metrics.yaml"
      }
    },
    {
      "id": "metric.process.open_file_descriptor.count",
      "type": "metric",
      "brief": "Number of file descriptors in use by the process.",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "process.open_file_descriptor.count",
      "instrument": "updowncounter",
      "unit": "{count}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/process-metrics.yaml"
      }
    },
    {
      "id": "metric.process.context_switches",
      "type": "metric",
      "brief": "Number of times the process has been context switched.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "process.context_switch_type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "voluntary",
                "value": "voluntary",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "involuntary",
                "value": "involuntary",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Specifies whether the context switches for this data point were voluntary or involuntary.",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "process.context_switches",
      "instrument": "counter",
      "unit": "{count}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/process-metrics.yaml",
        "attributes": {
          "process.context_switch_type": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.process.paging.faults",
      "type": "metric",
      "brief": "Number of page faults the process has made.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "process.paging.fault_type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "major",
                "value": "major",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "minor",
                "value": "minor",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of page fault for this data point. Type `major` is for major/hard page faults, and `minor` is for minor/soft page faults.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "process.paging.faults",
      "instrument": "counter",
      "unit": "{fault}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/process-metrics.yaml",
        "attributes": {
          "process.paging.fault_type": {
            "source_group": "registry.process",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "url",
      "type": "attribute_group",
      "brief": "Attributes describing URL.",
      "prefix": "url",
      "attributes": [
        {
          "name": "url.fragment",
          "type": "string",
          "brief": "The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component\n",
          "examples": [
            "SemConv"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "url.path",
          "type": "string",
          "brief": "The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n",
          "examples": [
            "/search"
          ],
          "requirement_level": "recommended",
          "note": "Sensitive content provided in `url.path` SHOULD be scrubbed when instrumentations can identify it.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "https",
            "ftp",
            "telnet"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "url.full",
          "type": "string",
          "brief": "Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)",
          "examples": [
            "https://www.foo.bar/search?q=OpenTelemetry#SemConv",
            "//localhost"
          ],
          "tag": "sensitive-information",
          "requirement_level": "recommended",
          "note": "For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment is not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.\n`url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case username and password SHOULD be redacted and attribute's value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.\n`url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed). Sensitive content provided in `url.full` SHOULD be scrubbed when instrumentations can identify it.\n",
          "stability": "stable"
        },
        {
          "name": "url.query",
          "type": "string",
          "brief": "The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n",
          "examples": [
            "q=OpenTelemetry"
          ],
          "tag": "sensitive-information",
          "requirement_level": "recommended",
          "note": "Sensitive content provided in `url.query` SHOULD be scrubbed when instrumentations can identify it.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/url.yaml",
        "attributes": {
          "url.fragment": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "url.full": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "tag"
            ]
          },
          "url.path": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "url.query": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "tag"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "k8s.cluster",
      "type": "resource",
      "brief": "A Kubernetes Cluster.\n",
      "prefix": "k8s.cluster",
      "attributes": [
        {
          "name": "k8s.cluster.name",
          "type": "string",
          "brief": "The name of the cluster.\n",
          "examples": [
            "opentelemetry-cluster"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.cluster.uid",
          "type": "string",
          "brief": "A pseudo-ID for the cluster, set to the UID of the `kube-system` namespace.\n",
          "examples": [
            "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
          ],
          "requirement_level": "recommended",
          "note": "K8s doesn't have support for obtaining a cluster ID. If this is ever\nadded, we will recommend collecting the `k8s.cluster.uid` through the\nofficial APIs. In the meantime, we are able to use the `uid` of the\n`kube-system` namespace as a proxy for cluster ID. Read on for the\nrationale.\n\nEvery object created in a K8s cluster is assigned a distinct UID. The\n`kube-system` namespace is used by Kubernetes itself and will exist\nfor the lifetime of the cluster. Using the `uid` of the `kube-system`\nnamespace is a reasonable proxy for the K8s ClusterID as it will only\nchange if the cluster is rebuilt. Furthermore, Kubernetes UIDs are\nUUIDs as standardized by\n[ISO/IEC 9834-8 and ITU-T X.667](https://www.itu.int/ITU-T/studygroups/com17/oid.html).\nWhich states:\n\n> If generated according to one of the mechanisms defined in Rec.\n  ITU-T X.667 | ISO/IEC 9834-8, a UUID is either guaranteed to be\n  different from all other UUIDs generated before 3603 A.D., or is\n  extremely likely to be different (depending on the mechanism chosen).\n\nTherefore, UIDs between clusters should be extremely unlikely to\nconflict.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/k8s.yaml",
        "attributes": {
          "k8s.cluster.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.cluster.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "k8s.node",
      "type": "resource",
      "brief": "A Kubernetes Node object.\n",
      "prefix": "k8s.node",
      "attributes": [
        {
          "name": "k8s.node.name",
          "type": "string",
          "brief": "The name of the Node.\n",
          "examples": [
            "node-1"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.node.uid",
          "type": "string",
          "brief": "The UID of the Node.\n",
          "examples": [
            "1eb3a0c6-0477-4080-a9cb-0cb7db65c6a2"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/k8s.yaml",
        "attributes": {
          "k8s.node.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.node.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "k8s.namespace",
      "type": "resource",
      "brief": "A Kubernetes Namespace.\n",
      "prefix": "k8s.namespace",
      "attributes": [
        {
          "name": "k8s.namespace.name",
          "type": "string",
          "brief": "The name of the namespace that the pod is running in.\n",
          "examples": [
            "default"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/k8s.yaml",
        "attributes": {
          "k8s.namespace.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "k8s.pod",
      "type": "resource",
      "brief": "A Kubernetes Pod object.\n",
      "prefix": "k8s.pod",
      "attributes": [
        {
          "name": "k8s.pod.uid",
          "type": "string",
          "brief": "The UID of the Pod.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.pod.name",
          "type": "string",
          "brief": "The name of the Pod.\n",
          "examples": [
            "opentelemetry-pod-autoconf"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.pod.label",
          "type": "template[string]",
          "brief": "The label key-value pairs placed on the Pod, the `<key>` being the label name, the value being the label value.\n",
          "examples": [
            "k8s.pod.label.app=my-app",
            "k8s.pod.label.mycompany.io/arch=x64",
            "k8s.pod.label.data="
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.pod.annotation",
          "type": "template[string]",
          "brief": "The annotation key-value pairs placed on the Pod, the `<key>` being the annotation name, the value being the annotation value.\n",
          "examples": [
            "k8s.pod.annotation.kubernetes.io/enforce-mountable-secrets=true",
            "k8s.pod.annotation.mycompany.io/arch=x64",
            "k8s.pod.annotation.data="
          ],
          "requirement_level": "opt_in",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/k8s.yaml",
        "attributes": {
          "k8s.pod.annotation": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "k8s.pod.label": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.pod.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.pod.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "k8s.container",
      "type": "resource",
      "brief": "A container in a [PodTemplate](https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates).\n",
      "prefix": "k8s.container",
      "attributes": [
        {
          "name": "k8s.container.name",
          "type": "string",
          "brief": "The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (`container.name`).\n",
          "examples": [
            "redis"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.container.restart_count",
          "type": "int",
          "brief": "Number of times the container was restarted. This attribute can be used to identify a particular container (running or stopped) within a container spec.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.container.status.last_terminated_reason",
          "type": "string",
          "brief": "Last terminated reason of the Container.\n",
          "examples": [
            "Evicted",
            "Error"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/k8s.yaml",
        "attributes": {
          "k8s.container.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.container.restart_count": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.container.status.last_terminated_reason": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "k8s.replicaset",
      "type": "resource",
      "brief": "A Kubernetes ReplicaSet object.\n",
      "prefix": "k8s.replicaset",
      "attributes": [
        {
          "name": "k8s.replicaset.uid",
          "type": "string",
          "brief": "The UID of the ReplicaSet.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.replicaset.name",
          "type": "string",
          "brief": "The name of the ReplicaSet.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/k8s.yaml",
        "attributes": {
          "k8s.replicaset.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.replicaset.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "k8s.deployment",
      "type": "resource",
      "brief": "A Kubernetes Deployment object.\n",
      "prefix": "k8s.deployment",
      "attributes": [
        {
          "name": "k8s.deployment.uid",
          "type": "string",
          "brief": "The UID of the Deployment.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.deployment.name",
          "type": "string",
          "brief": "The name of the Deployment.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/k8s.yaml",
        "attributes": {
          "k8s.deployment.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.deployment.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "k8s.statefulset",
      "type": "resource",
      "brief": "A Kubernetes StatefulSet object.\n",
      "prefix": "k8s.statefulset",
      "attributes": [
        {
          "name": "k8s.statefulset.uid",
          "type": "string",
          "brief": "The UID of the StatefulSet.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.statefulset.name",
          "type": "string",
          "brief": "The name of the StatefulSet.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/k8s.yaml",
        "attributes": {
          "k8s.statefulset.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.statefulset.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "k8s.daemonset",
      "type": "resource",
      "brief": "A Kubernetes DaemonSet object.\n",
      "prefix": "k8s.daemonset",
      "attributes": [
        {
          "name": "k8s.daemonset.uid",
          "type": "string",
          "brief": "The UID of the DaemonSet.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.daemonset.name",
          "type": "string",
          "brief": "The name of the DaemonSet.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/k8s.yaml",
        "attributes": {
          "k8s.daemonset.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.daemonset.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "k8s.job",
      "type": "resource",
      "brief": "A Kubernetes Job object.\n",
      "prefix": "k8s.job",
      "attributes": [
        {
          "name": "k8s.job.uid",
          "type": "string",
          "brief": "The UID of the Job.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.job.name",
          "type": "string",
          "brief": "The name of the Job.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/k8s.yaml",
        "attributes": {
          "k8s.job.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.job.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "k8s.cronjob",
      "type": "resource",
      "brief": "A Kubernetes CronJob object.\n",
      "prefix": "k8s.cronjob",
      "attributes": [
        {
          "name": "k8s.cronjob.uid",
          "type": "string",
          "brief": "The UID of the CronJob.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.cronjob.name",
          "type": "string",
          "brief": "The name of the CronJob.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/k8s.yaml",
        "attributes": {
          "k8s.cronjob.name": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "k8s.cronjob.uid": {
            "source_group": "registry.k8s",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "aws.ecs",
      "type": "resource",
      "brief": "Resources used by AWS Elastic Container Service (ECS).\n",
      "attributes": [
        {
          "name": "aws.ecs.container.arn",
          "type": "string",
          "brief": "The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n",
          "examples": [
            "arn:aws:ecs:us-west-1:123456789123:container/32624152-9086-4f0e-acae-1a75b14fe4d9"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.ecs.cluster.arn",
          "type": "string",
          "brief": "The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n",
          "examples": [
            "arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.ecs.launchtype",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ec2",
                "value": "ec2",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "fargate",
                "value": "fargate",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.ecs.task.arn",
          "type": "string",
          "brief": "The ARN of a running [ECS task](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids).\n",
          "examples": [
            "arn:aws:ecs:us-west-1:123456789123:task/10838bed-421f-43ef-870a-f43feacbbb5b",
            "arn:aws:ecs:us-west-1:123456789123:task/my-cluster/task-id/23ebb8ac-c18f-46c6-8bbe-d55d0e37cfbd"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.ecs.task.family",
          "type": "string",
          "brief": "The family name of the [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html) used to create the ECS task.\n",
          "examples": [
            "opentelemetry-family"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.ecs.task.id",
          "type": "string",
          "brief": "The ID of a running ECS task. The ID MUST be extracted from `task.arn`.\n",
          "examples": [
            "10838bed-421f-43ef-870a-f43feacbbb5b",
            "23ebb8ac-c18f-46c6-8bbe-d55d0e37cfbd"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if `task.arn` is populated."
          },
          "stability": "experimental"
        },
        {
          "name": "aws.ecs.task.revision",
          "type": "string",
          "brief": "The revision for the task definition used to create the ECS task.\n",
          "examples": [
            "8",
            "26"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/cloud_provider/aws/ecs.yaml",
        "attributes": {
          "aws.ecs.cluster.arn": {
            "source_group": "registry.aws.ecs",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.ecs.container.arn": {
            "source_group": "registry.aws.ecs",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.ecs.launchtype": {
            "source_group": "registry.aws.ecs",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.ecs.task.arn": {
            "source_group": "registry.aws.ecs",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.ecs.task.family": {
            "source_group": "registry.aws.ecs",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.ecs.task.id": {
            "source_group": "registry.aws.ecs",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "aws.ecs.task.revision": {
            "source_group": "registry.aws.ecs",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.os",
      "type": "attribute_group",
      "brief": "The operating system (OS) on which the process represented by this resource is running.\n",
      "note": "In case of virtualized environments, this is the operating system as it is observed by the process, i.e., the virtualized guest rather than the underlying host.\n",
      "prefix": "os",
      "attributes": [
        {
          "name": "os.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "windows",
                "value": "windows",
                "brief": "Microsoft Windows",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "linux",
                "value": "linux",
                "brief": "Linux",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "darwin",
                "value": "darwin",
                "brief": "Apple Darwin",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "freebsd",
                "value": "freebsd",
                "brief": "FreeBSD",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "netbsd",
                "value": "netbsd",
                "brief": "NetBSD",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "openbsd",
                "value": "openbsd",
                "brief": "OpenBSD",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dragonflybsd",
                "value": "dragonflybsd",
                "brief": "DragonFly BSD",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hpux",
                "value": "hpux",
                "brief": "HP-UX (Hewlett Packard Unix)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aix",
                "value": "aix",
                "brief": "AIX (Advanced Interactive eXecutive)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "solaris",
                "value": "solaris",
                "brief": "SunOS, Oracle Solaris",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "z_os",
                "value": "z_os",
                "brief": "IBM z/OS",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The operating system type.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "os.description",
          "type": "string",
          "brief": "Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n",
          "examples": [
            "Microsoft Windows [Version 10.0.18363.778]",
            "Ubuntu 18.04.1 LTS"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "os.name",
          "type": "string",
          "brief": "Human readable operating system name.",
          "examples": [
            "iOS",
            "Android",
            "Ubuntu"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "os.version",
          "type": "string",
          "brief": "The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).\n",
          "examples": [
            "14.2.1",
            "18.04.1"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "os.build_id",
          "type": "string",
          "brief": "Unique identifier for a particular build or compilation of the operating system.",
          "examples": [
            "TQ3C.230805.001.B2",
            "20E247",
            "22621"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/os.yaml"
      }
    },
    {
      "id": "registry.messaging.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated messaging attributes.",
      "attributes": [
        {
          "name": "messaging.kafka.destination.partition",
          "type": "int",
          "brief": "Deprecated, use `messaging.destination.partition.id` instead.\n",
          "examples": 2,
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `messaging.destination.partition.id`."
        },
        {
          "name": "messaging.operation",
          "type": "string",
          "brief": "Deprecated, use `messaging.operation.type` instead.\n",
          "examples": [
            "publish",
            "create",
            "process"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `messaging.operation.type`."
        },
        {
          "name": "messaging.client_id",
          "type": "string",
          "brief": "Deprecated, use `messaging.client.id` instead.\n",
          "examples": [
            "client-5",
            "myhost@8742@s8083jm"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `messaging.client.id`."
        },
        {
          "name": "messaging.kafka.consumer.group",
          "type": "string",
          "brief": "Deprecated, use `messaging.consumer.group.name` instead.\n",
          "examples": "my-group",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `messaging.consumer.group.name`.\n"
        },
        {
          "name": "messaging.rocketmq.client_group",
          "type": "string",
          "brief": "Deprecated, use `messaging.consumer.group.name` instead.\n",
          "examples": "myConsumerGroup",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `messaging.consumer.group.name` on the consumer spans. No replacement for producer spans.\n"
        },
        {
          "name": "messaging.eventhubs.consumer.group",
          "type": "string",
          "brief": "Deprecated, use `messaging.consumer.group.name` instead.\n",
          "examples": "$Default",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `messaging.consumer.group.name`.\n"
        },
        {
          "name": "messaging.servicebus.destination.subscription_name",
          "type": "string",
          "brief": "Deprecated, use `messaging.servicebus.destination.subscription_name` instead.\n",
          "examples": "subscription-a",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `messaging.servicebus.destination.subscription_name`.\n"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deprecated/messaging.yaml"
      }
    },
    {
      "id": "registry.session",
      "type": "attribute_group",
      "brief": "Session is defined as the period of time encompassing all activities performed by the application and the actions executed by the end user.\nConsequently, a Session is represented as a collection of Logs, Events, and Spans emitted by the Client Application throughout the Session's duration. Each Session is assigned a unique identifier, which is included as an attribute in the Logs, Events, and Spans generated during the Session's lifecycle.\nWhen a session reaches end of life, typically due to user inactivity or session timeout, a new session identifier will be assigned. The previous session identifier may be provided by the instrumentation so that telemetry backends can link the two sessions.\n",
      "prefix": "session",
      "attributes": [
        {
          "name": "session.id",
          "type": "string",
          "brief": "A unique id to identify a session.",
          "examples": "00112233-4455-6677-8899-aabbccddeeff",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "session.previous_id",
          "type": "string",
          "brief": "The previous `session.id` for this user, when known.",
          "examples": "00112233-4455-6677-8899-aabbccddeeff",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/session.yaml"
      }
    },
    {
      "id": "registry.process",
      "type": "attribute_group",
      "brief": "An operating system process.\n",
      "prefix": "process",
      "attributes": [
        {
          "name": "process.pid",
          "type": "int",
          "brief": "Process identifier (PID).\n",
          "examples": [
            1234
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.parent_pid",
          "type": "int",
          "brief": "Parent Process identifier (PPID).\n",
          "examples": [
            111
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.vpid",
          "type": "int",
          "brief": "Virtual process identifier.\n",
          "examples": [
            12
          ],
          "requirement_level": "recommended",
          "note": "The process ID within a PID namespace. This is not necessarily unique across all processes on the host but it is unique within the process namespace that the process exists within.\n",
          "stability": "experimental"
        },
        {
          "name": "process.session_leader.pid",
          "type": "int",
          "brief": "The PID of the process's session leader. This is also the session ID (SID) of the process.\n",
          "examples": [
            14
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.group_leader.pid",
          "type": "int",
          "brief": "The PID of the process's group leader. This is also the process group ID (PGID) of the process.\n",
          "examples": [
            23
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.executable.name",
          "type": "string",
          "brief": "The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n",
          "examples": [
            "otelcol"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.executable.path",
          "type": "string",
          "brief": "The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n",
          "examples": [
            "/usr/bin/cmd/otelcol"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.command",
          "type": "string",
          "brief": "The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n",
          "examples": [
            "cmd/otelcol"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.command_line",
          "type": "string",
          "brief": "The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n",
          "examples": [
            "C:\\cmd\\otecol --config=\"my directory\\config.yaml\""
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.command_args",
          "type": "string[]",
          "brief": "All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n",
          "examples": [
            "cmd/otecol",
            "--config=config.yaml"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.owner",
          "type": "string",
          "brief": "The username of the user that owns the process.\n",
          "examples": [
            "root"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.user.id",
          "type": "int",
          "brief": "The effective user ID (EUID) of the process.\n",
          "examples": [
            1001
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.user.name",
          "type": "string",
          "brief": "The username of the effective user of the process.\n",
          "examples": [
            "root"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.real_user.id",
          "type": "int",
          "brief": "The real user ID (RUID) of the process.\n",
          "examples": [
            1000
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.real_user.name",
          "type": "string",
          "brief": "The username of the real user of the process.\n",
          "examples": [
            "operator"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.saved_user.id",
          "type": "int",
          "brief": "The saved user ID (SUID) of the process.\n",
          "examples": [
            1002
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.saved_user.name",
          "type": "string",
          "brief": "The username of the saved user.\n",
          "examples": [
            "operator"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.runtime.name",
          "type": "string",
          "brief": "The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n",
          "examples": [
            "OpenJDK Runtime Environment"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.runtime.version",
          "type": "string",
          "brief": "The version of the runtime of this process, as returned by the runtime without modification.\n",
          "examples": "14.0.2",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.runtime.description",
          "type": "string",
          "brief": "An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n",
          "examples": "Eclipse OpenJ9 Eclipse OpenJ9 VM openj9-0.21.0",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.creation.time",
          "type": "string",
          "brief": "The date and time the process was created, in ISO 8601 format.\n",
          "examples": [
            "2023-11-21T09:25:34.853Z"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.exit.time",
          "type": "string",
          "brief": "The date and time the process exited, in ISO 8601 format.\n",
          "examples": [
            "2023-11-21T09:26:12.315Z"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.exit.code",
          "type": "int",
          "brief": "The exit code of the process.\n",
          "examples": [
            127
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.interactive",
          "type": "boolean",
          "brief": "Whether the process is connected to an interactive shell.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.context_switch_type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "voluntary",
                "value": "voluntary",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "involuntary",
                "value": "involuntary",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Specifies whether the context switches for this data point were voluntary or involuntary.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "process.paging.fault_type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "major",
                "value": "major",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "minor",
                "value": "minor",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of page fault for this data point. Type `major` is for major/hard page faults, and `minor` is for minor/soft page faults.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/process.yaml"
      }
    },
    {
      "id": "gcp.client.attributes",
      "type": "attribute_group",
      "brief": "Conventions for official Google Cloud client libraries.",
      "prefix": "gcp.client",
      "stability": "experimental",
      "attributes": [
        {
          "name": "gcp.client.service",
          "type": "string",
          "brief": "Identifies the Google Cloud service for which the official client library is intended.",
          "examples": [
            "appengine",
            "run",
            "firestore",
            "alloydb",
            "spanner"
          ],
          "requirement_level": {
            "conditionally_required": "Required if and only if the instrumentation library is an official, Google-provided GCP and/or Firebase client library."
          },
          "note": "Intended to be a stable identifier for Google Cloud client libraries that is uniform across implementation languages. The value should be derived from the canonical service domain for the service; for example, 'foo.googleapis.com' should result in a value of 'foo'.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/gcp-client.yml",
        "attributes": {
          "gcp.client.service": {
            "source_group": "registry.gcp.client",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "device.app.lifecycle",
      "type": "event",
      "brief": "This event represents an occurrence of a lifecycle transition on Android or iOS platform.\n",
      "note": "This event identifies the fields that are common to all lifecycle events for android and iOS using the `android.state` and `ios.state` fields. The `android.state` and `ios.state` attributes are mutually exclusive.\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "device.app.lifecycle",
      "lineage": {
        "source_file": "../semantic-conventions/model/logs/mobile-events.yaml"
      }
    },
    {
      "id": "metric.db.client.connections.count.deprecated",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.count` instead.",
      "stability": "experimental",
      "deprecated": "Replaced by `db.client.connection.count`.",
      "attributes": [
        {
          "name": "db.client.connections.state",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `db.client.connection.state` instead.",
          "examples": [
            "idle"
          ],
          "requirement_level": "required",
          "stability": "experimental",
          "deprecated": "Replaced by `db.client.connection.state`."
        },
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental",
          "deprecated": "Replaced by `db.client.connection.pool.name`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.usage",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/deprecated/database.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.client.connections.state": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.idle.max.deprecated",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.idle.max` instead.",
      "stability": "experimental",
      "deprecated": "Replaced by `db.client.connection.idle.max`.",
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental",
          "deprecated": "Replaced by `db.client.connection.pool.name`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.idle.max",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/deprecated/database.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.idle.min.deprecated",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.idle.min` instead.",
      "stability": "experimental",
      "deprecated": "Replaced by `db.client.connection.idle.min`.",
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental",
          "deprecated": "Replaced by `db.client.connection.pool.name`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.idle.min",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/deprecated/database.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.max.deprecated",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.max` instead.",
      "stability": "experimental",
      "deprecated": "Replaced by `db.client.connection.max`.",
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental",
          "deprecated": "Replaced by `db.client.connection.pool.name`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.max",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/deprecated/database.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.pending_requests.deprecated",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.pending_requests` instead.",
      "stability": "experimental",
      "deprecated": "Replaced by `db.client.connection.pending_requests`.",
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental",
          "deprecated": "Replaced by `db.client.connection.pool.name`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.pending_requests",
      "instrument": "updowncounter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/deprecated/database.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.timeouts.deprecated",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.timeouts` instead.",
      "stability": "experimental",
      "deprecated": "Replaced by `db.client.connection.timeouts`.",
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental",
          "deprecated": "Replaced by `db.client.connection.pool.name`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.timeouts",
      "instrument": "counter",
      "unit": "{timeout}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/deprecated/database.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.create_time.deprecated",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.create_time` instead. Note: the unit also changed from `ms` to `s`.",
      "stability": "experimental",
      "deprecated": "Replaced by `db.client.connection.create_time`. Note: the unit also changed from `ms` to `s`.",
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental",
          "deprecated": "Replaced by `db.client.connection.pool.name`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.create_time",
      "instrument": "histogram",
      "unit": "ms",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/deprecated/database.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.wait_time.deprecated",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.wait_time` instead. Note: the unit also changed from `ms` to `s`.",
      "stability": "experimental",
      "deprecated": "Replaced by `db.client.connection.wait_time`. Note: the unit also changed from `ms` to `s`.",
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental",
          "deprecated": "Replaced by `db.client.connection.pool.name`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.wait_time",
      "instrument": "histogram",
      "unit": "ms",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/deprecated/database.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connections.use_time.deprecated",
      "type": "metric",
      "brief": "Deprecated, use `db.client.connection.use_time` instead. Note: the unit also changed from `ms` to `s`.",
      "stability": "experimental",
      "deprecated": "Replaced by `db.client.connection.use_time`. Note: the unit also changed from `ms` to `s`.",
      "attributes": [
        {
          "name": "db.client.connections.pool.name",
          "type": "string",
          "brief": "Deprecated, use `db.client.connection.pool.name` instead.",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental",
          "deprecated": "Replaced by `db.client.connection.pool.name`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connections.use_time",
      "instrument": "histogram",
      "unit": "ms",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/deprecated/database.yaml",
        "attributes": {
          "db.client.connections.pool.name": {
            "source_group": "registry.db.metrics.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.jvm.memory",
      "type": "attribute_group",
      "brief": "Describes JVM memory metric attributes.",
      "prefix": "jvm.memory",
      "attributes": [
        {
          "name": "jvm.memory.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "heap",
                "value": "heap",
                "brief": "Heap memory.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "non_heap",
                "value": "non_heap",
                "brief": "Non-heap memory",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.pool.name",
          "type": "string",
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics.yaml",
        "attributes": {
          "jvm.memory.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "jvm.memory.type": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.memory.used",
      "type": "metric",
      "brief": "Measure of memory used.",
      "stability": "stable",
      "attributes": [
        {
          "name": "jvm.memory.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "heap",
                "value": "heap",
                "brief": "Heap memory.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "non_heap",
                "value": "non_heap",
                "brief": "Non-heap memory",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.pool.name",
          "type": "string",
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.memory.used",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics.yaml",
        "attributes": {
          "jvm.memory.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "jvm.memory.type": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.memory.committed",
      "type": "metric",
      "brief": "Measure of memory committed.",
      "stability": "stable",
      "attributes": [
        {
          "name": "jvm.memory.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "heap",
                "value": "heap",
                "brief": "Heap memory.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "non_heap",
                "value": "non_heap",
                "brief": "Non-heap memory",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.pool.name",
          "type": "string",
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.memory.committed",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics.yaml",
        "attributes": {
          "jvm.memory.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "jvm.memory.type": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.memory.limit",
      "type": "metric",
      "brief": "Measure of max obtainable memory.",
      "stability": "stable",
      "attributes": [
        {
          "name": "jvm.memory.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "heap",
                "value": "heap",
                "brief": "Heap memory.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "non_heap",
                "value": "non_heap",
                "brief": "Non-heap memory",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.pool.name",
          "type": "string",
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.memory.limit",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics.yaml",
        "attributes": {
          "jvm.memory.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "jvm.memory.type": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.memory.used_after_last_gc",
      "type": "metric",
      "brief": "Measure of memory used, as measured after the most recent garbage collection event on this pool.",
      "stability": "stable",
      "attributes": [
        {
          "name": "jvm.memory.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "heap",
                "value": "heap",
                "brief": "Heap memory.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "non_heap",
                "value": "non_heap",
                "brief": "Non-heap memory",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.pool.name",
          "type": "string",
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.memory.used_after_last_gc",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics.yaml",
        "attributes": {
          "jvm.memory.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "jvm.memory.type": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.gc.duration",
      "type": "metric",
      "brief": "Duration of JVM garbage collection actions.",
      "prefix": "jvm.gc",
      "stability": "stable",
      "attributes": [
        {
          "name": "jvm.gc.action",
          "type": "string",
          "brief": "Name of the garbage collector action.",
          "examples": [
            "end of minor GC",
            "end of major GC"
          ],
          "requirement_level": "recommended",
          "note": "Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).\n",
          "stability": "stable"
        },
        {
          "name": "jvm.gc.name",
          "type": "string",
          "brief": "Name of the garbage collector.",
          "examples": [
            "G1 Young Generation",
            "G1 Old Generation"
          ],
          "requirement_level": "recommended",
          "note": "Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.gc.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics.yaml",
        "attributes": {
          "jvm.gc.action": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "jvm.gc.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.thread.count",
      "type": "metric",
      "brief": "Number of executing platform threads.",
      "stability": "stable",
      "attributes": [
        {
          "name": "jvm.thread.daemon",
          "type": "boolean",
          "brief": "Whether the thread is daemon or not.",
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.thread.state",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "new",
                "value": "new",
                "brief": "A thread that has not yet started is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "runnable",
                "value": "runnable",
                "brief": "A thread executing in the Java virtual machine is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "blocked",
                "value": "blocked",
                "brief": "A thread that is blocked waiting for a monitor lock is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "waiting",
                "value": "waiting",
                "brief": "A thread that is waiting indefinitely for another thread to perform a particular action is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "timed_waiting",
                "value": "timed_waiting",
                "brief": "A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "terminated",
                "value": "terminated",
                "brief": "A thread that has exited is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "State of the thread.",
          "examples": [
            "runnable",
            "blocked"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.thread.count",
      "instrument": "updowncounter",
      "unit": "{thread}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics.yaml",
        "attributes": {
          "jvm.thread.daemon": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "jvm.thread.state": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.class.loaded",
      "type": "metric",
      "brief": "Number of classes loaded since JVM start.",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.class.loaded",
      "instrument": "counter",
      "unit": "{class}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics.yaml"
      }
    },
    {
      "id": "metric.jvm.class.unloaded",
      "type": "metric",
      "brief": "Number of classes unloaded since JVM start.",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.class.unloaded",
      "instrument": "counter",
      "unit": "{class}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics.yaml"
      }
    },
    {
      "id": "metric.jvm.class.count",
      "type": "metric",
      "brief": "Number of classes currently loaded.",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.class.count",
      "instrument": "updowncounter",
      "unit": "{class}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics.yaml"
      }
    },
    {
      "id": "metric.jvm.cpu.count",
      "type": "metric",
      "brief": "Number of processors available to the Java virtual machine.",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.cpu.count",
      "instrument": "updowncounter",
      "unit": "{cpu}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics.yaml"
      }
    },
    {
      "id": "metric.jvm.cpu.time",
      "type": "metric",
      "brief": "CPU time used by the process as reported by the JVM.",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.cpu.time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics.yaml"
      }
    },
    {
      "id": "metric.jvm.cpu.recent_utilization",
      "type": "metric",
      "brief": "Recent CPU utilization for the process as reported by the JVM.",
      "note": "The value range is [0.0,1.0]. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getProcessCpuLoad()).\n",
      "stability": "stable",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.cpu.recent_utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics.yaml"
      }
    },
    {
      "id": "aws.eks",
      "type": "resource",
      "brief": "Resources used by AWS Elastic Kubernetes Service (EKS).\n",
      "attributes": [
        {
          "name": "aws.eks.cluster.arn",
          "type": "string",
          "brief": "The ARN of an EKS cluster.\n",
          "examples": [
            "arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/cloud_provider/aws/eks.yaml",
        "attributes": {
          "aws.eks.cluster.arn": {
            "source_group": "registry.aws.eks",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.telemetry",
      "type": "attribute_group",
      "brief": "This document defines attributes for telemetry SDK.\n",
      "prefix": "telemetry",
      "attributes": [
        {
          "name": "telemetry.sdk.name",
          "type": "string",
          "brief": "The name of the telemetry SDK as defined above.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "required",
          "note": "The OpenTelemetry SDK MUST set the `telemetry.sdk.name` attribute to `opentelemetry`.\nIf another SDK, like a fork or a vendor-provided implementation, is used, this SDK MUST set the\n`telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point\nor another suitable identifier depending on the language.\nThe identifier `opentelemetry` is reserved and MUST NOT be used in this case.\nAll custom identifiers SHOULD be stable across different versions of an implementation.\n",
          "stability": "stable"
        },
        {
          "name": "telemetry.sdk.language",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "cpp",
                "value": "cpp",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "dotnet",
                "value": "dotnet",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "erlang",
                "value": "erlang",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "go",
                "value": "go",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "java",
                "value": "java",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "nodejs",
                "value": "nodejs",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "php",
                "value": "php",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "python",
                "value": "python",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ruby",
                "value": "ruby",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "rust",
                "value": "rust",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "swift",
                "value": "swift",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "webjs",
                "value": "webjs",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The language of the telemetry SDK.\n",
          "requirement_level": "required",
          "stability": "stable"
        },
        {
          "name": "telemetry.sdk.version",
          "type": "string",
          "brief": "The version string of the telemetry SDK.\n",
          "examples": [
            "1.2.3"
          ],
          "requirement_level": "required",
          "stability": "stable"
        },
        {
          "name": "telemetry.distro.name",
          "type": "string",
          "brief": "The name of the auto instrumentation agent or distribution, if used.\n",
          "examples": [
            "parts-unlimited-java"
          ],
          "requirement_level": "recommended",
          "note": "Official auto instrumentation agents and distributions SHOULD set the `telemetry.distro.name` attribute to\na string starting with `opentelemetry-`, e.g. `opentelemetry-java-instrumentation`.\n",
          "stability": "experimental"
        },
        {
          "name": "telemetry.distro.version",
          "type": "string",
          "brief": "The version string of the auto instrumentation agent or distribution, if used.\n",
          "examples": [
            "1.2.3"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/telemetry.yaml"
      }
    },
    {
      "id": "registry.enduser.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated enduser attributes. Complete enduser namespace has been deprecated",
      "prefix": "enduser",
      "attributes": [
        {
          "name": "enduser.id",
          "type": "string",
          "brief": "Deprecated, use `user.id` instead.",
          "examples": "username",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `user.id` attribute."
        },
        {
          "name": "enduser.role",
          "type": "string",
          "brief": "Deprecated, use `user.roles` instead.",
          "examples": "admin",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `user.roles` attribute."
        },
        {
          "name": "enduser.scope",
          "type": "string",
          "brief": "Deprecated, no replacement at this time.",
          "examples": "read:message, write:files",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Removed."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deprecated/enduser.yaml"
      }
    },
    {
      "id": "registry.http.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated HTTP attributes.",
      "prefix": "http",
      "attributes": [
        {
          "name": "http.method",
          "type": "string",
          "brief": "Deprecated, use `http.request.method` instead.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `http.request.method`."
        },
        {
          "name": "http.status_code",
          "type": "int",
          "brief": "Deprecated, use `http.response.status_code` instead.",
          "examples": [
            200
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `http.response.status_code`."
        },
        {
          "name": "http.scheme",
          "type": "string",
          "brief": "Deprecated, use `url.scheme` instead.",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `url.scheme` instead."
        },
        {
          "name": "http.url",
          "type": "string",
          "brief": "Deprecated, use `url.full` instead.",
          "examples": [
            "https://www.foo.bar/search?q=OpenTelemetry#SemConv"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `url.full`."
        },
        {
          "name": "http.target",
          "type": "string",
          "brief": "Deprecated, use `url.path` and `url.query` instead.",
          "examples": [
            "/search?q=OpenTelemetry#SemConv"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Split to `url.path` and `url.query."
        },
        {
          "name": "http.request_content_length",
          "type": "int",
          "brief": "Deprecated, use `http.request.header.content-length` instead.",
          "examples": 3495,
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `http.request.header.content-length`."
        },
        {
          "name": "http.response_content_length",
          "type": "int",
          "brief": "Deprecated, use `http.response.header.content-length` instead.",
          "examples": 3495,
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `http.response.header.content-length`."
        },
        {
          "name": "http.client_ip",
          "type": "string",
          "brief": "Deprecated, use `client.address` instead.",
          "examples": "83.164.160.102",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `client.address`."
        },
        {
          "name": "http.host",
          "type": "string",
          "brief": "Deprecated, use one of `server.address`, `client.address` or `http.request.header.host` instead, depending on the usage.",
          "examples": [
            "www.example.org"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by one of `server.address`, `client.address` or `http.request.header.host`, depending on the usage."
        },
        {
          "name": "http.request_content_length_uncompressed",
          "type": "int",
          "brief": "Deprecated, use `http.request.body.size` instead.",
          "examples": 5493,
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `http.request.body.size`."
        },
        {
          "name": "http.response_content_length_uncompressed",
          "type": "int",
          "brief": "Deprecated, use `http.response.body.size` instead.",
          "examples": 5493,
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replace by `http.response.body.size`."
        },
        {
          "name": "http.server_name",
          "type": "string",
          "brief": "Deprecated, use `server.address` instead.",
          "examples": [
            "example.com"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `server.address`."
        },
        {
          "name": "http.flavor",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "http_1_0",
                "value": "1.0",
                "brief": "HTTP/1.0",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http_1_1",
                "value": "1.1",
                "brief": "HTTP/1.1",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http_2_0",
                "value": "2.0",
                "brief": "HTTP/2",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http_3_0",
                "value": "3.0",
                "brief": "HTTP/3",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "spdy",
                "value": "SPDY",
                "brief": "SPDY protocol.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "quic",
                "value": "QUIC",
                "brief": "QUIC protocol.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `network.protocol.name` instead.",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `network.protocol.name`."
        },
        {
          "name": "http.user_agent",
          "type": "string",
          "brief": "Deprecated, use `user_agent.original` instead.",
          "examples": [
            "CERN-LineMode/2.15 libwww/2.17b3",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `user_agent.original`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deprecated/http.yaml"
      }
    },
    {
      "id": "registry.code",
      "type": "attribute_group",
      "brief": "These attributes allow to report this unit of code and therefore to provide more context about the span.\n",
      "prefix": "code",
      "attributes": [
        {
          "name": "code.function",
          "type": "string",
          "brief": "The method or function name, or equivalent (usually rightmost part of the code unit's name).\n",
          "examples": "serveRequest",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "code.namespace",
          "type": "string",
          "brief": "The \"namespace\" within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n",
          "examples": "com.example.MyHttpService",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "code.filepath",
          "type": "string",
          "brief": "The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n",
          "examples": "/usr/local/MyApplication/content_root/app/index.php",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "code.lineno",
          "type": "int",
          "brief": "The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n",
          "examples": 42,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "code.column",
          "type": "int",
          "brief": "The column number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n",
          "examples": 16,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "code.stacktrace",
          "type": "string",
          "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n",
          "examples": "at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/code.yaml"
      }
    },
    {
      "id": "rpc",
      "type": "span",
      "brief": "This document defines semantic conventions for remote procedure calls.",
      "prefix": "rpc",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "RPC server [host name](https://grpc.github.io/grpc/core/md_doc_naming.html).\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "May contain server IP address, DNS name, or local socket name. When host component is an IP address, instrumentations SHOULD NOT do a reverse proxy lookup to obtain DNS name and SHOULD set `server.address` to the IP address provided in the host component.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "if the port is supported by the network transport used for communication."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the (logical) method being called, must be equal to the $method part in the span name.",
          "examples": "exampleMethod",
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The full (logical) name of the service being called, including its package name, if applicable.",
          "examples": "myservice.EchoService",
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "A string identifying the remoting system. See below for a list of well-known identifiers.",
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [
        "rpc.message"
      ],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/rpc.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "rpc.client",
      "type": "span",
      "brief": "This document defines semantic conventions for remote procedure call client spans.",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "RPC server [host name](https://grpc.github.io/grpc/core/md_doc_naming.html).\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "May contain server IP address, DNS name, or local socket name. When host component is an IP address, instrumentations SHOULD NOT do a reverse proxy lookup to obtain DNS name and SHOULD set `server.address` to the IP address provided in the host component.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "if the port is supported by the network transport used for communication."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the (logical) method being called, must be equal to the $method part in the span name.",
          "examples": "exampleMethod",
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The full (logical) name of the service being called, including its package name, if applicable.",
          "examples": "myservice.EchoService",
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "A string identifying the remoting system. See below for a list of well-known identifiers.",
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "If `network.peer.address` is set."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/rpc.yaml",
        "attributes": {
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "rpc.server",
      "type": "span",
      "brief": "Semantic Convention for RPC server spans",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "RPC server [host name](https://grpc.github.io/grpc/core/md_doc_naming.html).\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "May contain server IP address, DNS name, or local socket name. When host component is an IP address, instrumentations SHOULD NOT do a reverse proxy lookup to obtain DNS name and SHOULD set `server.address` to the IP address provided in the host component.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "if the port is supported by the network transport used for communication."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the (logical) method being called, must be equal to the $method part in the span name.",
          "examples": "exampleMethod",
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The full (logical) name of the service being called, including its package name, if applicable.",
          "examples": "myservice.EchoService",
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "A string identifying the remoting system. See below for a list of well-known identifiers.",
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "client.address",
          "type": "string",
          "brief": "Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "client.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.address` SHOULD represent the client address behind any intermediaries,  for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "client.port",
          "type": "int",
          "brief": "Client port number.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries,  for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "If `network.peer.address` is set."
          },
          "stability": "stable"
        }
      ],
      "span_kind": "server",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/rpc.yaml",
        "attributes": {
          "client.address": {
            "source_group": "registry.client",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "client.port": {
            "source_group": "registry.client",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "rpc.grpc",
      "type": "span",
      "brief": "Tech-specific attributes for gRPC.",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "RPC server [host name](https://grpc.github.io/grpc/core/md_doc_naming.html).\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "May contain server IP address, DNS name, or local socket name. When host component is an IP address, instrumentations SHOULD NOT do a reverse proxy lookup to obtain DNS name and SHOULD set `server.address` to the IP address provided in the host component.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "if the port is supported by the network transport used for communication."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the (logical) method being called, must be equal to the $method part in the span name.",
          "examples": "exampleMethod",
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The full (logical) name of the service being called, including its package name, if applicable.",
          "examples": "myservice.EchoService",
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "A string identifying the remoting system. See below for a list of well-known identifiers.",
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "rpc.grpc.request.metadata",
          "type": "template[string[]]",
          "brief": "gRPC request metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.grpc.request.metadata.my-custom-metadata-attribute=[\"1.2.3.4\", \"1.2.3.5\"]"
          ],
          "tag": "grpc-tech-specific",
          "requirement_level": "opt_in",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.grpc.response.metadata",
          "type": "template[string[]]",
          "brief": "gRPC response metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.grpc.response.metadata.my-custom-metadata-attribute=[\"attribute_value\"]"
          ],
          "tag": "grpc-tech-specific",
          "requirement_level": "opt_in",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.grpc.status_code",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ok",
                "value": 0,
                "brief": "OK",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cancelled",
                "value": 1,
                "brief": "CANCELLED",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unknown",
                "value": 2,
                "brief": "UNKNOWN",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "invalid_argument",
                "value": 3,
                "brief": "INVALID_ARGUMENT",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "deadline_exceeded",
                "value": 4,
                "brief": "DEADLINE_EXCEEDED",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "not_found",
                "value": 5,
                "brief": "NOT_FOUND",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "already_exists",
                "value": 6,
                "brief": "ALREADY_EXISTS",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "permission_denied",
                "value": 7,
                "brief": "PERMISSION_DENIED",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "resource_exhausted",
                "value": 8,
                "brief": "RESOURCE_EXHAUSTED",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "failed_precondition",
                "value": 9,
                "brief": "FAILED_PRECONDITION",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aborted",
                "value": 10,
                "brief": "ABORTED",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "out_of_range",
                "value": 11,
                "brief": "OUT_OF_RANGE",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unimplemented",
                "value": 12,
                "brief": "UNIMPLEMENTED",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "internal",
                "value": 13,
                "brief": "INTERNAL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unavailable",
                "value": 14,
                "brief": "UNAVAILABLE",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "data_loss",
                "value": 15,
                "brief": "DATA_LOSS",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unauthenticated",
                "value": 16,
                "brief": "UNAUTHENTICATED",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.",
          "tag": "grpc-tech-specific",
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/rpc.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.grpc.request.metadata": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "tag"
            ]
          },
          "rpc.grpc.response.metadata": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "tag"
            ]
          },
          "rpc.grpc.status_code": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "tag"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "rpc.jsonrpc",
      "type": "span",
      "brief": "Tech-specific attributes for [JSON RPC](https://www.jsonrpc.org/).",
      "prefix": "rpc.jsonrpc",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "RPC server [host name](https://grpc.github.io/grpc/core/md_doc_naming.html).\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "May contain server IP address, DNS name, or local socket name. When host component is an IP address, instrumentations SHOULD NOT do a reverse proxy lookup to obtain DNS name and SHOULD set `server.address` to the IP address provided in the host component.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "if the port is supported by the network transport used for communication."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The full (logical) name of the service being called, including its package name, if applicable.",
          "examples": "myservice.EchoService",
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "A string identifying the remoting system. See below for a list of well-known identifiers.",
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "rpc.jsonrpc.error_code",
          "type": "int",
          "brief": "`error.code` property of response if it is an error response.",
          "examples": [
            -32700,
            100
          ],
          "tag": "jsonrpc-tech-specific",
          "requirement_level": {
            "conditionally_required": "If response is not successful."
          },
          "stability": "experimental"
        },
        {
          "name": "rpc.jsonrpc.error_message",
          "type": "string",
          "brief": "`error.message` property of response if it is an error response.",
          "examples": [
            "Parse error",
            "User already exists"
          ],
          "tag": "jsonrpc-tech-specific",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "rpc.jsonrpc.request_id",
          "type": "string",
          "brief": "`id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n",
          "examples": [
            "10",
            "request-7",
            ""
          ],
          "tag": "jsonrpc-tech-specific",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "rpc.jsonrpc.version",
          "type": "string",
          "brief": "Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 doesn't specify this, the value can be omitted.",
          "examples": [
            "2.0",
            "1.0"
          ],
          "tag": "jsonrpc-tech-specific",
          "requirement_level": {
            "conditionally_required": "If other than the default version (`1.0`)"
          },
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the (logical) method being called, must be equal to the $method part in the span name.",
          "examples": "exampleMethod",
          "tag": "jsonrpc-tech-specific",
          "requirement_level": "required",
          "note": "This is always required for jsonrpc. See the note in the general RPC conventions for more information.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/rpc.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.jsonrpc.error_code": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "tag"
            ]
          },
          "rpc.jsonrpc.error_message": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "tag"
            ]
          },
          "rpc.jsonrpc.request_id": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "tag"
            ]
          },
          "rpc.jsonrpc.version": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "tag"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level",
              "tag"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "rpc.message",
      "type": "event",
      "brief": "RPC received/sent message.",
      "prefix": "rpc.message",
      "attributes": [
        {
          "name": "rpc.message.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "sent",
                "value": "SENT",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "received",
                "value": "RECEIVED",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Whether this is a received or sent message.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "rpc.message.id",
          "type": "int",
          "brief": "MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.",
          "requirement_level": "recommended",
          "note": "This way we guarantee that the values will be consistent between different implementations.",
          "stability": "experimental"
        },
        {
          "name": "rpc.message.compressed_size",
          "type": "int",
          "brief": "Compressed size of the message in bytes.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "rpc.message.uncompressed_size",
          "type": "int",
          "brief": "Uncompressed size of the message in bytes.",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/rpc.yaml",
        "attributes": {
          "rpc.message.compressed_size": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.message.id": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.message.type": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.message.uncompressed_size": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "rpc.connect_rpc",
      "type": "span",
      "brief": "Tech-specific attributes for Connect RPC.",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "RPC server [host name](https://grpc.github.io/grpc/core/md_doc_naming.html).\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "May contain server IP address, DNS name, or local socket name. When host component is an IP address, instrumentations SHOULD NOT do a reverse proxy lookup to obtain DNS name and SHOULD set `server.address` to the IP address provided in the host component.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "if the port is supported by the network transport used for communication."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the (logical) method being called, must be equal to the $method part in the span name.",
          "examples": "exampleMethod",
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The full (logical) name of the service being called, including its package name, if applicable.",
          "examples": "myservice.EchoService",
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "A string identifying the remoting system. See below for a list of well-known identifiers.",
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "rpc.connect_rpc.error_code",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "cancelled",
                "value": "cancelled",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unknown",
                "value": "unknown",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "invalid_argument",
                "value": "invalid_argument",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "deadline_exceeded",
                "value": "deadline_exceeded",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "not_found",
                "value": "not_found",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "already_exists",
                "value": "already_exists",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "permission_denied",
                "value": "permission_denied",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "resource_exhausted",
                "value": "resource_exhausted",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "failed_precondition",
                "value": "failed_precondition",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aborted",
                "value": "aborted",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "out_of_range",
                "value": "out_of_range",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unimplemented",
                "value": "unimplemented",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "internal",
                "value": "internal",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unavailable",
                "value": "unavailable",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "data_loss",
                "value": "data_loss",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unauthenticated",
                "value": "unauthenticated",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The [error codes](https://connect.build/docs/protocol/#error-codes) of the Connect request. Error codes are always string values.",
          "tag": "connect_rpc-tech-specific",
          "requirement_level": {
            "conditionally_required": "If response is not successful and if error code available."
          },
          "stability": "experimental"
        },
        {
          "name": "rpc.connect_rpc.request.metadata",
          "type": "template[string[]]",
          "brief": "Connect request metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.request.metadata.my-custom-metadata-attribute=[\"1.2.3.4\", \"1.2.3.5\"]"
          ],
          "tag": "connect_rpc-tech-specific",
          "requirement_level": "opt_in",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.connect_rpc.response.metadata",
          "type": "template[string[]]",
          "brief": "Connect response metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.response.metadata.my-custom-metadata-attribute=[\"attribute_value\"]"
          ],
          "tag": "connect_rpc-tech-specific",
          "requirement_level": "opt_in",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/rpc.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.connect_rpc.error_code": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "tag"
            ]
          },
          "rpc.connect_rpc.request.metadata": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "tag"
            ]
          },
          "rpc.connect_rpc.response.metadata": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level",
              "tag"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "telemetry",
      "type": "resource",
      "brief": "The telemetry SDK used to capture data recorded by the instrumentation libraries.\n",
      "attributes": [
        {
          "name": "telemetry.sdk.name",
          "type": "string",
          "brief": "The name of the telemetry SDK as defined above.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "required",
          "note": "The OpenTelemetry SDK MUST set the `telemetry.sdk.name` attribute to `opentelemetry`.\nIf another SDK, like a fork or a vendor-provided implementation, is used, this SDK MUST set the\n`telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point\nor another suitable identifier depending on the language.\nThe identifier `opentelemetry` is reserved and MUST NOT be used in this case.\nAll custom identifiers SHOULD be stable across different versions of an implementation.\n",
          "stability": "stable"
        },
        {
          "name": "telemetry.sdk.language",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "cpp",
                "value": "cpp",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "dotnet",
                "value": "dotnet",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "erlang",
                "value": "erlang",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "go",
                "value": "go",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "java",
                "value": "java",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "nodejs",
                "value": "nodejs",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "php",
                "value": "php",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "python",
                "value": "python",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ruby",
                "value": "ruby",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "rust",
                "value": "rust",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "swift",
                "value": "swift",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "webjs",
                "value": "webjs",
                "brief": null,
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The language of the telemetry SDK.\n",
          "requirement_level": "required",
          "stability": "stable"
        },
        {
          "name": "telemetry.sdk.version",
          "type": "string",
          "brief": "The version string of the telemetry SDK.\n",
          "examples": [
            "1.2.3"
          ],
          "requirement_level": "required",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/telemetry.yaml",
        "attributes": {
          "telemetry.sdk.language": {
            "source_group": "registry.telemetry",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "telemetry.sdk.name": {
            "source_group": "registry.telemetry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "telemetry.sdk.version": {
            "source_group": "registry.telemetry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "android",
      "type": "resource",
      "brief": "The Android platform on which the Android application is running.\n",
      "prefix": "android",
      "attributes": [
        {
          "name": "android.os.api_level",
          "type": "string",
          "brief": "Uniquely identifies the framework API revision offered by a version (`os.version`) of the android operating system. More information can be found [here](https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels).\n",
          "examples": [
            "33",
            "32"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/android.yaml",
        "attributes": {
          "android.os.api_level": {
            "source_group": "registry.android",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "telemetry_experimental",
      "type": "resource",
      "brief": "The telemetry SDK used to capture data recorded by the instrumentation libraries.\n",
      "attributes": [
        {
          "name": "telemetry.distro.name",
          "type": "string",
          "brief": "The name of the auto instrumentation agent or distribution, if used.\n",
          "examples": [
            "parts-unlimited-java"
          ],
          "requirement_level": "recommended",
          "note": "Official auto instrumentation agents and distributions SHOULD set the `telemetry.distro.name` attribute to\na string starting with `opentelemetry-`, e.g. `opentelemetry-java-instrumentation`.\n",
          "stability": "experimental"
        },
        {
          "name": "telemetry.distro.version",
          "type": "string",
          "brief": "The version string of the auto instrumentation agent or distribution, if used.\n",
          "examples": [
            "1.2.3"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/telemetry_experimental.yaml",
        "attributes": {
          "telemetry.distro.name": {
            "source_group": "registry.telemetry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "telemetry.distro.version": {
            "source_group": "registry.telemetry",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "host",
      "type": "resource",
      "brief": "A host is defined as a computing instance. For example, physical servers, virtual machines, switches or disk array.\n",
      "prefix": "host",
      "attributes": [
        {
          "name": "host.id",
          "type": "string",
          "brief": "Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider. For non-containerized systems, this should be the `machine-id`. See the table below for the sources to use to determine the `machine-id` based on operating system.\n",
          "examples": [
            "fdbf79e8af94cb7f9e8df36789187052"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.name",
          "type": "string",
          "brief": "Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n",
          "examples": [
            "opentelemetry-test"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.type",
          "type": "string",
          "brief": "Type of host. For Cloud, this must be the machine type.\n",
          "examples": [
            "n1-standard-1"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.arch",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "amd64",
                "value": "amd64",
                "brief": "AMD64",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "arm32",
                "value": "arm32",
                "brief": "ARM32",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "arm64",
                "value": "arm64",
                "brief": "ARM64",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ia64",
                "value": "ia64",
                "brief": "Itanium",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ppc32",
                "value": "ppc32",
                "brief": "32-bit PowerPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ppc64",
                "value": "ppc64",
                "brief": "64-bit PowerPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "s390x",
                "value": "s390x",
                "brief": "IBM z/Architecture",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "x86",
                "value": "x86",
                "brief": "32-bit x86",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The CPU architecture the host system is running on.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.image.name",
          "type": "string",
          "brief": "Name of the VM image or OS install the host was instantiated from.\n",
          "examples": [
            "infra-ami-eks-worker-node-7d4ec78312",
            "CentOS-8-x86_64-1905"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.image.id",
          "type": "string",
          "brief": "VM image ID or host OS image ID. For Cloud, this value is from the provider.\n",
          "examples": [
            "ami-07b06b442921831e5"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.image.version",
          "type": "string",
          "brief": "The version string of the VM image or host OS as defined in [Version Attributes](/docs/resource/README.md#version-attributes).\n",
          "examples": [
            "0.1"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "host.ip",
          "type": "string[]",
          "brief": "Available IP addresses of the host, excluding loopback interfaces.\n",
          "examples": [
            "192.168.1.140",
            "fe80::abc2:4a28:737a:609e"
          ],
          "requirement_level": "opt_in",
          "note": "IPv4 Addresses MUST be specified in dotted-quad notation. IPv6 addresses MUST be specified in the [RFC 5952](https://www.rfc-editor.org/rfc/rfc5952.html) format.\n",
          "stability": "experimental"
        },
        {
          "name": "host.mac",
          "type": "string[]",
          "brief": "Available MAC addresses of the host, excluding loopback interfaces.\n",
          "examples": [
            "AC-DE-48-23-45-67",
            "AC-DE-48-23-45-67-01-9F"
          ],
          "requirement_level": "opt_in",
          "note": "MAC Addresses MUST be represented in [IEEE RA hexadecimal form](https://standards.ieee.org/wp-content/uploads/import/documents/tutorials/eui.pdf): as hyphen-separated octets in uppercase hexadecimal form from most to least significant.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/host.yaml",
        "attributes": {
          "host.arch": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "host.id": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "host.image.id": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "host.image.name": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "host.image.version": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "host.ip": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "host.mac": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "host.name": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "host.type": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "host.cpu",
      "type": "resource",
      "brief": "A host's CPU information\n",
      "prefix": "host.cpu",
      "attributes": [
        {
          "name": "host.cpu.vendor.id",
          "type": "string",
          "brief": "Processor manufacturer identifier. A maximum 12-character string.\n",
          "examples": [
            "GenuineIntel"
          ],
          "requirement_level": "opt_in",
          "note": "[CPUID](https://wiki.osdev.org/CPUID) command returns the vendor ID string in EBX, EDX and ECX registers. Writing these to memory in this order results in a 12-character string.\n",
          "stability": "experimental"
        },
        {
          "name": "host.cpu.family",
          "type": "string",
          "brief": "Family or generation of the CPU.\n",
          "examples": [
            "6",
            "PA-RISC 1.1e"
          ],
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "host.cpu.model.id",
          "type": "string",
          "brief": "Model identifier. It provides more granular information about the CPU, distinguishing it from other CPUs within the same family.\n",
          "examples": [
            "6",
            "9000/778/B180L"
          ],
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "host.cpu.model.name",
          "type": "string",
          "brief": "Model designation of the processor.\n",
          "examples": [
            "11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz"
          ],
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "host.cpu.stepping",
          "type": "string",
          "brief": "Stepping or core revisions.\n",
          "examples": [
            "1",
            "r1p1"
          ],
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "host.cpu.cache.l2.size",
          "type": "int",
          "brief": "The amount of level 2 memory cache available to the processor (in Bytes).\n",
          "examples": [
            12288000
          ],
          "requirement_level": "opt_in",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/host.yaml",
        "attributes": {
          "host.cpu.cache.l2.size": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "host.cpu.family": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "host.cpu.model.id": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "host.cpu.model.name": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "host.cpu.stepping": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "host.cpu.vendor.id": {
            "source_group": "registry.host",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.error",
      "type": "attribute_group",
      "brief": "This document defines the shared attributes used to report an error.\n",
      "prefix": "error",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": "recommended",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/error.yaml"
      }
    },
    {
      "id": "registry.user_agent",
      "type": "attribute_group",
      "brief": "Describes user-agent attributes.",
      "prefix": "user_agent",
      "attributes": [
        {
          "name": "user_agent.original",
          "type": "string",
          "brief": "Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n",
          "examples": [
            "CERN-LineMode/2.15 libwww/2.17b3",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1",
            "YourApp/1.0.0 grpc-java-okhttp/1.27.2"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "user_agent.name",
          "type": "string",
          "brief": "Name of the user-agent extracted from original. Usually refers to the browser's name.\n",
          "examples": [
            "Safari",
            "YourApp"
          ],
          "requirement_level": "recommended",
          "note": "[Example](https://www.whatsmyua.info) of extracting browser's name from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant name SHOULD be selected. In such a scenario it should align with `user_agent.version`\n",
          "stability": "experimental"
        },
        {
          "name": "user_agent.version",
          "type": "string",
          "brief": "Version of the user-agent extracted from original. Usually refers to the browser's version\n",
          "examples": [
            "14.1.2",
            "1.0.0"
          ],
          "requirement_level": "recommended",
          "note": "[Example](https://www.whatsmyua.info) of extracting browser's version from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant version SHOULD be selected. In such a scenario it should align with `user_agent.name`\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/user-agent.yaml"
      }
    },
    {
      "id": "registry.cloud",
      "type": "attribute_group",
      "brief": "A cloud environment (e.g. GCP, Azure, AWS).\n",
      "prefix": "cloud",
      "attributes": [
        {
          "name": "cloud.provider",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "alibaba_cloud",
                "value": "alibaba_cloud",
                "brief": "Alibaba Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws",
                "value": "aws",
                "brief": "Amazon Web Services",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure",
                "value": "azure",
                "brief": "Microsoft Azure",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp",
                "value": "gcp",
                "brief": "Google Cloud Platform",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "heroku",
                "value": "heroku",
                "brief": "Heroku Platform as a Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ibm_cloud",
                "value": "ibm_cloud",
                "brief": "IBM Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "tencent_cloud",
                "value": "tencent_cloud",
                "brief": "Tencent Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Name of the cloud provider.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "cloud.account.id",
          "type": "string",
          "brief": "The cloud account ID the resource is assigned to.\n",
          "examples": [
            "111111111111",
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "cloud.region",
          "type": "string",
          "brief": "The geographical region the resource is running.\n",
          "examples": [
            "us-central1",
            "us-east-1"
          ],
          "requirement_level": "recommended",
          "note": "Refer to your provider's docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/global-infrastructure/geographies/), [Google Cloud regions](https://cloud.google.com/about/locations), or [Tencent Cloud regions](https://www.tencentcloud.com/document/product/213/6091).\n",
          "stability": "experimental"
        },
        {
          "name": "cloud.resource_id",
          "type": "string",
          "brief": "Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://cloud.google.com/apis/design/resource_names#full_resource_name) on GCP)\n",
          "examples": [
            "arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function",
            "//run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID",
            "/subscriptions/<SUBSCIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>"
          ],
          "requirement_level": "recommended",
          "note": "On some cloud providers, it may not be possible to determine the full ID at startup,\nso it may be necessary to set `cloud.resource_id` as a span attribute instead.\n\nThe exact value to use for `cloud.resource_id` depends on the cloud provider.\nThe following well-known definitions MUST be used if you set this attribute and they apply:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\n  Take care not to use the \"invoked ARN\" directly but replace any\n  [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)\n  with the resolved function version, as the same runtime instance may be invocable with\n  multiple different aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/rest/api/resources/resources/get-by-id) of the invoked function,\n  *not* the function app, having the form\n  `/subscriptions/<SUBSCIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.\n  This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share\n  a TracerProvider.\n",
          "stability": "experimental"
        },
        {
          "name": "cloud.availability_zone",
          "type": "string",
          "brief": "Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n",
          "examples": [
            "us-east-1c"
          ],
          "requirement_level": "recommended",
          "note": "Availability zones are called \"zones\" on Alibaba Cloud and Google Cloud.\n",
          "stability": "experimental"
        },
        {
          "name": "cloud.platform",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "alibaba_cloud_ecs",
                "value": "alibaba_cloud_ecs",
                "brief": "Alibaba Cloud Elastic Compute Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "alibaba_cloud_fc",
                "value": "alibaba_cloud_fc",
                "brief": "Alibaba Cloud Function Compute",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "alibaba_cloud_openshift",
                "value": "alibaba_cloud_openshift",
                "brief": "Red Hat OpenShift on Alibaba Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_ec2",
                "value": "aws_ec2",
                "brief": "AWS Elastic Compute Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_ecs",
                "value": "aws_ecs",
                "brief": "AWS Elastic Container Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_eks",
                "value": "aws_eks",
                "brief": "AWS Elastic Kubernetes Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_lambda",
                "value": "aws_lambda",
                "brief": "AWS Lambda",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_elastic_beanstalk",
                "value": "aws_elastic_beanstalk",
                "brief": "AWS Elastic Beanstalk",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_app_runner",
                "value": "aws_app_runner",
                "brief": "AWS App Runner",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_openshift",
                "value": "aws_openshift",
                "brief": "Red Hat OpenShift on AWS (ROSA)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure_vm",
                "value": "azure_vm",
                "brief": "Azure Virtual Machines",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure_container_apps",
                "value": "azure_container_apps",
                "brief": "Azure Container Apps",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure_container_instances",
                "value": "azure_container_instances",
                "brief": "Azure Container Instances",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure_aks",
                "value": "azure_aks",
                "brief": "Azure Kubernetes Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure_functions",
                "value": "azure_functions",
                "brief": "Azure Functions",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure_app_service",
                "value": "azure_app_service",
                "brief": "Azure App Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure_openshift",
                "value": "azure_openshift",
                "brief": "Azure Red Hat OpenShift",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_bare_metal_solution",
                "value": "gcp_bare_metal_solution",
                "brief": "Google Bare Metal Solution (BMS)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_compute_engine",
                "value": "gcp_compute_engine",
                "brief": "Google Cloud Compute Engine (GCE)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_cloud_run",
                "value": "gcp_cloud_run",
                "brief": "Google Cloud Run",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_kubernetes_engine",
                "value": "gcp_kubernetes_engine",
                "brief": "Google Cloud Kubernetes Engine (GKE)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_cloud_functions",
                "value": "gcp_cloud_functions",
                "brief": "Google Cloud Functions (GCF)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_app_engine",
                "value": "gcp_app_engine",
                "brief": "Google Cloud App Engine (GAE)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_openshift",
                "value": "gcp_openshift",
                "brief": "Red Hat OpenShift on Google Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ibm_cloud_openshift",
                "value": "ibm_cloud_openshift",
                "brief": "Red Hat OpenShift on IBM Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "tencent_cloud_cvm",
                "value": "tencent_cloud_cvm",
                "brief": "Tencent Cloud Cloud Virtual Machine (CVM)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "tencent_cloud_eks",
                "value": "tencent_cloud_eks",
                "brief": "Tencent Cloud Elastic Kubernetes Service (EKS)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "tencent_cloud_scf",
                "value": "tencent_cloud_scf",
                "brief": "Tencent Cloud Serverless Cloud Function (SCF)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The cloud platform in use.\n",
          "requirement_level": "recommended",
          "note": "The prefix of the service SHOULD match the one specified in `cloud.provider`.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/cloud.yaml"
      }
    },
    {
      "id": "registry.log",
      "type": "attribute_group",
      "brief": "This document defines log attributes\n",
      "prefix": "log",
      "attributes": [
        {
          "name": "log.iostream",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "stdout",
                "value": "stdout",
                "brief": "Logs from stdout stream",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "stderr",
                "value": "stderr",
                "brief": "Events from stderr stream",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The stream associated with the log. See below for a list of well-known values.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/log.yaml"
      }
    },
    {
      "id": "registry.log.file",
      "type": "attribute_group",
      "brief": "Attributes for a file to which log was emitted.\n",
      "prefix": "log.file",
      "attributes": [
        {
          "name": "log.file.name",
          "type": "string",
          "brief": "The basename of the file.\n",
          "examples": [
            "audit.log"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "log.file.path",
          "type": "string",
          "brief": "The full path to the file.\n",
          "examples": [
            "/var/log/mysql/audit.log"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "log.file.name_resolved",
          "type": "string",
          "brief": "The basename of the file, with symlinks resolved.\n",
          "examples": [
            "uuid.log"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "log.file.path_resolved",
          "type": "string",
          "brief": "The full path to the file, with symlinks resolved.\n",
          "examples": [
            "/var/lib/docker/uuid.log"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/log.yaml"
      }
    },
    {
      "id": "registry.log.record",
      "type": "attribute_group",
      "brief": "This document defines the generic attributes that may be used in any Log Record.\n",
      "prefix": "log.record",
      "attributes": [
        {
          "name": "log.record.uid",
          "type": "string",
          "brief": "A unique identifier for the Log Record.\n",
          "examples": [
            "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          ],
          "requirement_level": "recommended",
          "note": "If an id is provided, other log records with the same id will be considered duplicates and can be removed safely. This means, that two distinguishable log records MUST have different values.\nThe id MAY be an [Universally Unique Lexicographically Sortable Identifier (ULID)](https://github.com/ulid/spec), but other identifiers (e.g. UUID) may be used as needed.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/log.yaml"
      }
    },
    {
      "id": "network-core",
      "type": "attribute_group",
      "brief": "These attributes may be used for any network related operation.\n",
      "prefix": "network",
      "attributes": [
        {
          "name": "network.local.address",
          "type": "string",
          "brief": "Local address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.local.port",
          "type": "int",
          "brief": "Local port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "amqp",
            "http",
            "mqtt"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/network.yaml",
        "attributes": {
          "network.local.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.local.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "network-connection-and-carrier",
      "type": "attribute_group",
      "brief": "These attributes may be used for any network related operation.\n",
      "prefix": "network",
      "attributes": [
        {
          "name": "network.carrier.icc",
          "type": "string",
          "brief": "The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.",
          "examples": "DE",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.carrier.mcc",
          "type": "string",
          "brief": "The mobile carrier country code.",
          "examples": "310",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.carrier.mnc",
          "type": "string",
          "brief": "The mobile carrier network code.",
          "examples": "001",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.carrier.name",
          "type": "string",
          "brief": "The name of the mobile carrier.",
          "examples": "sprint",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.connection.subtype",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "gprs",
                "value": "gprs",
                "brief": "GPRS",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "edge",
                "value": "edge",
                "brief": "EDGE",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "umts",
                "value": "umts",
                "brief": "UMTS",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cdma",
                "value": "cdma",
                "brief": "CDMA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "evdo_0",
                "value": "evdo_0",
                "brief": "EVDO Rel. 0",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "evdo_a",
                "value": "evdo_a",
                "brief": "EVDO Rev. A",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cdma2000_1xrtt",
                "value": "cdma2000_1xrtt",
                "brief": "CDMA2000 1XRTT",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hsdpa",
                "value": "hsdpa",
                "brief": "HSDPA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hsupa",
                "value": "hsupa",
                "brief": "HSUPA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hspa",
                "value": "hspa",
                "brief": "HSPA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "iden",
                "value": "iden",
                "brief": "IDEN",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "evdo_b",
                "value": "evdo_b",
                "brief": "EVDO Rev. B",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "lte",
                "value": "lte",
                "brief": "LTE",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ehrpd",
                "value": "ehrpd",
                "brief": "EHRPD",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hspap",
                "value": "hspap",
                "brief": "HSPAP",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gsm",
                "value": "gsm",
                "brief": "GSM",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "td_scdma",
                "value": "td_scdma",
                "brief": "TD-SCDMA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "iwlan",
                "value": "iwlan",
                "brief": "IWLAN",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "nr",
                "value": "nr",
                "brief": "5G NR (New Radio)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "nrnsa",
                "value": "nrnsa",
                "brief": "5G NRNSA (New Radio Non-Standalone)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "lte_ca",
                "value": "lte_ca",
                "brief": "LTE CA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.",
          "examples": "LTE",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.connection.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "wifi",
                "value": "wifi",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "wired",
                "value": "wired",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cell",
                "value": "cell",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unavailable",
                "value": "unavailable",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unknown",
                "value": "unknown",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The internet connection type.",
          "examples": "wifi",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/network.yaml",
        "attributes": {
          "network.carrier.icc": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.carrier.mcc": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.carrier.mnc": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.carrier.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.connection.subtype": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.connection.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "log-exception",
      "type": "attribute_group",
      "brief": "This document defines attributes for exceptions represented using Log Records.\n",
      "prefix": "exception",
      "attributes": [
        {
          "name": "exception.stacktrace",
          "type": "string",
          "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n",
          "examples": "Exception in thread \"main\" java.lang.RuntimeException: Test exception\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)",
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "exception.type",
          "type": "string",
          "brief": "The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n",
          "examples": [
            "java.net.ConnectException",
            "OSError"
          ],
          "requirement_level": {
            "conditionally_required": "Required if `exception.message` is not set, recommended otherwise."
          },
          "stability": "stable"
        },
        {
          "name": "exception.message",
          "type": "string",
          "brief": "The exception message.",
          "examples": [
            "Division by zero",
            "Can't convert 'int' object to str implicitly"
          ],
          "requirement_level": {
            "conditionally_required": "Required if `exception.type` is not set, recommended otherwise."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/logs/log-exception.yaml",
        "attributes": {
          "exception.message": {
            "source_group": "registry.exception",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "exception.stacktrace": {
            "source_group": "registry.exception",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "exception.type": {
            "source_group": "registry.exception",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.publish.duration",
      "type": "metric",
      "brief": "Deprecated. Use `messaging.client.operation.duration` instead.",
      "stability": "experimental",
      "deprecated": "Replaced by `messaging.client.operation.duration`.",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.publish.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/deprecated/messaging-metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.receive.duration",
      "type": "metric",
      "brief": "Deprecated. Use `messaging.client.operation.duration` instead.",
      "stability": "experimental",
      "deprecated": "Replaced by `messaging.client.operation.duration`.",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.receive.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/deprecated/messaging-metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.process.messages",
      "type": "metric",
      "brief": "Deprecated. Use `messaging.client.consumed.messages` instead.",
      "stability": "experimental",
      "deprecated": "Replaced by `messaging.client.consumed.messages`.",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.process.messages",
      "instrument": "counter",
      "unit": "{message}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/deprecated/messaging-metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.publish.messages",
      "type": "metric",
      "brief": "Deprecated. Use `messaging.client.produced.messages` instead.",
      "stability": "experimental",
      "deprecated": "Replaced by `messaging.client.produced.messages`.",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.publish.messages",
      "instrument": "counter",
      "unit": "{message}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/deprecated/messaging-metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.receive.messages",
      "type": "metric",
      "brief": "Deprecated. Use `messaging.client.consumed.messages` instead.",
      "stability": "experimental",
      "deprecated": "Replaced by `messaging.client.consumed.messages`.",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.receive.messages",
      "instrument": "counter",
      "unit": "{message}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/deprecated/messaging-metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "common.kestrel.attributes",
      "type": "attribute_group",
      "brief": "Common kestrel attributes",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-kestrel.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.active_connections",
      "type": "metric",
      "brief": "Number of connections that are currently active on the server.",
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.active_connections",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-kestrel.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.connection.duration",
      "type": "metric",
      "brief": "The duration of connections on the server.",
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The full name of exception type.",
          "examples": [
            "System.OperationCanceledException",
            "Contoso.MyException"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if an error has occurred."
          },
          "note": "Captures the exception type when a connection fails.",
          "stability": "stable"
        },
        {
          "name": "tls.protocol.version",
          "type": "string",
          "brief": "Numeric part of the version parsed from the original string of the negotiated [SSL/TLS protocol version](https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html#RETURN-VALUES)\n",
          "examples": [
            "1.2",
            "3"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "web_sockets"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.connection.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-kestrel.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "tls.protocol.version": {
            "source_group": "registry.tls",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.rejected_connections",
      "type": "metric",
      "brief": "Number of connections rejected by the server.",
      "note": "Connections are rejected when the currently active count exceeds the value configured with `MaxConcurrentConnections`.\nMeter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.rejected_connections",
      "instrument": "counter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-kestrel.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.queued_connections",
      "type": "metric",
      "brief": "Number of connections that are currently queued and are waiting to start.",
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.queued_connections",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-kestrel.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.queued_requests",
      "type": "metric",
      "brief": "Number of HTTP requests on multiplexed connections (HTTP/2 and HTTP/3) that are currently queued and are waiting to start.",
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "web_sockets"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.queued_requests",
      "instrument": "updowncounter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-kestrel.yaml",
        "attributes": {
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.upgraded_connections",
      "type": "metric",
      "brief": "Number of connections that are currently upgraded (WebSockets). .",
      "note": "The counter only tracks HTTP/1.1 connections.\n\nMeter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.upgraded_connections",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-kestrel.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.tls_handshake.duration",
      "type": "metric",
      "brief": "The duration of TLS handshakes on the server.",
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The full name of exception type.",
          "examples": [
            "System.OperationCanceledException",
            "Contoso.MyException"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if an error has occurred."
          },
          "note": "Captures the exception type when a TLS handshake fails.",
          "stability": "stable"
        },
        {
          "name": "tls.protocol.version",
          "type": "string",
          "brief": "Numeric part of the version parsed from the original string of the negotiated [SSL/TLS protocol version](https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html#RETURN-VALUES)\n",
          "examples": [
            "1.2",
            "3"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.tls_handshake.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-kestrel.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "tls.protocol.version": {
            "source_group": "registry.tls",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.kestrel.active_tls_handshakes",
      "type": "metric",
      "brief": "Number of TLS handshakes that are currently in progress on the server.",
      "note": "Meter name: `Microsoft.AspNetCore.Server.Kestrel`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": {
            "recommended": "if the transport is `tcp` or `udp`"
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "unix"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "kestrel.active_tls_handshakes",
      "instrument": "updowncounter",
      "unit": "{handshake}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-kestrel.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "gcp.gce",
      "type": "resource",
      "brief": "Resources used by Google Compute Engine (GCE).\n",
      "attributes": [
        {
          "name": "gcp.gce.instance.name",
          "type": "string",
          "brief": "The instance name of a GCE instance. This is the value provided by `host.name`, the visible name of the instance in the Cloud Console UI, and the prefix for the default hostname of the instance as defined by the [default internal DNS name](https://cloud.google.com/compute/docs/internal-dns#instance-fully-qualified-domain-names).\n",
          "examples": [
            "instance-1",
            "my-vm-name"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gcp.gce.instance.hostname",
          "type": "string",
          "brief": "The hostname of a GCE instance. This is the full value of the default or [custom hostname](https://cloud.google.com/compute/docs/instances/custom-hostname-vm).\n",
          "examples": [
            "my-host1234.example.com",
            "sample-vm.us-west1-b.c.my-project.internal"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/cloud_provider/gcp/gce.yaml",
        "attributes": {
          "gcp.gce.instance.hostname": {
            "source_group": "registry.gcp.gce",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gcp.gce.instance.name": {
            "source_group": "registry.gcp.gce",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.jvm",
      "type": "attribute_group",
      "brief": "This document defines Java Virtual machine related attributes.\n",
      "prefix": "jvm",
      "attributes": [
        {
          "name": "jvm.gc.action",
          "type": "string",
          "brief": "Name of the garbage collector action.",
          "examples": [
            "end of minor GC",
            "end of major GC"
          ],
          "requirement_level": "recommended",
          "note": "Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).\n",
          "stability": "stable"
        },
        {
          "name": "jvm.gc.name",
          "type": "string",
          "brief": "Name of the garbage collector.",
          "examples": [
            "G1 Young Generation",
            "G1 Old Generation"
          ],
          "requirement_level": "recommended",
          "note": "Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).\n",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "heap",
                "value": "heap",
                "brief": "Heap memory.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "non_heap",
                "value": "non_heap",
                "brief": "Non-heap memory",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.pool.name",
          "type": "string",
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "stability": "stable"
        },
        {
          "name": "jvm.thread.daemon",
          "type": "boolean",
          "brief": "Whether the thread is daemon or not.",
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.thread.state",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "new",
                "value": "new",
                "brief": "A thread that has not yet started is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "runnable",
                "value": "runnable",
                "brief": "A thread executing in the Java virtual machine is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "blocked",
                "value": "blocked",
                "brief": "A thread that is blocked waiting for a monitor lock is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "waiting",
                "value": "waiting",
                "brief": "A thread that is waiting indefinitely for another thread to perform a particular action is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "timed_waiting",
                "value": "timed_waiting",
                "brief": "A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "terminated",
                "value": "terminated",
                "brief": "A thread that has exited is in this state.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "State of the thread.",
          "examples": [
            "runnable",
            "blocked"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.buffer.pool.name",
          "type": "string",
          "brief": "Name of the buffer pool.",
          "examples": [
            "mapped",
            "direct"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/jvm.yaml"
      }
    },
    {
      "id": "registry.network.deprecated",
      "type": "attribute_group",
      "brief": "These attributes may be used for any network related operation.\n",
      "prefix": "net",
      "attributes": [
        {
          "name": "net.sock.peer.name",
          "type": "string",
          "brief": "Deprecated, no replacement at this time.",
          "examples": [
            "/var/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Removed."
        },
        {
          "name": "net.sock.peer.addr",
          "type": "string",
          "brief": "Deprecated, use `network.peer.address`.",
          "examples": [
            "192.168.0.1"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `network.peer.address`."
        },
        {
          "name": "net.sock.peer.port",
          "type": "int",
          "brief": "Deprecated, use `network.peer.port`.",
          "examples": [
            65531
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `network.peer.port`."
        },
        {
          "name": "net.peer.name",
          "type": "string",
          "brief": "Deprecated, use `server.address` on client spans and `client.address` on server spans.",
          "examples": [
            "example.com"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `server.address` on client spans and `client.address` on server spans."
        },
        {
          "name": "net.peer.port",
          "type": "int",
          "brief": "Deprecated, use `server.port` on client spans and `client.port` on server spans.",
          "examples": [
            8080
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `server.port` on client spans and `client.port` on server spans."
        },
        {
          "name": "net.peer.ip",
          "type": "string",
          "brief": "Deprecated, use `network.peer.address`.",
          "examples": "127.0.0.1",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `network.peer.address`."
        },
        {
          "name": "net.host.name",
          "type": "string",
          "brief": "Deprecated, use `server.address`.",
          "examples": [
            "example.com"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `server.address`."
        },
        {
          "name": "net.host.ip",
          "type": "string",
          "brief": "Deprecated, use `network.local.address`.",
          "examples": "192.168.0.1",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `network.local.address`."
        },
        {
          "name": "net.host.port",
          "type": "int",
          "brief": "Deprecated, use `server.port`.",
          "examples": [
            8080
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `server.port`."
        },
        {
          "name": "net.sock.host.addr",
          "type": "string",
          "brief": "Deprecated, use `network.local.address`.",
          "examples": [
            "/var/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `network.local.address`."
        },
        {
          "name": "net.sock.host.port",
          "type": "int",
          "brief": "Deprecated, use `network.local.port`.",
          "examples": [
            8080
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `network.local.port`."
        },
        {
          "name": "net.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ip_tcp",
                "value": "ip_tcp",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ip_udp",
                "value": "ip_udp",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "inproc",
                "value": "inproc",
                "brief": "In-process communication.",
                "note": "Signals that there is only in-process communication not using a \"real\" network protocol in cases where network attributes would normally be expected. Usually all other network attributes can be left out in that case.\n",
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "Something else (non IP-based).",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `network.transport`.",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `network.transport`."
        },
        {
          "name": "net.protocol.name",
          "type": "string",
          "brief": "Deprecated, use `network.protocol.name`.",
          "examples": [
            "amqp",
            "http",
            "mqtt"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `network.protocol.name`."
        },
        {
          "name": "net.protocol.version",
          "type": "string",
          "brief": "Deprecated, use `network.protocol.version`.",
          "examples": "3.1.1",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `network.protocol.version`."
        },
        {
          "name": "net.sock.family",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "inet",
                "value": "inet",
                "brief": "IPv4 address",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "inet6",
                "value": "inet6",
                "brief": "IPv6 address",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket path",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `network.transport` and `network.type`.",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Split to `network.transport` and `network.type`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deprecated/network.yaml"
      }
    },
    {
      "id": "registry.url",
      "type": "attribute_group",
      "brief": "Attributes describing URL.",
      "prefix": "url",
      "attributes": [
        {
          "name": "url.domain",
          "type": "string",
          "brief": "Domain extracted from the `url.full`, such as \"opentelemetry.io\".\n",
          "examples": [
            "www.foo.bar",
            "opentelemetry.io",
            "3.12.167.2",
            "[1080:0:0:0:8:800:200C:417A]"
          ],
          "requirement_level": "recommended",
          "note": "In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the domain field. If the URL contains a [literal IPv6 address](https://www.rfc-editor.org/rfc/rfc2732#section-2) enclosed by `[` and `]`, the `[` and `]` characters should also be captured in the domain field.\n",
          "stability": "experimental"
        },
        {
          "name": "url.extension",
          "type": "string",
          "brief": "The file extension extracted from the `url.full`, excluding the leading dot.\n",
          "examples": [
            "png",
            "gz"
          ],
          "requirement_level": "recommended",
          "note": "The file extension is only set if it exists, as not every url has a file extension. When the file name has multiple extensions `example.tar.gz`, only the last one should be captured `gz`, not `tar.gz`.\n",
          "stability": "experimental"
        },
        {
          "name": "url.fragment",
          "type": "string",
          "brief": "The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component\n",
          "examples": [
            "SemConv"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "url.full",
          "type": "string",
          "brief": "Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)",
          "examples": [
            "https://www.foo.bar/search?q=OpenTelemetry#SemConv",
            "//localhost"
          ],
          "requirement_level": "recommended",
          "note": "For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment is not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.\n`url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case username and password SHOULD be redacted and attribute's value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.\n`url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed). Sensitive content provided in `url.full` SHOULD be scrubbed when instrumentations can identify it.\n",
          "stability": "stable"
        },
        {
          "name": "url.original",
          "type": "string",
          "brief": "Unmodified original URL as seen in the event source.\n",
          "examples": [
            "https://www.foo.bar/search?q=OpenTelemetry#SemConv",
            "search?q=OpenTelemetry"
          ],
          "requirement_level": "recommended",
          "note": "In network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path. This field is meant to represent the URL as it was observed, complete or not.\n`url.original` might contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case password and username SHOULD NOT be redacted and attribute's value SHOULD remain the same.\n",
          "stability": "experimental"
        },
        {
          "name": "url.path",
          "type": "string",
          "brief": "The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n",
          "examples": [
            "/search"
          ],
          "requirement_level": "recommended",
          "note": "Sensitive content provided in `url.path` SHOULD be scrubbed when instrumentations can identify it.\n",
          "stability": "stable"
        },
        {
          "name": "url.port",
          "type": "int",
          "brief": "Port extracted from the `url.full`\n",
          "examples": [
            443
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "url.query",
          "type": "string",
          "brief": "The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n",
          "examples": [
            "q=OpenTelemetry"
          ],
          "requirement_level": "recommended",
          "note": "Sensitive content provided in `url.query` SHOULD be scrubbed when instrumentations can identify it.\n",
          "stability": "stable"
        },
        {
          "name": "url.registered_domain",
          "type": "string",
          "brief": "The highest registered url domain, stripped of the subdomain.\n",
          "examples": [
            "example.com",
            "foo.co.uk"
          ],
          "requirement_level": "recommended",
          "note": "This value can be determined precisely with the [public suffix list](http://publicsuffix.org). For example, the registered domain for `foo.example.com` is `example.com`. Trying to approximate this by simply taking the last two labels will not work well for TLDs such as `co.uk`.\n",
          "stability": "experimental"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "https",
            "ftp",
            "telnet"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "url.subdomain",
          "type": "string",
          "brief": "The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain. In a partially qualified domain, or if the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.\n",
          "examples": [
            "east",
            "sub2.sub1"
          ],
          "requirement_level": "recommended",
          "note": "The subdomain portion of `www.east.mydomain.co.uk` is `east`. If the domain has multiple levels of subdomain, such as `sub2.sub1.example.com`, the subdomain field should contain `sub2.sub1`, with no trailing period.\n",
          "stability": "experimental"
        },
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "url.top_level_domain",
          "type": "string",
          "brief": "The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is `com`.\n",
          "examples": [
            "com",
            "co.uk"
          ],
          "requirement_level": "recommended",
          "note": "This value can be determined precisely with the [public suffix list](http://publicsuffix.org).\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/url.yaml"
      }
    },
    {
      "id": "attributes.faas.common",
      "type": "attribute_group",
      "brief": "Describes FaaS attributes.",
      "prefix": "faas",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "faas.invoked_name",
          "type": "string",
          "brief": "The name of the invoked function.\n",
          "examples": "my-function",
          "requirement_level": "required",
          "note": "SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n",
          "stability": "experimental"
        },
        {
          "name": "faas.invoked_provider",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "alibaba_cloud",
                "value": "alibaba_cloud",
                "brief": "Alibaba Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws",
                "value": "aws",
                "brief": "Amazon Web Services",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure",
                "value": "azure",
                "brief": "Microsoft Azure",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp",
                "value": "gcp",
                "brief": "Google Cloud Platform",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "tencent_cloud",
                "value": "tencent_cloud",
                "brief": "Tencent Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The cloud provider of the invoked function.\n",
          "requirement_level": "required",
          "note": "SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n",
          "stability": "experimental"
        },
        {
          "name": "faas.invoked_region",
          "type": "string",
          "brief": "The cloud region of the invoked function.\n",
          "examples": "eu-central-1",
          "requirement_level": {
            "conditionally_required": "For some cloud providers, like AWS or GCP, the region in which a function is hosted is essential to uniquely identify the function and also part of its endpoint. Since it's part of the endpoint being called, the region is always known to clients. In these cases, `faas.invoked_region` MUST be set accordingly. If the region is unknown to the client or not required for identifying the invoked function, setting `faas.invoked_region` is optional.\n"
          },
          "note": "SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/faas-common.yaml",
        "attributes": {
          "faas.invoked_name": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.invoked_provider": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.invoked_region": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.nodejs.eventloop.delay.min",
      "type": "metric",
      "brief": "Event loop minimum delay.",
      "note": "Value can be retrieved from value `histogram.min` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.delay.min",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/nodejs-metrics.yaml"
      }
    },
    {
      "id": "metric.nodejs.eventloop.delay.max",
      "type": "metric",
      "brief": "Event loop maximum delay.",
      "note": "Value can be retrieved from value `histogram.max` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.delay.max",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/nodejs-metrics.yaml"
      }
    },
    {
      "id": "metric.nodejs.eventloop.delay.mean",
      "type": "metric",
      "brief": "Event loop mean delay.",
      "note": "Value can be retrieved from value `histogram.mean` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.delay.mean",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/nodejs-metrics.yaml"
      }
    },
    {
      "id": "metric.nodejs.eventloop.delay.stddev",
      "type": "metric",
      "brief": "Event loop standard deviation delay.",
      "note": "Value can be retrieved from value `histogram.stddev` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.delay.stddev",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/nodejs-metrics.yaml"
      }
    },
    {
      "id": "metric.nodejs.eventloop.delay.pfifty",
      "type": "metric",
      "brief": "Event loop 50 percentile delay.",
      "note": "Value can be retrieved from value `histogram.percentile(50)` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.delay.p50",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/nodejs-metrics.yaml"
      }
    },
    {
      "id": "metric.nodejs.eventloop.delay.pninety",
      "type": "metric",
      "brief": "Event loop 90 percentile delay.",
      "note": "Value can be retrieved from value `histogram.percentile(90)` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.delay.p90",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/nodejs-metrics.yaml"
      }
    },
    {
      "id": "metric.nodejs.eventloop.delay.pninety_nine",
      "type": "metric",
      "brief": "Event loop 99 percentile delay.",
      "note": "Value can be retrieved from value `histogram.percentile(99)` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.delay.p99",
      "instrument": "gauge",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/nodejs-metrics.yaml"
      }
    },
    {
      "id": "metric.nodejs.eventloop.utilization",
      "type": "metric",
      "brief": "Event loop utilization.",
      "note": "The value range is [0.0,1.0] and can be retrieved from value [`performance.eventLoopUtilization([utilization1[, utilization2]])`](https://nodejs.org/api/perf_hooks.html#performanceeventlooputilizationutilization1-utilization2)\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "nodejs.eventloop.utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/nodejs-metrics.yaml"
      }
    },
    {
      "id": "aspnetcore.common.rate_limiting.metrics.attributes",
      "type": "attribute_group",
      "brief": "Common ASP.NET Core rate-limiting metrics attributes",
      "attributes": [
        {
          "name": "aspnetcore.rate_limiting.policy",
          "type": "string",
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-aspnetcore.yaml",
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.aspnetcore.routing.match_attempts",
      "type": "metric",
      "brief": "Number of requests that were attempted to be matched to an endpoint.",
      "note": "Meter name: `Microsoft.AspNetCore.Routing`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if a route was successfully matched."
          },
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.routing.is_fallback",
          "type": "boolean",
          "brief": "A value that indicates whether the matched route is a fallback route.",
          "examples": [
            true
          ],
          "requirement_level": {
            "conditionally_required": "if and only if a route was successfully matched."
          },
          "stability": "stable"
        },
        {
          "name": "aspnetcore.routing.match_status",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "success",
                "value": "success",
                "brief": "Match succeeded",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "failure",
                "value": "failure",
                "brief": "Match failed",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Match result - success or failure",
          "examples": [
            "success",
            "failure"
          ],
          "requirement_level": "required",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "aspnetcore.routing.match_attempts",
      "instrument": "counter",
      "unit": "{match_attempt}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-aspnetcore.yaml",
        "attributes": {
          "aspnetcore.routing.is_fallback": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aspnetcore.routing.match_status": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.route": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.aspnetcore.diagnostics.exceptions",
      "type": "metric",
      "brief": "Number of exceptions caught by exception handling middleware.",
      "note": "Meter name: `Microsoft.AspNetCore.Diagnostics`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The full name of exception type.",
          "examples": [
            "System.OperationCanceledException",
            "Contoso.MyException"
          ],
          "requirement_level": "required",
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.diagnostics.handler.type",
          "type": "string",
          "brief": "Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.",
          "examples": [
            "Contoso.MyHandler"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if the exception was handled by this handler."
          },
          "stability": "stable"
        },
        {
          "name": "aspnetcore.diagnostics.exception.result",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "handled",
                "value": "handled",
                "brief": "Exception was handled by the exception handling middleware.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unhandled",
                "value": "unhandled",
                "brief": "Exception was not handled by the exception handling middleware.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "skipped",
                "value": "skipped",
                "brief": "Exception handling was skipped because the response had started.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "aborted",
                "value": "aborted",
                "brief": "Exception handling didn't run because the request was aborted.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "ASP.NET Core exception middleware handling result",
          "examples": [
            "handled",
            "unhandled"
          ],
          "requirement_level": "required",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "aspnetcore.diagnostics.exceptions",
      "instrument": "counter",
      "unit": "{exception}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-aspnetcore.yaml",
        "attributes": {
          "aspnetcore.diagnostics.exception.result": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aspnetcore.diagnostics.handler.type": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.aspnetcore.rate_limiting.active_request_leases",
      "type": "metric",
      "brief": "Number of requests that are currently active on the server that hold a rate limiting lease.",
      "note": "Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "aspnetcore.rate_limiting.policy",
          "type": "string",
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "aspnetcore.rate_limiting.active_request_leases",
      "instrument": "updowncounter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-aspnetcore.yaml",
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.aspnetcore.rate_limiting.request_lease.duration",
      "type": "metric",
      "brief": "The duration of rate limiting lease held by requests on the server.",
      "note": "Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "aspnetcore.rate_limiting.policy",
          "type": "string",
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "aspnetcore.rate_limiting.request_lease.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-aspnetcore.yaml",
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.aspnetcore.rate_limiting.request.time_in_queue",
      "type": "metric",
      "brief": "The time the request spent in a queue waiting to acquire a rate limiting lease.",
      "note": "Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "aspnetcore.rate_limiting.result",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "acquired",
                "value": "acquired",
                "brief": "Lease was acquired",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "endpoint_limiter",
                "value": "endpoint_limiter",
                "brief": "Lease request was rejected by the endpoint limiter",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "global_limiter",
                "value": "global_limiter",
                "brief": "Lease request was rejected by the global limiter",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "request_canceled",
                "value": "request_canceled",
                "brief": "Lease request was canceled",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Rate-limiting result, shows whether the lease was acquired or contains a rejection reason",
          "examples": [
            "acquired",
            "request_canceled"
          ],
          "requirement_level": "required",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.rate_limiting.policy",
          "type": "string",
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "aspnetcore.rate_limiting.request.time_in_queue",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-aspnetcore.yaml",
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aspnetcore.rate_limiting.result": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.aspnetcore.rate_limiting.queued_requests",
      "type": "metric",
      "brief": "Number of requests that are currently queued, waiting to acquire a rate limiting lease.",
      "note": "Meter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "aspnetcore.rate_limiting.policy",
          "type": "string",
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "aspnetcore.rate_limiting.queued_requests",
      "instrument": "updowncounter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-aspnetcore.yaml",
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.aspnetcore.rate_limiting.requests",
      "type": "metric",
      "brief": "Number of requests that tried to acquire a rate limiting lease.",
      "note": "Requests could be:\n\n* Rejected by global or endpoint rate limiting policies\n* Canceled while waiting for the lease.\n\nMeter name: `Microsoft.AspNetCore.RateLimiting`; Added in: ASP.NET Core 8.0\n",
      "stability": "stable",
      "attributes": [
        {
          "name": "aspnetcore.rate_limiting.result",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "acquired",
                "value": "acquired",
                "brief": "Lease was acquired",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "endpoint_limiter",
                "value": "endpoint_limiter",
                "brief": "Lease request was rejected by the endpoint limiter",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "global_limiter",
                "value": "global_limiter",
                "brief": "Lease request was rejected by the global limiter",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "request_canceled",
                "value": "request_canceled",
                "brief": "Lease request was canceled",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Rate-limiting result, shows whether the lease was acquired or contains a rejection reason",
          "examples": [
            "acquired",
            "request_canceled"
          ],
          "requirement_level": "required",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.rate_limiting.policy",
          "type": "string",
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "requirement_level": {
            "conditionally_required": "if the matched endpoint for the request had a rate-limiting policy."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "aspnetcore.rate_limiting.requests",
      "instrument": "counter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/dotnet/dotnet-aspnetcore.yaml",
        "attributes": {
          "aspnetcore.rate_limiting.policy": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aspnetcore.rate_limiting.result": {
            "source_group": "registry.aspnetcore",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.k8s",
      "type": "attribute_group",
      "brief": "Kubernetes resource attributes.\n",
      "prefix": "k8s",
      "attributes": [
        {
          "name": "k8s.cluster.name",
          "type": "string",
          "brief": "The name of the cluster.\n",
          "examples": [
            "opentelemetry-cluster"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.cluster.uid",
          "type": "string",
          "brief": "A pseudo-ID for the cluster, set to the UID of the `kube-system` namespace.\n",
          "examples": [
            "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
          ],
          "requirement_level": "recommended",
          "note": "K8s doesn't have support for obtaining a cluster ID. If this is ever\nadded, we will recommend collecting the `k8s.cluster.uid` through the\nofficial APIs. In the meantime, we are able to use the `uid` of the\n`kube-system` namespace as a proxy for cluster ID. Read on for the\nrationale.\n\nEvery object created in a K8s cluster is assigned a distinct UID. The\n`kube-system` namespace is used by Kubernetes itself and will exist\nfor the lifetime of the cluster. Using the `uid` of the `kube-system`\nnamespace is a reasonable proxy for the K8s ClusterID as it will only\nchange if the cluster is rebuilt. Furthermore, Kubernetes UIDs are\nUUIDs as standardized by\n[ISO/IEC 9834-8 and ITU-T X.667](https://www.itu.int/ITU-T/studygroups/com17/oid.html).\nWhich states:\n\n> If generated according to one of the mechanisms defined in Rec.\n  ITU-T X.667 | ISO/IEC 9834-8, a UUID is either guaranteed to be\n  different from all other UUIDs generated before 3603 A.D., or is\n  extremely likely to be different (depending on the mechanism chosen).\n\nTherefore, UIDs between clusters should be extremely unlikely to\nconflict.\n",
          "stability": "experimental"
        },
        {
          "name": "k8s.node.name",
          "type": "string",
          "brief": "The name of the Node.\n",
          "examples": [
            "node-1"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.node.uid",
          "type": "string",
          "brief": "The UID of the Node.\n",
          "examples": [
            "1eb3a0c6-0477-4080-a9cb-0cb7db65c6a2"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.namespace.name",
          "type": "string",
          "brief": "The name of the namespace that the pod is running in.\n",
          "examples": [
            "default"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.pod.uid",
          "type": "string",
          "brief": "The UID of the Pod.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.pod.name",
          "type": "string",
          "brief": "The name of the Pod.\n",
          "examples": [
            "opentelemetry-pod-autoconf"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.pod.label",
          "type": "template[string]",
          "brief": "The label key-value pairs placed on the Pod, the `<key>` being the label name, the value being the label value.\n",
          "examples": [
            "k8s.pod.label.app=my-app",
            "k8s.pod.label.mycompany.io/arch=x64",
            "k8s.pod.label.data="
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.pod.annotation",
          "type": "template[string]",
          "brief": "The annotation key-value pairs placed on the Pod, the `<key>` being the annotation name, the value being the annotation value.\n",
          "examples": [
            "k8s.pod.annotation.kubernetes.io/enforce-mountable-secrets=true",
            "k8s.pod.annotation.mycompany.io/arch=x64",
            "k8s.pod.annotation.data="
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.container.name",
          "type": "string",
          "brief": "The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (`container.name`).\n",
          "examples": [
            "redis"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.container.restart_count",
          "type": "int",
          "brief": "Number of times the container was restarted. This attribute can be used to identify a particular container (running or stopped) within a container spec.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.container.status.last_terminated_reason",
          "type": "string",
          "brief": "Last terminated reason of the Container.\n",
          "examples": [
            "Evicted",
            "Error"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.replicaset.uid",
          "type": "string",
          "brief": "The UID of the ReplicaSet.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.replicaset.name",
          "type": "string",
          "brief": "The name of the ReplicaSet.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.deployment.uid",
          "type": "string",
          "brief": "The UID of the Deployment.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.deployment.name",
          "type": "string",
          "brief": "The name of the Deployment.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.statefulset.uid",
          "type": "string",
          "brief": "The UID of the StatefulSet.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.statefulset.name",
          "type": "string",
          "brief": "The name of the StatefulSet.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.daemonset.uid",
          "type": "string",
          "brief": "The UID of the DaemonSet.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.daemonset.name",
          "type": "string",
          "brief": "The name of the DaemonSet.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.job.uid",
          "type": "string",
          "brief": "The UID of the Job.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.job.name",
          "type": "string",
          "brief": "The name of the Job.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.cronjob.uid",
          "type": "string",
          "brief": "The UID of the CronJob.\n",
          "examples": [
            "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "k8s.cronjob.name",
          "type": "string",
          "brief": "The name of the CronJob.\n",
          "examples": [
            "opentelemetry"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/k8s.yaml"
      }
    },
    {
      "id": "registry.cpu",
      "type": "attribute_group",
      "brief": "Attributes specific to a cpu instance.",
      "prefix": "cpu",
      "attributes": [
        {
          "name": "cpu.mode",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The mode of the CPU",
          "examples": [
            "user",
            "system"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/cpu.yaml"
      }
    },
    {
      "id": "registry.rpc",
      "type": "attribute_group",
      "brief": "This document defines attributes for remote procedure calls.",
      "prefix": "rpc",
      "attributes": [
        {
          "name": "rpc.connect_rpc.error_code",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "cancelled",
                "value": "cancelled",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unknown",
                "value": "unknown",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "invalid_argument",
                "value": "invalid_argument",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "deadline_exceeded",
                "value": "deadline_exceeded",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "not_found",
                "value": "not_found",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "already_exists",
                "value": "already_exists",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "permission_denied",
                "value": "permission_denied",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "resource_exhausted",
                "value": "resource_exhausted",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "failed_precondition",
                "value": "failed_precondition",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aborted",
                "value": "aborted",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "out_of_range",
                "value": "out_of_range",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unimplemented",
                "value": "unimplemented",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "internal",
                "value": "internal",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unavailable",
                "value": "unavailable",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "data_loss",
                "value": "data_loss",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unauthenticated",
                "value": "unauthenticated",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The [error codes](https://connect.build/docs/protocol/#error-codes) of the Connect request. Error codes are always string values.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "rpc.connect_rpc.request.metadata",
          "type": "template[string[]]",
          "brief": "Connect request metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.request.metadata.my-custom-metadata-attribute=[\"1.2.3.4\", \"1.2.3.5\"]"
          ],
          "requirement_level": "recommended",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.connect_rpc.response.metadata",
          "type": "template[string[]]",
          "brief": "Connect response metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.response.metadata.my-custom-metadata-attribute=[\"attribute_value\"]"
          ],
          "requirement_level": "recommended",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.grpc.status_code",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ok",
                "value": 0,
                "brief": "OK",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cancelled",
                "value": 1,
                "brief": "CANCELLED",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unknown",
                "value": 2,
                "brief": "UNKNOWN",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "invalid_argument",
                "value": 3,
                "brief": "INVALID_ARGUMENT",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "deadline_exceeded",
                "value": 4,
                "brief": "DEADLINE_EXCEEDED",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "not_found",
                "value": 5,
                "brief": "NOT_FOUND",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "already_exists",
                "value": 6,
                "brief": "ALREADY_EXISTS",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "permission_denied",
                "value": 7,
                "brief": "PERMISSION_DENIED",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "resource_exhausted",
                "value": 8,
                "brief": "RESOURCE_EXHAUSTED",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "failed_precondition",
                "value": 9,
                "brief": "FAILED_PRECONDITION",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aborted",
                "value": 10,
                "brief": "ABORTED",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "out_of_range",
                "value": 11,
                "brief": "OUT_OF_RANGE",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unimplemented",
                "value": 12,
                "brief": "UNIMPLEMENTED",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "internal",
                "value": 13,
                "brief": "INTERNAL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unavailable",
                "value": 14,
                "brief": "UNAVAILABLE",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "data_loss",
                "value": 15,
                "brief": "DATA_LOSS",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unauthenticated",
                "value": 16,
                "brief": "UNAUTHENTICATED",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "rpc.grpc.request.metadata",
          "type": "template[string[]]",
          "brief": "gRPC request metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.grpc.request.metadata.my-custom-metadata-attribute=[\"1.2.3.4\", \"1.2.3.5\"]"
          ],
          "requirement_level": "recommended",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.grpc.response.metadata",
          "type": "template[string[]]",
          "brief": "gRPC response metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.\n",
          "examples": [
            "rpc.grpc.response.metadata.my-custom-metadata-attribute=[\"attribute_value\"]"
          ],
          "requirement_level": "recommended",
          "note": "Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured. Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.jsonrpc.error_code",
          "type": "int",
          "brief": "`error.code` property of response if it is an error response.",
          "examples": [
            -32700,
            100
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "rpc.jsonrpc.error_message",
          "type": "string",
          "brief": "`error.message` property of response if it is an error response.",
          "examples": [
            "Parse error",
            "User already exists"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "rpc.jsonrpc.request_id",
          "type": "string",
          "brief": "`id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n",
          "examples": [
            "10",
            "request-7",
            ""
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "rpc.jsonrpc.version",
          "type": "string",
          "brief": "Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 doesn't specify this, the value can be omitted.",
          "examples": [
            "2.0",
            "1.0"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the (logical) method being called, must be equal to the $method part in the span name.",
          "examples": "exampleMethod",
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The full (logical) name of the service being called, including its package name, if applicable.",
          "examples": "myservice.EchoService",
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "A string identifying the remoting system. See below for a list of well-known identifiers.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "rpc.message.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "sent",
                "value": "SENT",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "received",
                "value": "RECEIVED",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Whether this is a received or sent message.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "rpc.message.id",
          "type": "int",
          "brief": "MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.",
          "requirement_level": "recommended",
          "note": "This way we guarantee that the values will be consistent between different implementations.",
          "stability": "experimental"
        },
        {
          "name": "rpc.message.compressed_size",
          "type": "int",
          "brief": "Compressed size of the message in bytes.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "rpc.message.uncompressed_size",
          "type": "int",
          "brief": "Uncompressed size of the message in bytes.",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/rpc.yaml"
      }
    },
    {
      "id": "otel_span",
      "type": "span",
      "brief": "Span attributes used by non-OTLP exporters to represent OpenTelemetry Span's concepts.",
      "attributes": [
        {
          "name": "otel.status_code",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ok",
                "value": "OK",
                "brief": "The operation has been validated by an Application developer or Operator to have completed successfully.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "error",
                "value": "ERROR",
                "brief": "The operation contains an error.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Name of the code, either \"OK\" or \"ERROR\". MUST NOT be set if the status code is UNSET.",
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "otel.status_description",
          "type": "string",
          "brief": "Description of the Status if it has a value, otherwise not set.",
          "examples": [
            "resource not found"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/exporter/exporter.yaml",
        "attributes": {
          "otel.status_code": {
            "source_group": "registry.otel",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "otel.status_description": {
            "source_group": "registry.otel",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "client",
      "type": "attribute_group",
      "brief": "General client attributes.\n",
      "attributes": [
        {
          "name": "client.address",
          "type": "string",
          "brief": "Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "client.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.address` SHOULD represent the client address behind any intermediaries,  for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "client.port",
          "type": "int",
          "brief": "Client port number.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries,  for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/general.yaml",
        "attributes": {
          "client.address": {
            "source_group": "registry.client",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "client.port": {
            "source_group": "registry.client",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "server",
      "type": "attribute_group",
      "brief": "General server attributes.\n",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/general.yaml",
        "attributes": {
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "source",
      "type": "attribute_group",
      "brief": "General source attributes.\n",
      "attributes": [
        {
          "name": "source.address",
          "type": "string",
          "brief": "Source address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "source.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the destination side, and when communicating through an intermediary, `source.address` SHOULD represent the source address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "experimental"
        },
        {
          "name": "source.port",
          "type": "int",
          "brief": "Source port number",
          "examples": [
            3389,
            2888
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/general.yaml",
        "attributes": {
          "source.address": {
            "source_group": "registry.source",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "source.port": {
            "source_group": "registry.source",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "destination",
      "type": "attribute_group",
      "brief": "General destination attributes.\n",
      "attributes": [
        {
          "name": "destination.address",
          "type": "string",
          "brief": "Destination address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "destination.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the source side, and when communicating through an intermediary, `destination.address` SHOULD represent the destination address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "experimental"
        },
        {
          "name": "destination.port",
          "type": "int",
          "brief": "Destination port number",
          "examples": [
            3389,
            2888
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/general.yaml",
        "attributes": {
          "destination.address": {
            "source_group": "registry.destination",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "destination.port": {
            "source_group": "registry.destination",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "peer",
      "type": "span",
      "brief": "Operations that access some remote service.",
      "prefix": "peer",
      "attributes": [
        {
          "name": "peer.service",
          "type": "string",
          "brief": "The [`service.name`](/docs/resource/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n",
          "examples": "AuthTokenCache",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/general.yaml",
        "attributes": {
          "peer.service": {
            "source_group": "registry.peer",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "identity",
      "type": "span",
      "brief": "These attributes may be used for any operation with an authenticated and/or authorized enduser.\n",
      "attributes": [
        {
          "name": "enduser.id",
          "type": "string",
          "brief": "Deprecated, use `user.id` instead.",
          "examples": "username",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `user.id` attribute."
        },
        {
          "name": "enduser.role",
          "type": "string",
          "brief": "Deprecated, use `user.roles` instead.",
          "examples": "admin",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `user.roles` attribute."
        },
        {
          "name": "enduser.scope",
          "type": "string",
          "brief": "Deprecated, no replacement at this time.",
          "examples": "read:message, write:files",
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Removed."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/general.yaml",
        "attributes": {
          "enduser.id": {
            "source_group": "registry.enduser.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "enduser.role": {
            "source_group": "registry.enduser.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "enduser.scope": {
            "source_group": "registry.enduser.deprecated",
            "inherited_fields": [
              "brief",
              "deprecated",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "thread",
      "type": "span",
      "brief": "These attributes may be used for any operation to store information about a thread that started a span.\n",
      "attributes": [
        {
          "name": "thread.id",
          "type": "int",
          "brief": "Current \"managed\" thread ID (as opposed to OS thread ID).\n",
          "examples": 42,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "thread.name",
          "type": "string",
          "brief": "Current thread name.\n",
          "examples": "main",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/general.yaml",
        "attributes": {
          "thread.id": {
            "source_group": "registry.thread",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "thread.name": {
            "source_group": "registry.thread",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "code",
      "type": "span",
      "brief": "These attributes allow to report this unit of code and therefore to provide more context about the span.\n",
      "attributes": [
        {
          "name": "code.function",
          "type": "string",
          "brief": "The method or function name, or equivalent (usually rightmost part of the code unit's name).\n",
          "examples": "serveRequest",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "code.namespace",
          "type": "string",
          "brief": "The \"namespace\" within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n",
          "examples": "com.example.MyHttpService",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "code.filepath",
          "type": "string",
          "brief": "The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n",
          "examples": "/usr/local/MyApplication/content_root/app/index.php",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "code.lineno",
          "type": "int",
          "brief": "The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n",
          "examples": 42,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "code.column",
          "type": "int",
          "brief": "The column number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n",
          "examples": 16,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "code.stacktrace",
          "type": "string",
          "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n",
          "examples": "at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)",
          "requirement_level": "opt_in",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/general.yaml",
        "attributes": {
          "code.column": {
            "source_group": "registry.code",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "code.filepath": {
            "source_group": "registry.code",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "code.function": {
            "source_group": "registry.code",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "code.lineno": {
            "source_group": "registry.code",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "code.namespace": {
            "source_group": "registry.code",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "code.stacktrace": {
            "source_group": "registry.code",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.memory.init",
      "type": "metric",
      "brief": "Measure of initial memory requested.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "jvm.memory.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "heap",
                "value": "heap",
                "brief": "Heap memory.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "non_heap",
                "value": "non_heap",
                "brief": "Non-heap memory",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "heap",
            "non_heap"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "jvm.memory.pool.name",
          "type": "string",
          "brief": "Name of the memory pool.",
          "examples": [
            "G1 Old Gen",
            "G1 Eden space",
            "G1 Survivor Space"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.memory.init",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics-experimental.yaml",
        "attributes": {
          "jvm.memory.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "jvm.memory.type": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.system.cpu.utilization",
      "type": "metric",
      "brief": "Recent CPU utilization for the whole system as reported by the JVM.",
      "note": "The value range is [0.0,1.0]. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getCpuLoad()).\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.system.cpu.utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics-experimental.yaml"
      }
    },
    {
      "id": "metric.jvm.system.cpu.load_1m",
      "type": "metric",
      "brief": "Average CPU load of the whole system for the last minute as reported by the JVM.",
      "note": "The value range is [0,n], where n is the number of CPU cores - or a negative number if the value is not available. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/java.management/java/lang/management/OperatingSystemMXBean.html#getSystemLoadAverage()).\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.system.cpu.load_1m",
      "instrument": "gauge",
      "unit": "{run_queue_item}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics-experimental.yaml"
      }
    },
    {
      "id": "attributes.jvm.buffer",
      "type": "attribute_group",
      "brief": "Describes JVM buffer metric attributes.",
      "prefix": "jvm.buffer",
      "attributes": [
        {
          "name": "jvm.buffer.pool.name",
          "type": "string",
          "brief": "Name of the buffer pool.",
          "examples": [
            "mapped",
            "direct"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics-experimental.yaml",
        "attributes": {
          "jvm.buffer.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.buffer.memory.usage",
      "type": "metric",
      "brief": "Measure of memory used by buffers.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "jvm.buffer.pool.name",
          "type": "string",
          "brief": "Name of the buffer pool.",
          "examples": [
            "mapped",
            "direct"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.buffer.memory.usage",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics-experimental.yaml",
        "attributes": {
          "jvm.buffer.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.buffer.memory.limit",
      "type": "metric",
      "brief": "Measure of total memory capacity of buffers.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "jvm.buffer.pool.name",
          "type": "string",
          "brief": "Name of the buffer pool.",
          "examples": [
            "mapped",
            "direct"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.buffer.memory.limit",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics-experimental.yaml",
        "attributes": {
          "jvm.buffer.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.jvm.buffer.count",
      "type": "metric",
      "brief": "Number of buffers in the pool.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "jvm.buffer.pool.name",
          "type": "string",
          "brief": "Name of the buffer pool.",
          "examples": [
            "mapped",
            "direct"
          ],
          "requirement_level": "recommended",
          "note": "Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "jvm.buffer.count",
      "instrument": "updowncounter",
      "unit": "{buffer}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/jvm-metrics-experimental.yaml",
        "attributes": {
          "jvm.buffer.pool.name": {
            "source_group": "registry.jvm",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric_attributes.http.server",
      "type": "attribute_group",
      "brief": "HTTP server attributes",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "required",
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's available"
          },
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/http.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.route": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric_attributes.http.client",
      "type": "attribute_group",
      "brief": "HTTP client attributes",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Host identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/http.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric_attributes.http.client.experimental",
      "type": "attribute_group",
      "brief": "HTTP client experimental attributes",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Host identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.\n",
          "stability": "experimental"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/http.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "url.template": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.server.request.duration",
      "type": "metric",
      "brief": "Duration of HTTP server requests.",
      "stability": "stable",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "required",
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's available"
          },
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.server.request.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/http.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.route": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.server.active_requests",
      "type": "metric",
      "brief": "Number of active HTTP server requests.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "required",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.server.active_requests",
      "instrument": "updowncounter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/http.yaml",
        "attributes": {
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.server.request.body.size",
      "type": "metric",
      "brief": "Size of HTTP server request bodies.",
      "note": "The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "required",
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's available"
          },
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.server.request.body.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/http.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.route": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.server.response.body.size",
      "type": "metric",
      "brief": "Size of HTTP server response bodies.",
      "note": "The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the local HTTP server that received the request.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port of the local HTTP server that received the request.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "opt_in",
          "note": "See [Setting `server.address` and `server.port` attributes](/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes).\n> **Warning**\n> Since this attribute is based on HTTP headers, opting in to it may allow an attacker\n> to trigger cardinality limits, degrading the usefulness of the metric.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "required",
          "note": "The scheme of the original client request, if known (e.g. from [Forwarded#proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/Forwarded#proto), [X-Forwarded-Proto](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-Proto), or a similar header). Otherwise, the scheme of the immediate peer request.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it's available"
          },
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.server.response.body.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/http.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.route": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.client.request.duration",
      "type": "metric",
      "brief": "Duration of HTTP client requests.",
      "stability": "stable",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Host identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.client.request.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/http.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.client.request.body.size",
      "type": "metric",
      "brief": "Size of HTTP client request bodies.",
      "note": "The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Host identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.\n",
          "stability": "experimental"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.client.request.body.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/http.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "url.template": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.client.response.body.size",
      "type": "metric",
      "brief": "Size of HTTP client response bodies.",
      "note": "The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If request has ended with an error."
          },
          "note": "If the request fails with an error before response status code was sent or received,\n`error.type` SHOULD be set to exception type (its fully-qualified class name, if applicable)\nor a component-specific low cardinality error identifier.\n\nIf response status code was sent or received and status indicates an error according to [HTTP span status definition](/docs/http/http-spans.md),\n`error.type` SHOULD be set to the status code number (represented as a string), an exception type (if thrown) or a component-specific error identifier.\n\nThe `error.type` value SHOULD be predictable and SHOULD have low cardinality.\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low, but\ntelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time, when no\nadditional filters are applied.\n\nIf the request has completed successfully, instrumentations SHOULD NOT set `error.type`.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Host identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "If an HTTP client request is explicitly made to an IP address, e.g. `http://x.x.x.x:8080`, then `server.address` SHOULD be the IP address `x.x.x.x`. A DNS lookup SHOULD NOT be used.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.\n",
          "stability": "experimental"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": {
            "conditionally_required": "If and only if one was received/sent."
          },
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "http",
            "spdy"
          ],
          "requirement_level": {
            "conditionally_required": "If not `http` and `network.protocol.version` is set."
          },
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.0",
            "1.1",
            "2",
            "3"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.client.response.body.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/http.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "http.response.status_code": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.name": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "url.template": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.client.open_connections",
      "type": "metric",
      "brief": "Number of outbound HTTP connections that are currently active or idle on the client.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "http.connection.state",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "active",
                "value": "active",
                "brief": "active state.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": "idle state.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "State of the HTTP connection in the HTTP connection pool.",
          "examples": [
            "active",
            "idle"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.client.open_connections",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/http.yaml",
        "attributes": {
          "http.connection.state": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.client.connection.duration",
      "type": "metric",
      "brief": "The duration of the successfully established outbound HTTP connections.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.client.connection.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/http.yaml",
        "attributes": {
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "network.protocol.version": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.http.client.active_requests",
      "type": "metric",
      "brief": "Number of active HTTP requests.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Port identifier of the [\"URI origin\"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.\n",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "url.scheme",
          "type": "string",
          "brief": "The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n",
          "examples": [
            "http",
            "https"
          ],
          "requirement_level": "opt_in",
          "stability": "stable"
        },
        {
          "name": "url.template",
          "type": "string",
          "brief": "The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).\n",
          "examples": [
            "/users/{id}",
            "/users/:id",
            "/users?id={id}"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "The `url.template` MUST have low cardinality. It is not usually available on HTTP clients, but may be known by the application or specialized HTTP instrumentation.\n",
          "stability": "experimental"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "required",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "recommended",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "http.client.active_requests",
      "instrument": "updowncounter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/http.yaml",
        "attributes": {
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "url.scheme": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "url.template": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.opentracing",
      "type": "attribute_group",
      "brief": "Attributes used by the OpenTracing Shim layer.",
      "prefix": "opentracing",
      "attributes": [
        {
          "name": "opentracing.ref_type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "child_of",
                "value": "child_of",
                "brief": "The parent Span depends on the child Span in some capacity",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "follows_from",
                "value": "follows_from",
                "brief": "The parent Span doesn't depend in any way on the result of the child Span",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Parent-child Reference type",
          "requirement_level": "recommended",
          "note": "The causal relationship between a child Span and a parent Span.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/opentracing.yaml"
      }
    },
    {
      "id": "registry.tls",
      "type": "attribute_group",
      "brief": "This document defines semantic convention attributes in the TLS namespace.",
      "prefix": "tls",
      "attributes": [
        {
          "name": "tls.cipher",
          "type": "string",
          "brief": "String indicating the [cipher](https://datatracker.ietf.org/doc/html/rfc5246#appendix-A.5) used during the current connection.\n",
          "examples": [
            "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
            "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
          ],
          "requirement_level": "recommended",
          "note": "The values allowed for `tls.cipher` MUST be one of the `Descriptions` of the [registered TLS Cipher Suits](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#table-tls-parameters-4).\n",
          "stability": "experimental"
        },
        {
          "name": "tls.client.certificate",
          "type": "string",
          "brief": "PEM-encoded stand-alone certificate offered by the client. This is usually mutually-exclusive of `client.certificate_chain` since this value also exists in that list.\n",
          "examples": [
            "MII..."
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.client.certificate_chain",
          "type": "string[]",
          "brief": "Array of PEM-encoded certificates that make up the certificate chain offered by the client. This is usually mutually-exclusive of `client.certificate` since that value should be the first certificate in the chain.\n",
          "examples": [
            "MII...",
            "MI..."
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.client.hash.md5",
          "type": "string",
          "brief": "Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.\n",
          "examples": [
            "0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.client.hash.sha1",
          "type": "string",
          "brief": "Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.\n",
          "examples": [
            "9E393D93138888D288266C2D915214D1D1CCEB2A"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.client.hash.sha256",
          "type": "string",
          "brief": "Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.\n",
          "examples": [
            "0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.client.issuer",
          "type": "string",
          "brief": "Distinguished name of [subject](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6) of the issuer of the x.509 certificate presented by the client.",
          "examples": [
            "CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.client.ja3",
          "type": "string",
          "brief": "A hash that identifies clients based on how they perform an SSL/TLS handshake.",
          "examples": [
            "d4e5b18d6b55c71272893221c96ba240"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.client.not_after",
          "type": "string",
          "brief": "Date/Time indicating when client certificate is no longer considered valid.",
          "examples": [
            "2021-01-01T00:00:00.000Z"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.client.not_before",
          "type": "string",
          "brief": "Date/Time indicating when client certificate is first considered valid.",
          "examples": [
            "1970-01-01T00:00:00.000Z"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.client.server_name",
          "type": "string",
          "brief": "Also called an SNI, this tells the server which hostname to which the client is attempting to connect to.",
          "examples": [
            "opentelemetry.io"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.client.subject",
          "type": "string",
          "brief": "Distinguished name of subject of the x.509 certificate presented by the client.",
          "examples": [
            "CN=myclient, OU=Documentation Team, DC=example, DC=com"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.client.supported_ciphers",
          "type": "string[]",
          "brief": "Array of ciphers offered by the client during the client hello.",
          "examples": [
            "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
            "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
            "..."
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.curve",
          "type": "string",
          "brief": "String indicating the curve used for the given cipher, when applicable",
          "examples": [
            "secp256r1"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.established",
          "type": "boolean",
          "brief": "Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.",
          "examples": [
            true
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.next_protocol",
          "type": "string",
          "brief": "String indicating the protocol being tunneled. Per the values in the [IANA registry](https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids), this string should be lower case.\n",
          "examples": [
            "http/1.1"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.protocol.name",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ssl",
                "value": "ssl",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "tls",
                "value": "tls",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Normalized lowercase protocol name parsed from original string of the negotiated [SSL/TLS protocol version](https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html#RETURN-VALUES)\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.protocol.version",
          "type": "string",
          "brief": "Numeric part of the version parsed from the original string of the negotiated [SSL/TLS protocol version](https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html#RETURN-VALUES)\n",
          "examples": [
            "1.2",
            "3"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.resumed",
          "type": "boolean",
          "brief": "Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.",
          "examples": [
            true
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.server.certificate",
          "type": "string",
          "brief": "PEM-encoded stand-alone certificate offered by the server. This is usually mutually-exclusive of `server.certificate_chain` since this value also exists in that list.\n",
          "examples": [
            "MII..."
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.server.certificate_chain",
          "type": "string[]",
          "brief": "Array of PEM-encoded certificates that make up the certificate chain offered by the server. This is usually mutually-exclusive of `server.certificate` since that value should be the first certificate in the chain.\n",
          "examples": [
            "MII...",
            "MI..."
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.server.hash.md5",
          "type": "string",
          "brief": "Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.\n",
          "examples": [
            "0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.server.hash.sha1",
          "type": "string",
          "brief": "Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.\n",
          "examples": [
            "9E393D93138888D288266C2D915214D1D1CCEB2A"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.server.hash.sha256",
          "type": "string",
          "brief": "Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.\n",
          "examples": [
            "0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.server.issuer",
          "type": "string",
          "brief": "Distinguished name of [subject](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6) of the issuer of the x.509 certificate presented by the client.",
          "examples": [
            "CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.server.ja3s",
          "type": "string",
          "brief": "A hash that identifies servers based on how they perform an SSL/TLS handshake.",
          "examples": [
            "d4e5b18d6b55c71272893221c96ba240"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.server.not_after",
          "type": "string",
          "brief": "Date/Time indicating when server certificate is no longer considered valid.",
          "examples": [
            "2021-01-01T00:00:00.000Z"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.server.not_before",
          "type": "string",
          "brief": "Date/Time indicating when server certificate is first considered valid.",
          "examples": [
            "1970-01-01T00:00:00.000Z"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "tls.server.subject",
          "type": "string",
          "brief": "Distinguished name of subject of the x.509 certificate presented by the server.",
          "examples": [
            "CN=myserver, OU=Documentation Team, DC=example, DC=com"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/tls.yaml"
      }
    },
    {
      "id": "registry.thread",
      "type": "attribute_group",
      "brief": "These attributes may be used for any operation to store information about a thread that started a span.\n",
      "prefix": "thread",
      "attributes": [
        {
          "name": "thread.id",
          "type": "int",
          "brief": "Current \"managed\" thread ID (as opposed to OS thread ID).\n",
          "examples": 42,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "thread.name",
          "type": "string",
          "brief": "Current thread name.\n",
          "examples": "main",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/thread.yaml"
      }
    },
    {
      "id": "registry.source",
      "type": "attribute_group",
      "brief": "These attributes may be used to describe the sender of a network exchange/packet. These should be used when there is no client/server relationship between the two sides, or when that relationship is unknown. This covers low-level network interactions (e.g. packet tracing) where you don't know if there was a connection or which side initiated it. This also covers unidirectional UDP flows and peer-to-peer communication where the \"user-facing\" surface of the protocol / API doesn't expose a clear notion of client and server.\n",
      "prefix": "source",
      "attributes": [
        {
          "name": "source.address",
          "type": "string",
          "brief": "Source address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "source.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the destination side, and when communicating through an intermediary, `source.address` SHOULD represent the source address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "experimental"
        },
        {
          "name": "source.port",
          "type": "int",
          "brief": "Source port number",
          "examples": [
            3389,
            2888
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/source.yaml"
      }
    },
    {
      "id": "registry.go",
      "type": "attribute_group",
      "brief": "This document defines Go related attributes.\n",
      "prefix": "go",
      "attributes": [
        {
          "name": "go.memory.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "stack",
                "value": "stack",
                "brief": "Memory allocated from the heap that is reserved for stack space, whether or not it is currently in-use.",
                "note": "Computed from `/memory/classes/heap/stacks:bytes`.\n",
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "Memory used by the Go runtime, excluding other categories of memory usage described in this enumeration.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "other",
            "stack"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/go.yaml"
      }
    },
    {
      "id": "registry.browser",
      "type": "attribute_group",
      "brief": "The web browser attributes\n",
      "prefix": "browser",
      "attributes": [
        {
          "name": "browser.brands",
          "type": "string[]",
          "brief": "Array of brand name and version separated by a space",
          "examples": [
            " Not A;Brand 99",
            "Chromium 99",
            "Chrome 99"
          ],
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.brands`).\n",
          "stability": "experimental"
        },
        {
          "name": "browser.platform",
          "type": "string",
          "brief": "The platform on which the browser is running",
          "examples": [
            "Windows",
            "macOS",
            "Android"
          ],
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.platform`). If unavailable, the legacy `navigator.platform` API SHOULD NOT be used instead and this attribute SHOULD be left unset in order for the values to be consistent.\nThe list of possible values is defined in the [W3C User-Agent Client Hints specification](https://wicg.github.io/ua-client-hints/#sec-ch-ua-platform). Note that some (but not all) of these values can overlap with values in the [`os.type` and `os.name` attributes](./os.md). However, for consistency, the values in the `browser.platform` attribute should capture the exact value that the user agent provides.\n",
          "stability": "experimental"
        },
        {
          "name": "browser.mobile",
          "type": "boolean",
          "brief": "A boolean that is true if the browser is running on a mobile device",
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.mobile`). If unavailable, this attribute SHOULD be left unset.\n",
          "stability": "experimental"
        },
        {
          "name": "browser.language",
          "type": "string",
          "brief": "Preferred language of the user using the browser",
          "examples": [
            "en",
            "en-US",
            "fr",
            "fr-FR"
          ],
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the Navigator API `navigator.language`.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/browser.yaml"
      }
    },
    {
      "id": "aws.lambda",
      "type": "span",
      "brief": "Span attributes used by AWS Lambda (in addition to general `faas` attributes).\n",
      "attributes": [
        {
          "name": "aws.lambda.invoked_arn",
          "type": "string",
          "brief": "The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n",
          "examples": [
            "arn:aws:lambda:us-east-1:123456:function:myfunction:myalias"
          ],
          "requirement_level": "recommended",
          "note": "This may be different from `cloud.resource_id` if an alias is involved.",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/aws/lambda.yaml",
        "attributes": {
          "aws.lambda.invoked_arn": {
            "source_group": "registry.aws.lambda",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.log",
      "type": "attribute_group",
      "brief": "Describes Log attributes",
      "attributes": [
        {
          "name": "log.iostream",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "stdout",
                "value": "stdout",
                "brief": "Logs from stdout stream",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "stderr",
                "value": "stderr",
                "brief": "Events from stderr stream",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The stream associated with the log. See below for a list of well-known values.\n",
          "requirement_level": "opt_in",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/logs/media.yaml",
        "attributes": {
          "log.iostream": {
            "source_group": "registry.log",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.log.file",
      "type": "attribute_group",
      "brief": "A file to which log was emitted.\n",
      "attributes": [
        {
          "name": "log.file.name",
          "type": "string",
          "brief": "The basename of the file.\n",
          "examples": [
            "audit.log"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "log.file.path",
          "type": "string",
          "brief": "The full path to the file.\n",
          "examples": [
            "/var/log/mysql/audit.log"
          ],
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "log.file.name_resolved",
          "type": "string",
          "brief": "The basename of the file, with symlinks resolved.\n",
          "examples": [
            "uuid.log"
          ],
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "log.file.path_resolved",
          "type": "string",
          "brief": "The full path to the file, with symlinks resolved.\n",
          "examples": [
            "/var/lib/docker/uuid.log"
          ],
          "requirement_level": "opt_in",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/logs/media.yaml",
        "attributes": {
          "log.file.name": {
            "source_group": "registry.log.file",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "log.file.name_resolved": {
            "source_group": "registry.log.file",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "log.file.path": {
            "source_group": "registry.log.file",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "log.file.path_resolved": {
            "source_group": "registry.log.file",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.metrics.rpc",
      "type": "attribute_group",
      "brief": "Describes RPC metric attributes.",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the (logical) method being called, must be equal to the $method part in the span name.",
          "examples": "exampleMethod",
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The full (logical) name of the service being called, including its package name, if applicable.",
          "examples": "myservice.EchoService",
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "A string identifying the remoting system. See below for a list of well-known identifiers.",
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/rpc-metrics.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "network.type": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.rpc.server.duration",
      "type": "metric",
      "brief": "Measures the duration of inbound RPC.",
      "note": "While streaming RPCs may record this metric as start-of-batch\nto end-of-batch, it's hard to interpret in practice.\n\n**Streaming**: N/A.\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.server.duration",
      "instrument": "histogram",
      "unit": "ms",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/rpc-metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.server.request.size",
      "type": "metric",
      "brief": "Measures the size of RPC request messages (uncompressed).",
      "note": "**Streaming**: Recorded per message in a streaming batch\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.server.request.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/rpc-metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.server.response.size",
      "type": "metric",
      "brief": "Measures the size of RPC response messages (uncompressed).",
      "note": "**Streaming**: Recorded per response in a streaming batch\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.server.response.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/rpc-metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.server.requests_per_rpc",
      "type": "metric",
      "brief": "Measures the number of messages received per RPC.",
      "note": "Should be 1 for all non-streaming RPCs.\n\n**Streaming** : This metric is required for server and client streaming RPCs\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.server.requests_per_rpc",
      "instrument": "histogram",
      "unit": "{count}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/rpc-metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.server.responses_per_rpc",
      "type": "metric",
      "brief": "Measures the number of messages sent per RPC.",
      "note": "Should be 1 for all non-streaming RPCs.\n\n**Streaming**: This metric is required for server and client streaming RPCs\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.server.responses_per_rpc",
      "instrument": "histogram",
      "unit": "{count}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/rpc-metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.client.duration",
      "type": "metric",
      "brief": "Measures the duration of outbound RPC.",
      "note": "While streaming RPCs may record this metric as start-of-batch\nto end-of-batch, it's hard to interpret in practice.\n\n**Streaming**: N/A.\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.client.duration",
      "instrument": "histogram",
      "unit": "ms",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/rpc-metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.client.request.size",
      "type": "metric",
      "brief": "Measures the size of RPC request messages (uncompressed).",
      "note": "**Streaming**: Recorded per message in a streaming batch\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.client.request.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/rpc-metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.client.response.size",
      "type": "metric",
      "brief": "Measures the size of RPC response messages (uncompressed).",
      "note": "**Streaming**: Recorded per response in a streaming batch\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.client.response.size",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/rpc-metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.client.requests_per_rpc",
      "type": "metric",
      "brief": "Measures the number of messages received per RPC.",
      "note": "Should be 1 for all non-streaming RPCs.\n\n**Streaming**: This metric is required for server and client streaming RPCs\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.client.requests_per_rpc",
      "instrument": "histogram",
      "unit": "{count}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/rpc-metrics.yaml"
      }
    },
    {
      "id": "metric.rpc.client.responses_per_rpc",
      "type": "metric",
      "brief": "Measures the number of messages sent per RPC.",
      "note": "Should be 1 for all non-streaming RPCs.\n\n**Streaming**: This metric is required for server and client streaming RPCs\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "rpc.client.responses_per_rpc",
      "instrument": "histogram",
      "unit": "{count}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/rpc-metrics.yaml"
      }
    },
    {
      "id": "metric.db.client.operation.duration",
      "type": "metric",
      "brief": "Duration of database client operations.",
      "note": "Batch operations SHOULD be recorded as a single operation.\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the error code returned by the database or the client library, the canonical name of exception that occurred, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The collection name MAY be parsed from the query text, in which case it SHOULD be the first collection name in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the collection name is parsed from the query text, it SHOULD be the first collection name found in the query and it SHOULD match the value provided in the query text including any schema and database name prefix.\nFor batch operations, if the individual operations are known to have the same collection name then that collection name SHOULD be used, otherwise `db.collection.name` SHOULD NOT be captured.\n",
          "stability": "experimental"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated (potentially using database system specific conventions) from most general to most specific namespace component, and more specific namespaces SHOULD NOT be captured without the more general namespaces, to ensure that \"startswith\" queries for the more general namespaces will be valid.\nSemantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "experimental"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The operation name MAY be parsed from the query text, in which case it SHOULD be the first operation name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the operation name is parsed from the query text, it SHOULD be the first operation name found in the query.\nFor batch operations, if the individual operations are known to have the same operation name then that operation name SHOULD be used prepended by `BATCH `, otherwise `db.operation.name` SHOULD be `BATCH` or some other database system specific term if more applicable.\n",
          "stability": "experimental"
        },
        {
          "name": "db.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other_sql",
                "value": "other_sql",
                "brief": "Some other SQL database. Fallback only. See notes.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "adabas",
                "value": "adabas",
                "brief": "Adabas (Adaptable Database System)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cache",
                "value": "cache",
                "brief": "Deprecated, use `intersystems_cache` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `intersystems_cache`."
              },
              {
                "id": "intersystems_cache",
                "value": "intersystems_cache",
                "brief": "InterSystems Caché",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cassandra",
                "value": "cassandra",
                "brief": "Apache Cassandra",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "clickhouse",
                "value": "clickhouse",
                "brief": "ClickHouse",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cloudscape",
                "value": "cloudscape",
                "brief": "Deprecated, use `other_sql` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `other_sql`."
              },
              {
                "id": "cockroachdb",
                "value": "cockroachdb",
                "brief": "CockroachDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "coldfusion",
                "value": "coldfusion",
                "brief": "Deprecated, no replacement at this time.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Removed."
              },
              {
                "id": "cosmosdb",
                "value": "cosmosdb",
                "brief": "Microsoft Azure Cosmos DB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "couchbase",
                "value": "couchbase",
                "brief": "Couchbase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "couchdb",
                "value": "couchdb",
                "brief": "CouchDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "db2",
                "value": "db2",
                "brief": "IBM Db2",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "derby",
                "value": "derby",
                "brief": "Apache Derby",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dynamodb",
                "value": "dynamodb",
                "brief": "Amazon DynamoDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "edb",
                "value": "edb",
                "brief": "EnterpriseDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "elasticsearch",
                "value": "elasticsearch",
                "brief": "Elasticsearch",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "filemaker",
                "value": "filemaker",
                "brief": "FileMaker",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "firebird",
                "value": "firebird",
                "brief": "Firebird",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "firstsql",
                "value": "firstsql",
                "brief": "Deprecated, use `other_sql` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `other_sql`."
              },
              {
                "id": "geode",
                "value": "geode",
                "brief": "Apache Geode",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "h2",
                "value": "h2",
                "brief": "H2",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hanadb",
                "value": "hanadb",
                "brief": "SAP HANA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hbase",
                "value": "hbase",
                "brief": "Apache HBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hive",
                "value": "hive",
                "brief": "Apache Hive",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hsqldb",
                "value": "hsqldb",
                "brief": "HyperSQL DataBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "influxdb",
                "value": "influxdb",
                "brief": "InfluxDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "informix",
                "value": "informix",
                "brief": "Informix",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ingres",
                "value": "ingres",
                "brief": "Ingres",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "instantdb",
                "value": "instantdb",
                "brief": "InstantDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "interbase",
                "value": "interbase",
                "brief": "InterBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mariadb",
                "value": "mariadb",
                "brief": "MariaDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "maxdb",
                "value": "maxdb",
                "brief": "SAP MaxDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "memcached",
                "value": "memcached",
                "brief": "Memcached",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mongodb",
                "value": "mongodb",
                "brief": "MongoDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mssql",
                "value": "mssql",
                "brief": "Microsoft SQL Server",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mssqlcompact",
                "value": "mssqlcompact",
                "brief": "Deprecated, Microsoft SQL Server Compact is discontinued.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Removed, use `other_sql` instead."
              },
              {
                "id": "mysql",
                "value": "mysql",
                "brief": "MySQL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "neo4j",
                "value": "neo4j",
                "brief": "Neo4j",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "netezza",
                "value": "netezza",
                "brief": "Netezza",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "opensearch",
                "value": "opensearch",
                "brief": "OpenSearch",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "oracle",
                "value": "oracle",
                "brief": "Oracle Database",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pervasive",
                "value": "pervasive",
                "brief": "Pervasive PSQL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pointbase",
                "value": "pointbase",
                "brief": "PointBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "postgresql",
                "value": "postgresql",
                "brief": "PostgreSQL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "progress",
                "value": "progress",
                "brief": "Progress Database",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "redis",
                "value": "redis",
                "brief": "Redis",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "redshift",
                "value": "redshift",
                "brief": "Amazon Redshift",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "spanner",
                "value": "spanner",
                "brief": "Cloud Spanner",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "sqlite",
                "value": "sqlite",
                "brief": "SQLite",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "sybase",
                "value": "sybase",
                "brief": "Sybase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "teradata",
                "value": "teradata",
                "brief": "Teradata",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "trino",
                "value": "trino",
                "brief": "Trino",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "vertica",
                "value": "vertica",
                "brief": "Vertica",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The database management system (DBMS) product as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system` is set to `postgresql` based on the instrumentation's best knowledge.\n",
          "stability": "experimental"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the database node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "recommended": "If applicable for this database system."
          },
          "note": "Semantic conventions for individual database systems SHOULD document whether `network.peer.*` attributes are applicable. Network peer address and port are useful when the application interacts with individual database nodes directly.\nIf a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "If and only if `network.peer.address` is set."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.operation.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/database-metrics.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.system": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.count",
      "type": "metric",
      "brief": "The number of connections that are currently in state described by the `state` attribute",
      "stability": "experimental",
      "attributes": [
        {
          "name": "db.client.connection.state",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The state of a connection in the pool",
          "examples": [
            "idle"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation should use a combination of `server.address` and `server.port` attributes formatted as `server.address:server.port`.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.count",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/database-metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.client.connection.state": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.idle.max",
      "type": "metric",
      "brief": "The maximum number of idle open connections allowed",
      "stability": "experimental",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation should use a combination of `server.address` and `server.port` attributes formatted as `server.address:server.port`.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.idle.max",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/database-metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.idle.min",
      "type": "metric",
      "brief": "The minimum number of idle open connections allowed",
      "stability": "experimental",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation should use a combination of `server.address` and `server.port` attributes formatted as `server.address:server.port`.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.idle.min",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/database-metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.max",
      "type": "metric",
      "brief": "The maximum number of open connections allowed",
      "stability": "experimental",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation should use a combination of `server.address` and `server.port` attributes formatted as `server.address:server.port`.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.max",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/database-metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.pending_requests",
      "type": "metric",
      "brief": "The number of pending requests for an open connection, cumulative for the entire pool",
      "stability": "experimental",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation should use a combination of `server.address` and `server.port` attributes formatted as `server.address:server.port`.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.pending_requests",
      "instrument": "updowncounter",
      "unit": "{request}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/database-metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.timeouts",
      "type": "metric",
      "brief": "The number of connection timeouts that have occurred trying to obtain a connection from the pool",
      "stability": "experimental",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation should use a combination of `server.address` and `server.port` attributes formatted as `server.address:server.port`.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.timeouts",
      "instrument": "counter",
      "unit": "{timeout}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/database-metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.create_time",
      "type": "metric",
      "brief": "The time it took to create a new connection",
      "stability": "experimental",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation should use a combination of `server.address` and `server.port` attributes formatted as `server.address:server.port`.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.create_time",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/database-metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.wait_time",
      "type": "metric",
      "brief": "The time it took to obtain an open connection from the pool",
      "stability": "experimental",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation should use a combination of `server.address` and `server.port` attributes formatted as `server.address:server.port`.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.wait_time",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/database-metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.db.client.connection.use_time",
      "type": "metric",
      "brief": "The time between borrowing a connection and returning it to the pool",
      "stability": "experimental",
      "attributes": [
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation should use a combination of `server.address` and `server.port` attributes formatted as `server.address:server.port`.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "db.client.connection.use_time",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/database-metrics.yaml",
        "attributes": {
          "db.client.connection.pool.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.service",
      "type": "attribute_group",
      "brief": "A service instance.\n",
      "prefix": "service",
      "attributes": [
        {
          "name": "service.name",
          "type": "string",
          "brief": "Logical name of the service.\n",
          "examples": [
            "shoppingcart"
          ],
          "requirement_level": "recommended",
          "note": "MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n",
          "stability": "stable"
        },
        {
          "name": "service.version",
          "type": "string",
          "brief": "The version string of the service API or implementation. The format is not defined by these conventions.\n",
          "examples": [
            "2.0.0",
            "a01dbef8a"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "service.namespace",
          "type": "string",
          "brief": "A namespace for `service.name`.\n",
          "examples": [
            "Shop"
          ],
          "requirement_level": "recommended",
          "note": "A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n",
          "stability": "experimental"
        },
        {
          "name": "service.instance.id",
          "type": "string",
          "brief": "The string ID of the service instance.\n",
          "examples": [
            "627cc493-f310-47de-96bd-71410b7dec09"
          ],
          "requirement_level": "recommended",
          "note": "MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words\n`service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to\ndistinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled\nservice).\n\nImplementations, such as SDKs, are recommended to generate a random Version 1 or Version 4 [RFC\n4122](https://www.ietf.org/rfc/rfc4122.txt) UUID, but are free to use an inherent unique ID as the source of\nthis value if stability is desirable. In that case, the ID SHOULD be used as source of a UUID Version 5 and\nSHOULD use the following UUID as the namespace: `4d63009a-8d0f-11ee-aad7-4c796ed8e320`.\n\nUUIDs are typically recommended, as only an opaque value for the purposes of identifying a service instance is\nneeded. Similar to what can be seen in the man page for the\n[`/etc/machine-id`](https://www.freedesktop.org/software/systemd/man/machine-id.html) file, the underlying\ndata, such as pod name and namespace should be treated as confidential, being the user's choice to expose it\nor not via another resource attribute.\n\nFor applications running behind an application server (like unicorn), we do not recommend using one identifier\nfor all processes participating in the application. Instead, it's recommended each division (e.g. a worker\nthread in unicorn) to have its own instance.id.\n\nIt's not recommended for a Collector to set `service.instance.id` if it can't unambiguously determine the\nservice instance that is generating that telemetry. For instance, creating an UUID based on `pod.name` will\nlikely be wrong, as the Collector might not know from which container within that pod the telemetry originated.\nHowever, Collectors can set the `service.instance.id` if they can unambiguously determine the service instance\nfor that telemetry. This is typically the case for scraping receivers, as they know the target address and\nport.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/service.yaml"
      }
    },
    {
      "id": "registry.system",
      "type": "attribute_group",
      "brief": "Describes System attributes",
      "prefix": "system",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/system.yaml"
      }
    },
    {
      "id": "registry.system.cpu",
      "type": "attribute_group",
      "brief": "Describes System CPU attributes",
      "prefix": "system.cpu",
      "attributes": [
        {
          "name": "system.cpu.logical_number",
          "type": "int",
          "brief": "The logical CPU number [0..n-1]",
          "examples": [
            1
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/system.yaml"
      }
    },
    {
      "id": "registry.system.memory",
      "type": "attribute_group",
      "brief": "Describes System Memory attributes",
      "prefix": "system.memory",
      "attributes": [
        {
          "name": "system.memory.state",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "shared",
                "value": "shared",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": "Removed, report shared memory usage with `metric.system.memory.shared` metric"
              },
              {
                "id": "buffers",
                "value": "buffers",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cached",
                "value": "cached",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory state",
          "examples": [
            "free",
            "cached"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/system.yaml"
      }
    },
    {
      "id": "registry.system.paging",
      "type": "attribute_group",
      "brief": "Describes System Memory Paging attributes",
      "prefix": "system.paging",
      "attributes": [
        {
          "name": "system.paging.state",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory paging state",
          "examples": [
            "free"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "system.paging.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "major",
                "value": "major",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "minor",
                "value": "minor",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory paging type",
          "examples": [
            "minor"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "system.paging.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "in",
                "value": "in",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "out",
                "value": "out",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The paging access direction",
          "examples": [
            "in"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/system.yaml"
      }
    },
    {
      "id": "registry.system.filesystem",
      "type": "attribute_group",
      "brief": "Describes Filesystem attributes",
      "prefix": "system.filesystem",
      "attributes": [
        {
          "name": "system.filesystem.state",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "reserved",
                "value": "reserved",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The filesystem state",
          "examples": [
            "used"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "system.filesystem.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "fat32",
                "value": "fat32",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "exfat",
                "value": "exfat",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ntfs",
                "value": "ntfs",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "refs",
                "value": "refs",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hfsplus",
                "value": "hfsplus",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ext4",
                "value": "ext4",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The filesystem type",
          "examples": [
            "ext4"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "system.filesystem.mode",
          "type": "string",
          "brief": "The filesystem mode",
          "examples": [
            "rw, ro"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "system.filesystem.mountpoint",
          "type": "string",
          "brief": "The filesystem mount path",
          "examples": [
            "/mnt/data"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/system.yaml"
      }
    },
    {
      "id": "registry.system.network",
      "type": "attribute_group",
      "brief": "Describes Network attributes",
      "prefix": "system.network",
      "attributes": [
        {
          "name": "system.network.state",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "close",
                "value": "close",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "close_wait",
                "value": "close_wait",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "closing",
                "value": "closing",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "delete",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "established",
                "value": "established",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "fin_wait_1",
                "value": "fin_wait_1",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "fin_wait_2",
                "value": "fin_wait_2",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "last_ack",
                "value": "last_ack",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "listen",
                "value": "listen",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "syn_recv",
                "value": "syn_recv",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "syn_sent",
                "value": "syn_sent",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "time_wait",
                "value": "time_wait",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "A stateless protocol MUST NOT set this attribute",
          "examples": [
            "close_wait"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/system.yaml"
      }
    },
    {
      "id": "registry.system.process",
      "type": "attribute_group",
      "brief": "Describes System Process attributes",
      "prefix": "system.process",
      "attributes": [
        {
          "name": "system.process.status",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "running",
                "value": "running",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "sleeping",
                "value": "sleeping",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "stopped",
                "value": "stopped",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "defunct",
                "value": "defunct",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The process state, e.g., [Linux Process State Codes](https://man7.org/linux/man-pages/man1/ps.1.html#PROCESS_STATE_CODES)\n",
          "examples": [
            "running"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/system.yaml"
      }
    },
    {
      "id": "registry.signalr",
      "type": "attribute_group",
      "brief": "SignalR attributes",
      "prefix": "signalr",
      "attributes": [
        {
          "name": "signalr.connection.status",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "normal_closure",
                "value": "normal_closure",
                "brief": "The connection was closed normally.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "timeout",
                "value": "timeout",
                "brief": "The connection was closed due to a timeout.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "app_shutdown",
                "value": "app_shutdown",
                "brief": "The connection was closed because the app is shutting down.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "SignalR HTTP connection closure status.",
          "examples": [
            "app_shutdown",
            "timeout"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "signalr.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "server_sent_events",
                "value": "server_sent_events",
                "brief": "ServerSentEvents protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "long_polling",
                "value": "long_polling",
                "brief": "LongPolling protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "web_sockets",
                "value": "web_sockets",
                "brief": "WebSockets protocol",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)",
          "examples": [
            "web_sockets",
            "long_polling"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/signalr.yaml"
      }
    },
    {
      "id": "event",
      "type": "attribute_group",
      "brief": "This document defines attributes for Events represented using Log Records.\n",
      "attributes": [
        {
          "name": "event.name",
          "type": "string",
          "brief": "Identifies the class / type of event.\n",
          "examples": [
            "browser.mouse.click",
            "device.app.lifecycle"
          ],
          "requirement_level": "required",
          "note": "Event names are subject to the same rules as [attribute names](/docs/general/attribute-naming.md). Notably, event names are namespaced to avoid collisions and provide a clean separation of semantics for events in separate domains like browser, mobile, and kubernetes.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/logs/events.yaml",
        "attributes": {
          "event.name": {
            "source_group": "registry.event",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.invoke_duration",
      "type": "metric",
      "brief": "Measures the duration of the function's logic execution",
      "stability": "experimental",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.invoke_duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/faas-metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.init_duration",
      "type": "metric",
      "brief": "Measures the duration of the function's initialization, such as a cold start",
      "stability": "experimental",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.init_duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/faas-metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.coldstarts",
      "type": "metric",
      "brief": "Number of invocation cold starts",
      "stability": "experimental",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.coldstarts",
      "instrument": "counter",
      "unit": "{coldstart}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/faas-metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.errors",
      "type": "metric",
      "brief": "Number of invocation errors",
      "stability": "experimental",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.errors",
      "instrument": "counter",
      "unit": "{error}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/faas-metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.invocations",
      "type": "metric",
      "brief": "Number of successful invocations",
      "stability": "experimental",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.invocations",
      "instrument": "counter",
      "unit": "{invocation}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/faas-metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.timeouts",
      "type": "metric",
      "brief": "Number of invocation timeouts",
      "stability": "experimental",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.timeouts",
      "instrument": "counter",
      "unit": "{timeout}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/faas-metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.mem_usage",
      "type": "metric",
      "brief": "Distribution of max memory usage per invocation",
      "stability": "experimental",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.mem_usage",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/faas-metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.cpu_usage",
      "type": "metric",
      "brief": "Distribution of CPU usage per invocation",
      "stability": "experimental",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.cpu_usage",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/faas-metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.faas.net_io",
      "type": "metric",
      "brief": "Distribution of net I/O usage per invocation",
      "stability": "experimental",
      "attributes": [
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "faas.net_io",
      "instrument": "histogram",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/faas-metrics.yaml",
        "attributes": {
          "faas.trigger": {
            "source_group": "registry.faas",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric_attributes.gen_ai",
      "type": "attribute_group",
      "brief": "This group describes GenAI metrics attributes",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `sever.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The actual GenAI product may differ from the one identified by the client. For example, when using OpenAI client libraries to communicate with Mistral, the `gen_ai.system` is set to `openai` based on the instrumentation's best knowledge.\nFor custom model, a custom friendly name SHOULD be used. If none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.operation.name",
          "type": "string",
          "brief": "The name of the operation being performed.",
          "examples": [
            "chat",
            "completion"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/gen-ai.yaml",
        "attributes": {
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric_attributes.gen_ai.server",
      "type": "attribute_group",
      "brief": "This group describes GenAI server metrics attributes",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `sever.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI service,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The actual GenAI product may differ from the one identified by the client. For example, when using OpenAI client libraries to communicate with Mistral, the `gen_ai.system` is set to `openai` based on the instrumentation's best knowledge.\nFor custom model, a custom friendly name SHOULD be used. If none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.operation.name",
          "type": "string",
          "brief": "The name of the operation being performed.",
          "examples": [
            "chat",
            "completion"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/gen-ai.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.gen_ai.client.token.usage",
      "type": "metric",
      "brief": "Measures number of input and output tokens used",
      "stability": "experimental",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `sever.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The actual GenAI product may differ from the one identified by the client. For example, when using OpenAI client libraries to communicate with Mistral, the `gen_ai.system` is set to `openai` based on the instrumentation's best knowledge.\nFor custom model, a custom friendly name SHOULD be used. If none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.operation.name",
          "type": "string",
          "brief": "The name of the operation being performed.",
          "examples": [
            "chat",
            "completion"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.token.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "input",
                "value": "input",
                "brief": "Input tokens (prompt, input, etc.)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "completion",
                "value": "output",
                "brief": "Output tokens (completion, response, etc.)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of token being counted.",
          "examples": [
            "input",
            "output"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "gen_ai.client.token.usage",
      "instrument": "histogram",
      "unit": "{token}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/gen-ai.yaml",
        "attributes": {
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.token.type": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.gen_ai.client.operation.duration",
      "type": "metric",
      "brief": "GenAI operation duration",
      "stability": "experimental",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `sever.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI provider or the client library,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The actual GenAI product may differ from the one identified by the client. For example, when using OpenAI client libraries to communicate with Mistral, the `gen_ai.system` is set to `openai` based on the instrumentation's best knowledge.\nFor custom model, a custom friendly name SHOULD be used. If none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.operation.name",
          "type": "string",
          "brief": "The name of the operation being performed.",
          "examples": [
            "chat",
            "completion"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "gen_ai.client.operation.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/gen-ai.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.gen_ai.server.request.duration",
      "type": "metric",
      "brief": "Generative AI server request duration such as time-to-last byte or last output token",
      "stability": "experimental",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `sever.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "if the operation ended in an error"
          },
          "note": "The `error.type` SHOULD match the error code returned by the Generative AI service,\nthe canonical name of exception that occurred, or another low-cardinality error identifier.\nInstrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The actual GenAI product may differ from the one identified by the client. For example, when using OpenAI client libraries to communicate with Mistral, the `gen_ai.system` is set to `openai` based on the instrumentation's best knowledge.\nFor custom model, a custom friendly name SHOULD be used. If none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.operation.name",
          "type": "string",
          "brief": "The name of the operation being performed.",
          "examples": [
            "chat",
            "completion"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "gen_ai.server.request.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/gen-ai.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.gen_ai.server.time_per_output_token",
      "type": "metric",
      "brief": "Time per output token generated after the first token for successful responses",
      "stability": "experimental",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `sever.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The actual GenAI product may differ from the one identified by the client. For example, when using OpenAI client libraries to communicate with Mistral, the `gen_ai.system` is set to `openai` based on the instrumentation's best knowledge.\nFor custom model, a custom friendly name SHOULD be used. If none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.operation.name",
          "type": "string",
          "brief": "The name of the operation being performed.",
          "examples": [
            "chat",
            "completion"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "gen_ai.server.time_per_output_token",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/gen-ai.yaml",
        "attributes": {
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.gen_ai.server.time_to_first_token",
      "type": "metric",
      "brief": "Time to generate first token for successful responses",
      "stability": "experimental",
      "attributes": [
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If `sever.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "required",
          "note": "The actual GenAI product may differ from the one identified by the client. For example, when using OpenAI client libraries to communicate with Mistral, the `gen_ai.system` is set to `openai` based on the instrumentation's best knowledge.\nFor custom model, a custom friendly name SHOULD be used. If none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.operation.name",
          "type": "string",
          "brief": "The name of the operation being performed.",
          "examples": [
            "chat",
            "completion"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "gen_ai.server.time_to_first_token",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/gen-ai.yaml",
        "attributes": {
          "gen_ai.operation.name": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.request.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.response.model": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gen_ai.system": {
            "source_group": "registry.gen_ai",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "browser",
      "type": "resource",
      "brief": "The web browser in which the application represented by the resource is running. The `browser.*` attributes MUST be used only for resources that represent applications running in a web browser (regardless of whether running on a mobile or desktop device).\n",
      "prefix": "browser",
      "attributes": [
        {
          "name": "browser.brands",
          "type": "string[]",
          "brief": "Array of brand name and version separated by a space",
          "examples": [
            " Not A;Brand 99",
            "Chromium 99",
            "Chrome 99"
          ],
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.brands`).\n",
          "stability": "experimental"
        },
        {
          "name": "browser.platform",
          "type": "string",
          "brief": "The platform on which the browser is running",
          "examples": [
            "Windows",
            "macOS",
            "Android"
          ],
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.platform`). If unavailable, the legacy `navigator.platform` API SHOULD NOT be used instead and this attribute SHOULD be left unset in order for the values to be consistent.\nThe list of possible values is defined in the [W3C User-Agent Client Hints specification](https://wicg.github.io/ua-client-hints/#sec-ch-ua-platform). Note that some (but not all) of these values can overlap with values in the [`os.type` and `os.name` attributes](./os.md). However, for consistency, the values in the `browser.platform` attribute should capture the exact value that the user agent provides.\n",
          "stability": "experimental"
        },
        {
          "name": "browser.mobile",
          "type": "boolean",
          "brief": "A boolean that is true if the browser is running on a mobile device",
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.mobile`). If unavailable, this attribute SHOULD be left unset.\n",
          "stability": "experimental"
        },
        {
          "name": "browser.language",
          "type": "string",
          "brief": "Preferred language of the user using the browser",
          "examples": [
            "en",
            "en-US",
            "fr",
            "fr-FR"
          ],
          "requirement_level": "recommended",
          "note": "This value is intended to be taken from the Navigator API `navigator.language`.\n",
          "stability": "experimental"
        },
        {
          "name": "user_agent.original",
          "type": "string",
          "brief": "Full user-agent string provided by the browser",
          "examples": [
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36"
          ],
          "requirement_level": "recommended",
          "note": "The user-agent value SHOULD be provided only from browsers that do not have a mechanism to retrieve brands and platform individually from the User-Agent Client Hints API. To retrieve the value, the legacy `navigator.userAgent` API can be used.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/browser.yaml",
        "attributes": {
          "browser.brands": {
            "source_group": "registry.browser",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "browser.language": {
            "source_group": "registry.browser",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "browser.mobile": {
            "source_group": "registry.browser",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "browser.platform": {
            "source_group": "registry.browser",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "user_agent.original": {
            "source_group": "registry.user_agent",
            "inherited_fields": [
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note"
            ]
          }
        }
      }
    },
    {
      "id": "registry.heroku",
      "type": "attribute_group",
      "brief": "This document defines attributes for the Android platform on which the Android application is running.\n",
      "prefix": "heroku",
      "attributes": [
        {
          "name": "heroku.release.creation_timestamp",
          "type": "string",
          "brief": "Time and date the release was created\n",
          "examples": [
            "2022-10-23T18:00:42Z"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "heroku.release.commit",
          "type": "string",
          "brief": "Commit hash for the current release\n",
          "examples": [
            "e6134959463efd8966b20e75b913cafe3f5ec"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "heroku.app.id",
          "type": "string",
          "brief": "Unique identifier for the application\n",
          "examples": [
            "2daa2797-e42b-4624-9322-ec3f968df4da"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/heroku.yaml"
      }
    },
    {
      "id": "registry.aspnetcore",
      "type": "attribute_group",
      "brief": "ASP.NET Core attributes",
      "prefix": "aspnetcore",
      "attributes": [
        {
          "name": "aspnetcore.rate_limiting.policy",
          "type": "string",
          "brief": "Rate limiting policy name.",
          "examples": [
            "fixed",
            "sliding",
            "token"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.rate_limiting.result",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "acquired",
                "value": "acquired",
                "brief": "Lease was acquired",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "endpoint_limiter",
                "value": "endpoint_limiter",
                "brief": "Lease request was rejected by the endpoint limiter",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "global_limiter",
                "value": "global_limiter",
                "brief": "Lease request was rejected by the global limiter",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "request_canceled",
                "value": "request_canceled",
                "brief": "Lease request was canceled",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Rate-limiting result, shows whether the lease was acquired or contains a rejection reason",
          "examples": [
            "acquired",
            "request_canceled"
          ],
          "requirement_level": "required",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.routing.is_fallback",
          "type": "boolean",
          "brief": "A value that indicates whether the matched route is a fallback route.",
          "examples": [
            true
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.diagnostics.handler.type",
          "type": "string",
          "brief": "Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.",
          "examples": [
            "Contoso.MyHandler"
          ],
          "requirement_level": {
            "conditionally_required": "if and only if the exception was handled by this handler."
          },
          "stability": "stable"
        },
        {
          "name": "aspnetcore.request.is_unhandled",
          "type": "boolean",
          "brief": "Flag indicating if request was handled by the application pipeline.",
          "examples": [
            true
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.routing.match_status",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "success",
                "value": "success",
                "brief": "Match succeeded",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "failure",
                "value": "failure",
                "brief": "Match failed",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Match result - success or failure",
          "examples": [
            "success",
            "failure"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "aspnetcore.diagnostics.exception.result",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "handled",
                "value": "handled",
                "brief": "Exception was handled by the exception handling middleware.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unhandled",
                "value": "unhandled",
                "brief": "Exception was not handled by the exception handling middleware.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "skipped",
                "value": "skipped",
                "brief": "Exception handling was skipped because the response had started.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "aborted",
                "value": "aborted",
                "brief": "Exception handling didn't run because the request was aborted.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "ASP.NET Core exception middleware handling result",
          "examples": [
            "handled",
            "unhandled"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/aspnetcore.yaml"
      }
    },
    {
      "id": "registry.dns",
      "type": "attribute_group",
      "brief": "This document defines the shared attributes used to report a DNS query.\n",
      "prefix": "dns",
      "attributes": [
        {
          "name": "dns.question.name",
          "type": "string",
          "brief": "The name being queried.",
          "examples": [
            "www.example.com",
            "opentelemetry.io"
          ],
          "requirement_level": "recommended",
          "note": "If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \\t, \\r, and \\n respectively.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/dns.yaml"
      }
    },
    {
      "id": "registry.messaging",
      "type": "attribute_group",
      "brief": "Attributes describing telemetry around messaging systems and messaging activities.",
      "prefix": "messaging",
      "attributes": [
        {
          "name": "messaging.batch.message_count",
          "type": "int",
          "brief": "The number of messages sent, received, or processed in the scope of the batching operation.",
          "examples": [
            0,
            1,
            2
          ],
          "requirement_level": "recommended",
          "note": "Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.client.id",
          "type": "string",
          "brief": "A unique identifier for the client that consumes or produces a message.\n",
          "examples": [
            "client-5",
            "myhost@8742@s8083jm"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "The name of the consumer group with which a consumer is associated.\n",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": "recommended",
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": "recommended",
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "The name of the destination subscription from which a message is consumed.",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": "recommended",
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": "recommended",
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.anonymous",
          "type": "boolean",
          "brief": "A boolean that is true if the message destination is anonymous (could be unnamed or have auto-generated name).",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.temporary",
          "type": "boolean",
          "brief": "A boolean that is true if the message destination is temporary and might not exist anymore after messages are processed.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination_publish.anonymous",
          "type": "boolean",
          "brief": "A boolean that is true if the publish message destination is anonymous (could be unnamed or have auto-generated name).",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination_publish.name",
          "type": "string",
          "brief": "The name of the original destination the message was published to",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "requirement_level": "recommended",
          "note": "The name SHOULD uniquely identify a specific queue, topic, or other entity within the broker. If\nthe broker doesn't have such notion, the original destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.conversation_id",
          "type": "string",
          "brief": "The conversation ID identifying the conversation to which the message belongs, represented as a string. Sometimes called \"Correlation ID\".\n",
          "examples": "MyConversationId",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.envelope.size",
          "type": "int",
          "brief": "The size of the message body and metadata in bytes.\n",
          "examples": 2738,
          "requirement_level": "recommended",
          "note": "This can refer to both the compressed or uncompressed size. If both sizes are known, the uncompressed\nsize should be used.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.id",
          "type": "string",
          "brief": "A value used by the messaging system as an identifier for the message, represented as a string.",
          "examples": "452a7c7c7c7048c2f887f61572b18fc2",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.message.body.size",
          "type": "int",
          "brief": "The size of the message body in bytes.\n",
          "examples": 1439,
          "requirement_level": "recommended",
          "note": "This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed\nbody size should be used.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "publish",
                "value": "publish",
                "brief": "One or more messages are provided for publishing to an intermediary. If a single message is published, the context of the \"Publish\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch publishing scenarios.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `process`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": "recommended",
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "recommended",
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/messaging.yaml"
      }
    },
    {
      "id": "registry.messaging.kafka",
      "type": "attribute_group",
      "brief": "This group describes attributes specific to Apache Kafka.\n",
      "prefix": "messaging",
      "attributes": [
        {
          "name": "messaging.kafka.message.key",
          "type": "string",
          "brief": "Message keys in Kafka are used for grouping alike messages to ensure they're processed on the same partition. They differ from `messaging.message.id` in that they're not unique. If the key is `null`, the attribute MUST NOT be set.\n",
          "examples": "myKey",
          "requirement_level": "recommended",
          "note": "If the key type is not string, it's string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don't include its value.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.kafka.message.offset",
          "type": "int",
          "brief": "The offset of a record in the corresponding Kafka partition.\n",
          "examples": 42,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.kafka.message.tombstone",
          "type": "boolean",
          "brief": "A boolean that is true if the message is a tombstone.",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/messaging.yaml"
      }
    },
    {
      "id": "registry.messaging.rabbitmq",
      "type": "attribute_group",
      "brief": "This group describes attributes specific to RabbitMQ.\n",
      "prefix": "messaging",
      "attributes": [
        {
          "name": "messaging.rabbitmq.destination.routing_key",
          "type": "string",
          "brief": "RabbitMQ message routing key.\n",
          "examples": "myKey",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.rabbitmq.message.delivery_tag",
          "type": "int",
          "brief": "RabbitMQ message delivery tag\n",
          "examples": 123,
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/messaging.yaml"
      }
    },
    {
      "id": "registry.messaging.rocketmq",
      "type": "attribute_group",
      "brief": "This group describes attributes specific to RocketMQ.\n",
      "prefix": "messaging",
      "attributes": [
        {
          "name": "messaging.rocketmq.consumption_model",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "clustering",
                "value": "clustering",
                "brief": "Clustering consumption model",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "broadcasting",
                "value": "broadcasting",
                "brief": "Broadcasting consumption model",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Model of message consumption. This only applies to consumer spans.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.rocketmq.message.delay_time_level",
          "type": "int",
          "brief": "The delay time level for delay message, which determines the message delay time.\n",
          "examples": 3,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.rocketmq.message.delivery_timestamp",
          "type": "int",
          "brief": "The timestamp in milliseconds that the delay message is expected to be delivered to consumer.\n",
          "examples": 1665987217045,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.rocketmq.message.group",
          "type": "string",
          "brief": "It is essential for FIFO message. Messages that belong to the same message group are always processed one by one within the same consumer group.\n",
          "examples": "myMessageGroup",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.rocketmq.message.keys",
          "type": "string[]",
          "brief": "Key(s) of message, another way to mark message besides message id.\n",
          "examples": [
            "keyA",
            "keyB"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.rocketmq.message.tag",
          "type": "string",
          "brief": "The secondary classifier of message besides topic.\n",
          "examples": "tagA",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.rocketmq.message.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "normal",
                "value": "normal",
                "brief": "Normal message",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "fifo",
                "value": "fifo",
                "brief": "FIFO message",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "delay",
                "value": "delay",
                "brief": "Delay message",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "transaction",
                "value": "transaction",
                "brief": "Transaction message",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of message.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.rocketmq.namespace",
          "type": "string",
          "brief": "Namespace of RocketMQ resources, resources in different namespaces are individual.\n",
          "examples": "myNamespace",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/messaging.yaml"
      }
    },
    {
      "id": "registry.messaging.gcp_pubsub",
      "type": "attribute_group",
      "brief": "This group describes attributes specific to GCP Pub/Sub.\n",
      "prefix": "messaging",
      "attributes": [
        {
          "name": "messaging.gcp_pubsub.message.ordering_key",
          "type": "string",
          "brief": "The ordering key for a given message. If the attribute is not present, the message does not have an ordering key.\n",
          "examples": "ordering_key",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.gcp_pubsub.message.ack_id",
          "type": "string",
          "brief": "The ack id for a given message.\n",
          "examples": "ack_id",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.gcp_pubsub.message.ack_deadline",
          "type": "int",
          "brief": "The ack deadline in seconds set for the modify ack deadline request.\n",
          "examples": 10,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.gcp_pubsub.message.delivery_attempt",
          "type": "int",
          "brief": "The delivery attempt for a given message.\n",
          "examples": 2,
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/messaging.yaml"
      }
    },
    {
      "id": "registry.messaging.servicebus",
      "type": "attribute_group",
      "brief": "This group describes attributes specific to Azure Service Bus.\n",
      "prefix": "messaging",
      "attributes": [
        {
          "name": "messaging.servicebus.message.delivery_count",
          "type": "int",
          "brief": "Number of deliveries that have been attempted for this message.\n",
          "examples": 2,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.servicebus.message.enqueued_time",
          "type": "int",
          "brief": "The UTC epoch seconds at which the message has been accepted and stored in the entity.\n",
          "examples": 1701393730,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.servicebus.disposition_status",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "complete",
                "value": "complete",
                "brief": "Message is completed",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "abandon",
                "value": "abandon",
                "brief": "Message is abandoned",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dead_letter",
                "value": "dead_letter",
                "brief": "Message is sent to dead letter queue",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "defer",
                "value": "defer",
                "brief": "Message is deferred",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes the [settlement type](https://learn.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock).\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/messaging.yaml"
      }
    },
    {
      "id": "registry.messaging.eventhubs",
      "type": "attribute_group",
      "brief": "This group describes attributes specific to Azure Event Hubs.\n",
      "prefix": "messaging",
      "attributes": [
        {
          "name": "messaging.eventhubs.message.enqueued_time",
          "type": "int",
          "brief": "The UTC epoch seconds at which the message has been accepted and stored in the entity.\n",
          "examples": 1701393730,
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/messaging.yaml"
      }
    },
    {
      "id": "trace.db.common.query",
      "type": "attribute_group",
      "brief": "This group defines the attributes used to perform database client calls.",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the error code returned by the database or the client library, the canonical name of exception that occurred, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The operation name MAY be parsed from the query text, in which case it SHOULD be the first operation name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the operation name is parsed from the query text, it SHOULD be the first operation name found in the query.\nFor batch operations, if the individual operations are known to have the same operation name then that operation name SHOULD be used prepended by `BATCH `, otherwise `db.operation.name` SHOULD be `BATCH` or some other database system specific term if more applicable.\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.parameter",
          "type": "template[string]",
          "brief": "A query parameter used in `db.query.text`, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "Query parameters should only be captured when `db.query.text` is parameterized with placeholders.\nIf a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey \"WuValue\""
          ],
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text.\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.<key>`](../../docs/attributes-registry/db.md)).\n"
          },
          "note": "For sanitization see [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/database.yaml",
        "attributes": {
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "trace.db.common.query_and_collection",
      "type": "attribute_group",
      "brief": "This group defines the attributes used to perform database client calls.",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the error code returned by the database or the client library, the canonical name of exception that occurred, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The operation name MAY be parsed from the query text, in which case it SHOULD be the first operation name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the operation name is parsed from the query text, it SHOULD be the first operation name found in the query.\nFor batch operations, if the individual operations are known to have the same operation name then that operation name SHOULD be used prepended by `BATCH `, otherwise `db.operation.name` SHOULD be `BATCH` or some other database system specific term if more applicable.\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.parameter",
          "type": "template[string]",
          "brief": "A query parameter used in `db.query.text`, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "Query parameters should only be captured when `db.query.text` is parameterized with placeholders.\nIf a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\n",
          "stability": "experimental"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The collection name MAY be parsed from the query text, in which case it SHOULD be the first collection name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the collection name is parsed from the query text, it SHOULD be the first collection name found in the query and it SHOULD match the value provided in the query text including any schema and database name prefix.\nFor batch operations, if the individual operations are known to have the same collection name then that collection name SHOULD be used, otherwise `db.collection.name` SHOULD NOT be captured.\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey \"WuValue\""
          ],
          "requirement_level": {
            "recommended": "SHOULD be collected by default only if there is sanitization that excludes sensitive information. See [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\n"
          },
          "note": "For sanitization see [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/database.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "trace.db.common.full",
      "type": "attribute_group",
      "brief": "This group documents attributes that describe database call along with network information.",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the error code returned by the database or the client library, the canonical name of exception that occurred, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated (potentially using database system specific conventions) from most general to most specific namespace component, and more specific namespaces SHOULD NOT be captured without the more general namespaces, to ensure that \"startswith\" queries for the more general namespaces will be valid.\nSemantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "experimental"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The operation name MAY be parsed from the query text, in which case it SHOULD be the first operation name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the operation name is parsed from the query text, it SHOULD be the first operation name found in the query.\nFor batch operations, if the individual operations are known to have the same operation name then that operation name SHOULD be used prepended by `BATCH `, otherwise `db.operation.name` SHOULD be `BATCH` or some other database system specific term if more applicable.\n",
          "stability": "experimental"
        },
        {
          "name": "db.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other_sql",
                "value": "other_sql",
                "brief": "Some other SQL database. Fallback only. See notes.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "adabas",
                "value": "adabas",
                "brief": "Adabas (Adaptable Database System)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cache",
                "value": "cache",
                "brief": "Deprecated, use `intersystems_cache` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `intersystems_cache`."
              },
              {
                "id": "intersystems_cache",
                "value": "intersystems_cache",
                "brief": "InterSystems Caché",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cassandra",
                "value": "cassandra",
                "brief": "Apache Cassandra",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "clickhouse",
                "value": "clickhouse",
                "brief": "ClickHouse",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cloudscape",
                "value": "cloudscape",
                "brief": "Deprecated, use `other_sql` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `other_sql`."
              },
              {
                "id": "cockroachdb",
                "value": "cockroachdb",
                "brief": "CockroachDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "coldfusion",
                "value": "coldfusion",
                "brief": "Deprecated, no replacement at this time.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Removed."
              },
              {
                "id": "cosmosdb",
                "value": "cosmosdb",
                "brief": "Microsoft Azure Cosmos DB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "couchbase",
                "value": "couchbase",
                "brief": "Couchbase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "couchdb",
                "value": "couchdb",
                "brief": "CouchDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "db2",
                "value": "db2",
                "brief": "IBM Db2",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "derby",
                "value": "derby",
                "brief": "Apache Derby",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dynamodb",
                "value": "dynamodb",
                "brief": "Amazon DynamoDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "edb",
                "value": "edb",
                "brief": "EnterpriseDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "elasticsearch",
                "value": "elasticsearch",
                "brief": "Elasticsearch",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "filemaker",
                "value": "filemaker",
                "brief": "FileMaker",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "firebird",
                "value": "firebird",
                "brief": "Firebird",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "firstsql",
                "value": "firstsql",
                "brief": "Deprecated, use `other_sql` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `other_sql`."
              },
              {
                "id": "geode",
                "value": "geode",
                "brief": "Apache Geode",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "h2",
                "value": "h2",
                "brief": "H2",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hanadb",
                "value": "hanadb",
                "brief": "SAP HANA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hbase",
                "value": "hbase",
                "brief": "Apache HBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hive",
                "value": "hive",
                "brief": "Apache Hive",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hsqldb",
                "value": "hsqldb",
                "brief": "HyperSQL DataBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "influxdb",
                "value": "influxdb",
                "brief": "InfluxDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "informix",
                "value": "informix",
                "brief": "Informix",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ingres",
                "value": "ingres",
                "brief": "Ingres",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "instantdb",
                "value": "instantdb",
                "brief": "InstantDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "interbase",
                "value": "interbase",
                "brief": "InterBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mariadb",
                "value": "mariadb",
                "brief": "MariaDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "maxdb",
                "value": "maxdb",
                "brief": "SAP MaxDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "memcached",
                "value": "memcached",
                "brief": "Memcached",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mongodb",
                "value": "mongodb",
                "brief": "MongoDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mssql",
                "value": "mssql",
                "brief": "Microsoft SQL Server",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mssqlcompact",
                "value": "mssqlcompact",
                "brief": "Deprecated, Microsoft SQL Server Compact is discontinued.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Removed, use `other_sql` instead."
              },
              {
                "id": "mysql",
                "value": "mysql",
                "brief": "MySQL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "neo4j",
                "value": "neo4j",
                "brief": "Neo4j",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "netezza",
                "value": "netezza",
                "brief": "Netezza",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "opensearch",
                "value": "opensearch",
                "brief": "OpenSearch",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "oracle",
                "value": "oracle",
                "brief": "Oracle Database",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pervasive",
                "value": "pervasive",
                "brief": "Pervasive PSQL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pointbase",
                "value": "pointbase",
                "brief": "PointBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "postgresql",
                "value": "postgresql",
                "brief": "PostgreSQL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "progress",
                "value": "progress",
                "brief": "Progress Database",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "redis",
                "value": "redis",
                "brief": "Redis",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "redshift",
                "value": "redshift",
                "brief": "Amazon Redshift",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "spanner",
                "value": "spanner",
                "brief": "Cloud Spanner",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "sqlite",
                "value": "sqlite",
                "brief": "SQLite",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "sybase",
                "value": "sybase",
                "brief": "Sybase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "teradata",
                "value": "teradata",
                "brief": "Teradata",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "trino",
                "value": "trino",
                "brief": "Trino",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "vertica",
                "value": "vertica",
                "brief": "Vertica",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The database management system (DBMS) product as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system` is set to `postgresql` based on the instrumentation's best knowledge.\n",
          "stability": "experimental"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the database node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "recommended": "If applicable for this database system."
          },
          "note": "Semantic conventions for individual database systems SHOULD document whether `network.peer.*` attributes are applicable. Network peer address and port are useful when the application interacts with individual database nodes directly.\nIf a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        },
        {
          "name": "db.query.parameter",
          "type": "template[string]",
          "brief": "A query parameter used in `db.query.text`, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "Query parameters should only be captured when `db.query.text` is parameterized with placeholders.\nIf a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\n",
          "stability": "experimental"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The collection name MAY be parsed from the query text, in which case it SHOULD be the first collection name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the collection name is parsed from the query text, it SHOULD be the first collection name found in the query and it SHOULD match the value provided in the query text including any schema and database name prefix.\nFor batch operations, if the individual operations are known to have the same collection name then that collection name SHOULD be used, otherwise `db.collection.name` SHOULD NOT be captured.\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey \"WuValue\""
          ],
          "requirement_level": {
            "recommended": "SHOULD be collected by default only if there is sanitization that excludes sensitive information. See [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\n"
          },
          "note": "For sanitization see [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "experimental"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "if and only if `network.peer.address` is set."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/database.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.system": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "db",
      "type": "span",
      "brief": "This span defines the attributes used to perform database client calls.",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the error code returned by the database or the client library, the canonical name of exception that occurred, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated (potentially using database system specific conventions) from most general to most specific namespace component, and more specific namespaces SHOULD NOT be captured without the more general namespaces, to ensure that \"startswith\" queries for the more general namespaces will be valid.\nSemantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "experimental"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The operation name MAY be parsed from the query text, in which case it SHOULD be the first operation name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the operation name is parsed from the query text, it SHOULD be the first operation name found in the query.\nFor batch operations, if the individual operations are known to have the same operation name then that operation name SHOULD be used prepended by `BATCH `, otherwise `db.operation.name` SHOULD be `BATCH` or some other database system specific term if more applicable.\n",
          "stability": "experimental"
        },
        {
          "name": "db.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other_sql",
                "value": "other_sql",
                "brief": "Some other SQL database. Fallback only. See notes.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "adabas",
                "value": "adabas",
                "brief": "Adabas (Adaptable Database System)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cache",
                "value": "cache",
                "brief": "Deprecated, use `intersystems_cache` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `intersystems_cache`."
              },
              {
                "id": "intersystems_cache",
                "value": "intersystems_cache",
                "brief": "InterSystems Caché",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cassandra",
                "value": "cassandra",
                "brief": "Apache Cassandra",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "clickhouse",
                "value": "clickhouse",
                "brief": "ClickHouse",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cloudscape",
                "value": "cloudscape",
                "brief": "Deprecated, use `other_sql` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `other_sql`."
              },
              {
                "id": "cockroachdb",
                "value": "cockroachdb",
                "brief": "CockroachDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "coldfusion",
                "value": "coldfusion",
                "brief": "Deprecated, no replacement at this time.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Removed."
              },
              {
                "id": "cosmosdb",
                "value": "cosmosdb",
                "brief": "Microsoft Azure Cosmos DB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "couchbase",
                "value": "couchbase",
                "brief": "Couchbase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "couchdb",
                "value": "couchdb",
                "brief": "CouchDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "db2",
                "value": "db2",
                "brief": "IBM Db2",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "derby",
                "value": "derby",
                "brief": "Apache Derby",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dynamodb",
                "value": "dynamodb",
                "brief": "Amazon DynamoDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "edb",
                "value": "edb",
                "brief": "EnterpriseDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "elasticsearch",
                "value": "elasticsearch",
                "brief": "Elasticsearch",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "filemaker",
                "value": "filemaker",
                "brief": "FileMaker",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "firebird",
                "value": "firebird",
                "brief": "Firebird",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "firstsql",
                "value": "firstsql",
                "brief": "Deprecated, use `other_sql` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `other_sql`."
              },
              {
                "id": "geode",
                "value": "geode",
                "brief": "Apache Geode",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "h2",
                "value": "h2",
                "brief": "H2",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hanadb",
                "value": "hanadb",
                "brief": "SAP HANA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hbase",
                "value": "hbase",
                "brief": "Apache HBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hive",
                "value": "hive",
                "brief": "Apache Hive",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hsqldb",
                "value": "hsqldb",
                "brief": "HyperSQL DataBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "influxdb",
                "value": "influxdb",
                "brief": "InfluxDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "informix",
                "value": "informix",
                "brief": "Informix",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ingres",
                "value": "ingres",
                "brief": "Ingres",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "instantdb",
                "value": "instantdb",
                "brief": "InstantDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "interbase",
                "value": "interbase",
                "brief": "InterBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mariadb",
                "value": "mariadb",
                "brief": "MariaDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "maxdb",
                "value": "maxdb",
                "brief": "SAP MaxDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "memcached",
                "value": "memcached",
                "brief": "Memcached",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mongodb",
                "value": "mongodb",
                "brief": "MongoDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mssql",
                "value": "mssql",
                "brief": "Microsoft SQL Server",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mssqlcompact",
                "value": "mssqlcompact",
                "brief": "Deprecated, Microsoft SQL Server Compact is discontinued.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Removed, use `other_sql` instead."
              },
              {
                "id": "mysql",
                "value": "mysql",
                "brief": "MySQL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "neo4j",
                "value": "neo4j",
                "brief": "Neo4j",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "netezza",
                "value": "netezza",
                "brief": "Netezza",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "opensearch",
                "value": "opensearch",
                "brief": "OpenSearch",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "oracle",
                "value": "oracle",
                "brief": "Oracle Database",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pervasive",
                "value": "pervasive",
                "brief": "Pervasive PSQL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pointbase",
                "value": "pointbase",
                "brief": "PointBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "postgresql",
                "value": "postgresql",
                "brief": "PostgreSQL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "progress",
                "value": "progress",
                "brief": "Progress Database",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "redis",
                "value": "redis",
                "brief": "Redis",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "redshift",
                "value": "redshift",
                "brief": "Amazon Redshift",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "spanner",
                "value": "spanner",
                "brief": "Cloud Spanner",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "sqlite",
                "value": "sqlite",
                "brief": "SQLite",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "sybase",
                "value": "sybase",
                "brief": "Sybase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "teradata",
                "value": "teradata",
                "brief": "Teradata",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "trino",
                "value": "trino",
                "brief": "Trino",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "vertica",
                "value": "vertica",
                "brief": "Vertica",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The database management system (DBMS) product as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system` is set to `postgresql` based on the instrumentation's best knowledge.\n",
          "stability": "experimental"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the database node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "recommended": "If applicable for this database system."
          },
          "note": "Semantic conventions for individual database systems SHOULD document whether `network.peer.*` attributes are applicable. Network peer address and port are useful when the application interacts with individual database nodes directly.\nIf a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        },
        {
          "name": "db.query.parameter",
          "type": "template[string]",
          "brief": "A query parameter used in `db.query.text`, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "Query parameters should only be captured when `db.query.text` is parameterized with placeholders.\nIf a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\n",
          "stability": "experimental"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The collection name MAY be parsed from the query text, in which case it SHOULD be the first collection name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the collection name is parsed from the query text, it SHOULD be the first collection name found in the query and it SHOULD match the value provided in the query text including any schema and database name prefix.\nFor batch operations, if the individual operations are known to have the same collection name then that collection name SHOULD be used, otherwise `db.collection.name` SHOULD NOT be captured.\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey \"WuValue\""
          ],
          "requirement_level": {
            "recommended": "SHOULD be collected by default only if there is sanitization that excludes sensitive information. See [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\n"
          },
          "note": "For sanitization see [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "experimental"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "if and only if `network.peer.address` is set."
          },
          "stability": "stable"
        }
      ],
      "span_kind": "client",
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/database.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.system": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "db.mssql",
      "type": "span",
      "brief": "Attributes for Microsoft SQL Server\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the error code returned by the database or the client library, the canonical name of exception that occurred, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.query.parameter",
          "type": "template[string]",
          "brief": "A query parameter used in `db.query.text`, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "Query parameters should only be captured when `db.query.text` is parameterized with placeholders.\nIf a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey \"WuValue\""
          ],
          "requirement_level": {
            "recommended": "SHOULD be collected by default only if there is sanitization that excludes sensitive information. See [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\n"
          },
          "note": "For sanitization see [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "experimental"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of the SQL table that the operation is acting upon.",
          "examples": [
            "users",
            "dbo.products"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The collection name MAY be parsed from the query text, in which case it SHOULD be the first collection name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the collection name is parsed from the query text, it SHOULD be the first collection name found in the query and it SHOULD match the value provided in the query text including any schema and database name prefix.\nFor batch operations, if the individual operations are known to have the same collection name then that collection name SHOULD be used, otherwise `db.collection.name` SHOULD NOT be captured.\n",
          "stability": "experimental"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.",
          "examples": [
            "instance1.products",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "When connecting to a default instance, `db.namespace` SHOULD be set to the name of the database. When connecting to a [named instance](https://learn.microsoft.com/sql/connect/jdbc/building-the-connection-url#named-and-multiple-sql-server-instances), `db.namespace` SHOULD be set to the combination of instance and database name following the `{instance_name}.{database_name}` pattern.\nFor commands that switch the database, this SHOULD be set to the target database (even if the command fails).",
          "stability": "experimental"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "SELECT",
            "INSERT",
            "UPDATE",
            "DELETE",
            "CREATE",
            "mystoredproc"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The operation name MAY be parsed from the query text, in which case it SHOULD be the first operation name found in the query.\n"
          },
          "note": "This SHOULD be the SQL command such as `SELECT`, `INSERT`, `UPDATE`, `CREATE`, `DROP`.\nIn the case of `EXEC`, this SHOULD be the stored procedure name that is being executed.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/database.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "db.query.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "db.cassandra",
      "type": "span",
      "brief": "Attributes for Cassandra\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the error code returned by the database or the client library, the canonical name of exception that occurred, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.cassandra.coordinator.dc",
          "type": "string",
          "brief": "The data center of the coordinating node for a query.\n",
          "examples": "us-west-2",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cassandra.coordinator.id",
          "type": "string",
          "brief": "The ID of the coordinating node for a query.\n",
          "examples": "be13faa2-8574-4d71-926d-27f16cf8a7af",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cassandra.consistency_level",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "all",
                "value": "all",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "each_quorum",
                "value": "each_quorum",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "quorum",
                "value": "quorum",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "local_quorum",
                "value": "local_quorum",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "one",
                "value": "one",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "two",
                "value": "two",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "three",
                "value": "three",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "local_one",
                "value": "local_one",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "any",
                "value": "any",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "serial",
                "value": "serial",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "local_serial",
                "value": "local_serial",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cassandra.idempotence",
          "type": "boolean",
          "brief": "Whether or not the query is idempotent.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cassandra.page_size",
          "type": "int",
          "brief": "The fetch size used for paging, i.e. how many rows will be returned at once.\n",
          "examples": [
            5000
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cassandra.speculative_execution_count",
          "type": "int",
          "brief": "The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n",
          "examples": [
            0,
            2
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The operation name MAY be parsed from the query text, in which case it SHOULD be the first operation name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the operation name is parsed from the query text, it SHOULD be the first operation name found in the query.\nFor batch operations, if the individual operations are known to have the same operation name then that operation name SHOULD be used prepended by `BATCH `, otherwise `db.operation.name` SHOULD be `BATCH` or some other database system specific term if more applicable.\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.parameter",
          "type": "template[string]",
          "brief": "A query parameter used in `db.query.text`, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "Query parameters should only be captured when `db.query.text` is parameterized with placeholders.\nIf a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey \"WuValue\""
          ],
          "requirement_level": {
            "recommended": "SHOULD be collected by default only if there is sanitization that excludes sensitive information. See [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\n"
          },
          "note": "For sanitization see [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "experimental"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "if and only if `network.peer.address` is set."
          },
          "stability": "stable"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of the Cassandra table that the operation is acting upon.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The collection name MAY be parsed from the query text, in which case it SHOULD be the first collection name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the collection name is parsed from the query text, it SHOULD be the first collection name found in the query and it SHOULD match the value provided in the query text including any schema and database name prefix.\nFor batch operations, if the individual operations are known to have the same collection name then that collection name SHOULD be used, otherwise `db.collection.name` SHOULD NOT be captured.\n",
          "stability": "experimental"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The Cassandra keyspace name.",
          "examples": [
            "mykeyspace"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "For commands that switch the keyspace, this SHOULD be set to the target keyspace (even if the command fails).",
          "stability": "experimental"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the database node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "If a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/database.yaml",
        "attributes": {
          "db.cassandra.consistency_level": {
            "source_group": "registry.db.cassandra",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.cassandra.coordinator.dc": {
            "source_group": "registry.db.cassandra",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.cassandra.coordinator.id": {
            "source_group": "registry.db.cassandra",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.cassandra.idempotence": {
            "source_group": "registry.db.cassandra",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.cassandra.page_size": {
            "source_group": "registry.db.cassandra",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.cassandra.speculative_execution_count": {
            "source_group": "registry.db.cassandra",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "db.hbase",
      "type": "span",
      "brief": "Attributes for HBase\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the error code returned by the database or the client library, the canonical name of exception that occurred, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The operation name MAY be parsed from the query text, in which case it SHOULD be the first operation name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the operation name is parsed from the query text, it SHOULD be the first operation name found in the query.\nFor batch operations, if the individual operations are known to have the same operation name then that operation name SHOULD be used prepended by `BATCH `, otherwise `db.operation.name` SHOULD be `BATCH` or some other database system specific term if more applicable.\n",
          "stability": "experimental"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The HBase table name.",
          "examples": [
            "mytable",
            "ns:table"
          ],
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "note": "If table name includes the namespace, the `db.collection.name` SHOULD be set to the full table name.\n",
          "stability": "experimental"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The HBase namespace.",
          "examples": [
            "mynamespace"
          ],
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "note": "When performing table-related operations, the instrumentations SHOULD extract the namespace from the table name according to the [HBase table naming conventions](https://hbase.apache.org/book.html#namespace_creation). If namespace is not provided, instrumentation SHOULD set `db.namespace` value to `default`.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/database.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "db.couchdb",
      "type": "span",
      "brief": "Attributes for CouchDB\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the error code returned by the database or the client library, the canonical name of exception that occurred, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "experimental"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The HTTP method + the target REST route.\n",
          "examples": [
            "GET /{db}/{docid}"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The operation name MAY be parsed from the query text, in which case it SHOULD be the first operation name found in the query.\n"
          },
          "note": "In **CouchDB**, `db.operation.name` should be set to the HTTP method + the target REST route according to the API reference documentation. For example, when retrieving a document, `db.operation.name` would be set to (literally, i.e., without replacing the placeholders with concrete values): [`GET /{db}/{docid}`](https://docs.couchdb.org/en/stable/api/document/common.html#get--db-docid).\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/database.yaml",
        "attributes": {
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "db.redis",
      "type": "span",
      "brief": "Attributes for Redis\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the error code returned by the database or the client library, the canonical name of exception that occurred, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The operation name MAY be parsed from the query text, in which case it SHOULD be the first operation name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the operation name is parsed from the query text, it SHOULD be the first operation name found in the query.\nFor batch operations, if the individual operations are known to have the same operation name then that operation name SHOULD be used prepended by `BATCH `, otherwise `db.operation.name` SHOULD be `BATCH` or some other database system specific term if more applicable.\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.parameter",
          "type": "template[string]",
          "brief": "A query parameter used in `db.query.text`, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "Query parameters should only be captured when `db.query.text` is parameterized with placeholders.\nIf a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\n",
          "stability": "experimental"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": {
            "recommended": "if and only if `network.peer.address` is set."
          },
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the database node where the operation was performed.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "If a database operation involved multiple network calls (for example retries), the address of the last contacted node SHOULD be used.\n",
          "stability": "stable"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select).\n",
          "examples": [
            "0",
            "1",
            "15"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if it can be captured reliably."
          },
          "note": "The database index for current connection can be changed by the application dynamically. Instrumentations MAY use the initial database index provided in the connection string and keep track of the currently selected database to capture the `db.namespace`.\nInstrumentations SHOULD NOT set this attribute if capturing it would require additional network calls to Redis.\nFor commands that switch the database, this SHOULD be set to the target database (even if the command fails).\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The full syntax of the Redis CLI command.\n",
          "examples": [
            "HMSET myhash field1 'Hello' field2 'World'"
          ],
          "requirement_level": {
            "recommended": "Non-parameterized query text SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data, e.g. by redacting all literal values present in the query text.\nParameterized query text SHOULD be collected by default (the query parameter values themselves are opt-in, see [`db.query.parameter.<key>`](../../docs/attributes-registry/db.md)).\n"
          },
          "note": "For **Redis**, the value provided for `db.query.text` SHOULD correspond to the syntax of the Redis CLI. If, for example, the [`HMSET` command](https://redis.io/commands/hmset) is invoked, `\"HMSET myhash field1 'Hello' field2 'World'\"` would be a suitable value for `db.query.text`.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/database.yaml",
        "attributes": {
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "network.peer.address": {
            "source_group": "registry.network",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "network.peer.port": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "db.mongodb",
      "type": "span",
      "brief": "Attributes for MongoDB\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the error code returned by the database or the client library, the canonical name of exception that occurred, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The MongoDB collection being accessed within the database stated in `db.namespace`.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": "required",
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the collection name is parsed from the query text, it SHOULD be the first collection name found in the query and it SHOULD match the value provided in the query text including any schema and database name prefix.\nFor batch operations, if the individual operations are known to have the same collection name then that collection name SHOULD be used, otherwise `db.collection.name` SHOULD NOT be captured.\n",
          "stability": "experimental"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The MongoDB database name.",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "experimental"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the command being executed.\n",
          "examples": [
            "findAndModify",
            "getMore",
            "update"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The operation name MAY be parsed from the query text, in which case it SHOULD be the first operation name found in the query.\n"
          },
          "note": "See [MongoDB database commands](https://www.mongodb.com/docs/manual/reference/command/).\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/database.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "db.elasticsearch",
      "type": "span",
      "brief": "Attributes for Elasticsearch\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the error code returned by the database or the client library, the canonical name of exception that occurred, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "url.full",
          "type": "string",
          "brief": "Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)",
          "examples": [
            "https://localhost:9200/index/_search?q=user.id:kimchy"
          ],
          "requirement_level": "required",
          "note": "For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment is not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.\n`url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case username and password SHOULD be redacted and attribute's value SHOULD be `https://REDACTED:REDACTED@www.example.com/`.\n`url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed). Sensitive content provided in `url.full` SHOULD be scrubbed when instrumentations can identify it.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "required",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The index or data stream against which the query is executed.",
          "examples": [
            "my_index",
            "index1, index2"
          ],
          "requirement_level": "recommended",
          "note": "The query may target multiple indices or data streams, in which case it SHOULD be a comma separated list of those. If the query doesn't target a specific index, this field MUST NOT be set.\n",
          "stability": "experimental"
        },
        {
          "name": "db.elasticsearch.node.name",
          "type": "string",
          "brief": "Represents the human-readable identifier of the node/instance to which a request was routed.\n",
          "examples": [
            "instance-0000000001"
          ],
          "requirement_level": "recommended",
          "note": "When communicating with an Elastic Cloud deployment, this should be collected from the \"X-Found-Handling-Instance\" HTTP response header.\n",
          "stability": "experimental"
        },
        {
          "name": "db.elasticsearch.path_parts",
          "type": "template[string]",
          "brief": "A dynamic value in the url path.\n",
          "examples": [
            "db.elasticsearch.path_parts.index=test-index",
            "db.elasticsearch.path_parts.doc_id=123"
          ],
          "requirement_level": {
            "conditionally_required": "when the url has dynamic values"
          },
          "note": "Many Elasticsearch url paths allow dynamic values. These SHOULD be recorded in span attributes in the format `db.elasticsearch.path_parts.<key>`, where `<key>` is the url path part name. The implementation SHOULD reference the [elasticsearch schema](https://raw.githubusercontent.com/elastic/elasticsearch-specification/main/output/schema/schema.json) in order to map the path part values to their names.\n",
          "stability": "experimental"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the Elasticsearch cluster which the client connects to.",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": "recommended",
          "note": "When communicating with an Elastic Cloud deployment, this should be collected from the \"X-Found-Handling-Cluster\" HTTP response header.\n",
          "stability": "experimental"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "search",
            "ml.close_job",
            "cat.aliases"
          ],
          "requirement_level": "required",
          "note": "The `db.operation.name` SHOULD match the endpoint identifier provided in the request (see the [Elasticsearch schema](https://raw.githubusercontent.com/elastic/elasticsearch-specification/main/output/schema/schema.json)).\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The request body for a [search-type query](https://www.elastic.co/guide/en/elasticsearch/reference/current/search.html), as a json string.",
          "examples": [
            "\"{\\\"query\\\":{\\\"term\\\":{\\\"user.id\\\":\\\"kimchy\\\"}}}\""
          ],
          "requirement_level": {
            "recommended": "Should be collected by default for search-type queries and only if there is sanitization that excludes sensitive information.\n"
          },
          "note": "For sanitization see [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/database.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "db.elasticsearch.node.name": {
            "source_group": "registry.db.elasticsearch",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "db.elasticsearch.path_parts": {
            "source_group": "registry.db.elasticsearch",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "http.request.method": {
            "source_group": "registry.http",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "url.full": {
            "source_group": "registry.url",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "db.sql",
      "type": "span",
      "brief": "Attributes for SQL databases\n",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the error code returned by the database or the client library, the canonical name of exception that occurred, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.query.parameter",
          "type": "template[string]",
          "brief": "A query parameter used in `db.query.text`, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "Query parameters should only be captured when `db.query.text` is parameterized with placeholders.\nIf a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey \"WuValue\""
          ],
          "requirement_level": {
            "recommended": "SHOULD be collected by default only if there is sanitization that excludes sensitive information. See [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\n"
          },
          "note": "For sanitization see [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "experimental"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of the SQL table that the operation is acting upon.",
          "examples": [
            "users",
            "dbo.products"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The collection name MAY be parsed from the query text, in which case it SHOULD be the first collection name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the collection name is parsed from the query text, it SHOULD be the first collection name found in the query and it SHOULD match the value provided in the query text including any schema and database name prefix.\nFor batch operations, if the individual operations are known to have the same collection name then that collection name SHOULD be used, otherwise `db.collection.name` SHOULD NOT be captured.\n",
          "stability": "experimental"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "SELECT",
            "INSERT",
            "UPDATE",
            "DELETE",
            "CREATE",
            "mystoredproc"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The operation name MAY be parsed from the query text, in which case it SHOULD be the first operation name found in the query.\n"
          },
          "note": "This SHOULD be the SQL command such as `SELECT`, `INSERT`, `UPDATE`, `CREATE`, `DROP`.\nIn the case of `EXEC`, this SHOULD be the stored procedure name that is being executed.\n",
          "stability": "experimental"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated\n(potentially using database system specific conventions) from most general to most\nspecific namespace component, and more specific namespaces SHOULD NOT be captured without\nthe more general namespaces, to ensure that \"startswith\" queries for the more general namespaces will be valid.\n\nUnless specified by the system-specific semantic convention, the `db.namespace` attribute matches\nthe name of the database being accessed.\n\nThe database name can usually be obtained with database driver API such as\n[JDBC `Connection.getCatalog()`](https://docs.oracle.com/javase/8/docs/api/java/sql/Connection.html#getCatalog--)\nor [.NET `SqlConnection.Database`](https://learn.microsoft.com/dotnet/api/system.data.sqlclient.sqlconnection.database).\n\nSome database drivers don't detect when the current database is changed (for example, with SQL `USE database` statement).\nInstrumentations that parse SQL statements MAY use the database name provided\nin the connection string and keep track of the currently selected database name.\n\nFor commands that switch the database, this SHOULD be set to the target database (even if the command fails).\n\nIf instrumentation cannot reliably determine the current database name, it SHOULD NOT set `db.namespace`.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/database.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "note",
              "requirement_level"
            ]
          },
          "db.query.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "db.cosmosdb",
      "type": "span",
      "brief": "Attributes for Cosmos DB.\n",
      "prefix": "db.cosmosdb",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the error code returned by the database or the client library, the canonical name of exception that occurred, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "user_agent.original",
          "type": "string",
          "brief": "Full user-agent string is generated by Cosmos DB SDK",
          "examples": [
            "cosmos-netstandard-sdk/3.23.0\\|3.23.1\\|1\\|X64\\|Linux 5.4.0-1098-azure 104 18\\|.NET Core 3.1.32\\|S\\|"
          ],
          "requirement_level": "recommended",
          "note": "The user-agent value is generated by SDK which is a combination of<br> `sdk_version` : Current version of SDK. e.g. 'cosmos-netstandard-sdk/3.23.0'<br> `direct_pkg_version` : Direct package version used by Cosmos DB SDK. e.g. '3.23.1'<br> `number_of_client_instances` : Number of cosmos client instances created by the application. e.g. '1'<br> `type_of_machine_architecture` : Machine architecture. e.g. 'X64'<br> `operating_system` : Operating System. e.g. 'Linux 5.4.0-1098-azure 104 18'<br> `runtime_framework` : Runtime Framework. e.g. '.NET Core 3.1.32'<br> `failover_information` : Generated key to determine if region failover enabled.\n   Format Reg-{D (Disabled discovery)}-S(application region)|L(List of preferred regions)|N(None, user did not configure it).\n   Default value is \"NS\".\n",
          "stability": "stable"
        },
        {
          "name": "db.cosmosdb.client_id",
          "type": "string",
          "brief": "Unique Cosmos client instance id.",
          "examples": "3ba4827d-4422-483f-b59f-85b74211c11d",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cosmosdb.request_content_length",
          "type": "int",
          "brief": "Request payload size in bytes",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The operation name MAY be parsed from the query text, in which case it SHOULD be the first operation name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the operation name is parsed from the query text, it SHOULD be the first operation name found in the query.\nFor batch operations, if the individual operations are known to have the same operation name then that operation name SHOULD be used prepended by `BATCH `, otherwise `db.operation.name` SHOULD be `BATCH` or some other database system specific term if more applicable.\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.parameter",
          "type": "template[string]",
          "brief": "A query parameter used in `db.query.text`, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "opt_in",
          "note": "Query parameters should only be captured when `db.query.text` is parameterized with placeholders.\nIf a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey \"WuValue\""
          ],
          "requirement_level": {
            "recommended": "SHOULD be collected by default only if there is sanitization that excludes sensitive information. See [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\n"
          },
          "note": "For sanitization see [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "experimental"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "stability": "experimental"
        },
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "Cosmos DB container name.\n",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": {
            "conditionally_required": "if available"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the collection name is parsed from the query text, it SHOULD be the first collection name found in the query and it SHOULD match the value provided in the query text including any schema and database name prefix.\nFor batch operations, if the individual operations are known to have the same collection name then that collection name SHOULD be used, otherwise `db.collection.name` SHOULD NOT be captured.\n",
          "stability": "experimental"
        },
        {
          "name": "db.cosmosdb.connection_mode",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "gateway",
                "value": "gateway",
                "brief": "Gateway (HTTP) connections mode",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "direct",
                "value": "direct",
                "brief": "Direct connection.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Cosmos client connection mode.",
          "requirement_level": {
            "conditionally_required": "if not `direct` (or pick gw as default)"
          },
          "stability": "experimental"
        },
        {
          "name": "db.cosmosdb.operation_type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "invalid",
                "value": "Invalid",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "create",
                "value": "Create",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "Patch",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "read",
                "value": "Read",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "read_feed",
                "value": "ReadFeed",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "Delete",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "replace",
                "value": "Replace",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "execute",
                "value": "Execute",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "query",
                "value": "Query",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "Head",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "head_feed",
                "value": "HeadFeed",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "upsert",
                "value": "Upsert",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "batch",
                "value": "Batch",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "query_plan",
                "value": "QueryPlan",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "execute_javascript",
                "value": "ExecuteJavaScript",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "CosmosDB Operation Type.",
          "requirement_level": {
            "conditionally_required": "when performing one of the operations in this list"
          },
          "stability": "experimental"
        },
        {
          "name": "db.cosmosdb.request_charge",
          "type": "double",
          "brief": "RU consumed for that operation",
          "examples": [
            46.18,
            1.0
          ],
          "requirement_level": {
            "conditionally_required": "when available"
          },
          "stability": "experimental"
        },
        {
          "name": "db.cosmosdb.status_code",
          "type": "int",
          "brief": "Cosmos DB status code.",
          "examples": [
            200,
            201
          ],
          "requirement_level": {
            "conditionally_required": "if response was received"
          },
          "stability": "experimental"
        },
        {
          "name": "db.cosmosdb.sub_status_code",
          "type": "int",
          "brief": "Cosmos DB sub status code.",
          "examples": [
            1000,
            1002
          ],
          "requirement_level": {
            "conditionally_required": "when response was received and contained sub-code."
          },
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/database.yaml",
        "attributes": {
          "db.collection.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "requirement_level"
            ]
          },
          "db.cosmosdb.client_id": {
            "source_group": "registry.db.cosmosdb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.cosmosdb.connection_mode": {
            "source_group": "registry.db.cosmosdb",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.cosmosdb.operation_type": {
            "source_group": "registry.db.cosmosdb",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.cosmosdb.request_charge": {
            "source_group": "registry.db.cosmosdb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.cosmosdb.request_content_length": {
            "source_group": "registry.db.cosmosdb",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "db.cosmosdb.status_code": {
            "source_group": "registry.db.cosmosdb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.cosmosdb.sub_status_code": {
            "source_group": "registry.db.cosmosdb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.namespace": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.parameter": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.query.text": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "user_agent.original": {
            "source_group": "registry.user_agent",
            "inherited_fields": [
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "note"
            ]
          }
        }
      }
    },
    {
      "id": "registry.exception",
      "type": "attribute_group",
      "brief": "This document defines the shared attributes used to report a single exception associated with a span or log.\n",
      "prefix": "exception",
      "attributes": [
        {
          "name": "exception.type",
          "type": "string",
          "brief": "The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n",
          "examples": [
            "java.net.ConnectException",
            "OSError"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "exception.message",
          "type": "string",
          "brief": "The exception message.",
          "examples": [
            "Division by zero",
            "Can't convert 'int' object to str implicitly"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "exception.stacktrace",
          "type": "string",
          "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n",
          "examples": "Exception in thread \"main\" java.lang.RuntimeException: Test exception\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)",
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "exception.escaped",
          "type": "boolean",
          "brief": "SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n",
          "requirement_level": "recommended",
          "note": "An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically \"in flight\".\nThis may be actually \"in flight\" in some languages (e.g. if the exception\nis passed to a Context manager's `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example for recording span exceptions](https://opentelemetry.io/docs/specs/semconv/exceptions/exceptions-spans/#recording-an-exception).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/exception.yaml"
      }
    },
    {
      "id": "log.record",
      "type": "attribute_group",
      "brief": "The attributes described in this section are rather generic. They may be used in any Log Record they apply to.\n",
      "attributes": [
        {
          "name": "log.record.uid",
          "type": "string",
          "brief": "A unique identifier for the Log Record.\n",
          "examples": [
            "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          ],
          "requirement_level": "opt_in",
          "note": "If an id is provided, other log records with the same id will be considered duplicates and can be removed safely. This means, that two distinguishable log records MUST have different values.\nThe id MAY be an [Universally Unique Lexicographically Sortable Identifier (ULID)](https://github.com/ulid/spec), but other identifiers (e.g. UUID) may be used as needed.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/logs/general.yaml",
        "attributes": {
          "log.record.uid": {
            "source_group": "registry.log.record",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "log-feature_flag",
      "type": "event",
      "brief": "This document defines attributes for feature flag evaluations represented using Log Records.\n",
      "attributes": [
        {
          "name": "feature_flag.key",
          "type": "string",
          "brief": "The unique identifier of the feature flag.",
          "examples": [
            "logo-color"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "feature_flag.provider_name",
          "type": "string",
          "brief": "The name of the service provider that performs the flag evaluation.",
          "examples": [
            "Flag Manager"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "feature_flag.variant",
          "type": "string",
          "brief": "SHOULD be a semantic identifier for a value. If one is unavailable, a stringified version of the value can be used.\n",
          "examples": [
            "red",
            "true",
            "on"
          ],
          "requirement_level": "recommended",
          "note": "A semantic identifier, commonly referred to as a variant, provides a means\nfor referring to a value without including the value itself. This can\nprovide additional context for understanding the meaning behind a value.\nFor example, the variant `red` maybe be used for the value `#c05543`.\n\nA stringified version of the value can be used in situations where a\nsemantic identifier is unavailable. String representation of the value\nshould be determined by the implementer.",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": "feature_flag",
      "lineage": {
        "source_file": "../semantic-conventions/model/logs/log-feature_flag.yaml",
        "attributes": {
          "feature_flag.key": {
            "source_group": "registry.feature_flag",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "feature_flag.provider_name": {
            "source_group": "registry.feature_flag",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "feature_flag.variant": {
            "source_group": "registry.feature_flag",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.cpu.time",
      "type": "metric",
      "brief": "Seconds each logical CPU spent on each mode",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.cpu.logical_number",
          "type": "int",
          "brief": "The logical CPU number [0..n-1]",
          "examples": [
            1
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "cpu.mode",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The CPU mode for this data point. A system's CPU SHOULD be characterized *either* by data points with no `mode` labels, *or only* data points with `mode` labels.",
          "examples": [
            "user",
            "system"
          ],
          "requirement_level": "recommended",
          "note": "Following states SHOULD be used: `user`, `system`, `nice`, `idle`, `iowait`, `interrupt`, `steal`",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.cpu.time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "cpu.mode": {
            "source_group": "registry.cpu",
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note"
            ]
          },
          "system.cpu.logical_number": {
            "source_group": "registry.system.cpu",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.cpu.utilization",
      "type": "metric",
      "brief": "Difference in system.cpu.time since the last measurement, divided by the elapsed time and number of logical CPUs",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.cpu.logical_number",
          "type": "int",
          "brief": "The logical CPU number [0..n-1]",
          "examples": [
            1
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "cpu.mode",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The CPU mode for this data point. A system's CPU SHOULD be characterized *either* by data points with no `mode` labels, *or only* data points with `mode` labels.",
          "examples": [
            "user",
            "system"
          ],
          "requirement_level": "recommended",
          "note": "Following modes SHOULD be used: `user`, `system`, `nice`, `idle`, `iowait`, `interrupt`, `steal`",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.cpu.utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "cpu.mode": {
            "source_group": "registry.cpu",
            "inherited_fields": [
              "examples",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note"
            ]
          },
          "system.cpu.logical_number": {
            "source_group": "registry.system.cpu",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.cpu.frequency",
      "type": "metric",
      "brief": "Reports the current frequency of the CPU in Hz",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.cpu.logical_number",
          "type": "int",
          "brief": "The logical CPU number [0..n-1]",
          "examples": [
            1
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.cpu.frequency",
      "instrument": "gauge",
      "unit": "{Hz}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "system.cpu.logical_number": {
            "source_group": "registry.system.cpu",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.cpu.physical.count",
      "type": "metric",
      "brief": "Reports the number of actual physical processor cores on the hardware",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.cpu.physical.count",
      "instrument": "updowncounter",
      "unit": "{cpu}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml"
      }
    },
    {
      "id": "metric.system.cpu.logical.count",
      "type": "metric",
      "brief": "Reports the number of logical (virtual) processor cores created by the operating system to manage multitasking",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.cpu.logical.count",
      "instrument": "updowncounter",
      "unit": "{cpu}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml"
      }
    },
    {
      "id": "metric.system.memory.usage",
      "type": "metric",
      "brief": "Reports memory in use by state.",
      "note": "The sum over all `system.memory.state` values SHOULD equal the total memory\navailable on the system, that is `system.memory.limit`.\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.memory.state",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "shared",
                "value": "shared",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": "Removed, report shared memory usage with `metric.system.memory.shared` metric"
              },
              {
                "id": "buffers",
                "value": "buffers",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cached",
                "value": "cached",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory state",
          "examples": [
            "free",
            "cached"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.memory.usage",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "system.memory.state": {
            "source_group": "registry.system.memory",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.memory.limit",
      "type": "metric",
      "brief": "Total memory available in the system.",
      "note": "Its value SHOULD equal the sum of `system.memory.state` over all states.\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.memory.limit",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml"
      }
    },
    {
      "id": "metric.system.memory.shared",
      "type": "metric",
      "brief": "Shared memory used (mostly by tmpfs).",
      "note": "Equivalent of `shared` from [`free` command](https://man7.org/linux/man-pages/man1/free.1.html) or\n`Shmem` from [`/proc/meminfo`](https://man7.org/linux/man-pages/man5/proc.5.html)\"\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.memory.shared",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml"
      }
    },
    {
      "id": "metric.system.memory.utilization",
      "type": "metric",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.memory.state",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "shared",
                "value": "shared",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": "Removed, report shared memory usage with `metric.system.memory.shared` metric"
              },
              {
                "id": "buffers",
                "value": "buffers",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cached",
                "value": "cached",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory state",
          "examples": [
            "free",
            "cached"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.memory.utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "system.memory.state": {
            "source_group": "registry.system.memory",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.paging.usage",
      "type": "metric",
      "brief": "Unix swap or windows pagefile usage",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.paging.state",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory paging state",
          "examples": [
            "free"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.paging.usage",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "system.paging.state": {
            "source_group": "registry.system.paging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.paging.utilization",
      "type": "metric",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.paging.state",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory paging state",
          "examples": [
            "free"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.paging.utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "system.paging.state": {
            "source_group": "registry.system.paging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.paging.faults",
      "type": "metric",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.paging.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "major",
                "value": "major",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "minor",
                "value": "minor",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory paging type",
          "examples": [
            "minor"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.paging.faults",
      "instrument": "counter",
      "unit": "{fault}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "system.paging.type": {
            "source_group": "registry.system.paging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.paging.operations",
      "type": "metric",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.paging.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "major",
                "value": "major",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "minor",
                "value": "minor",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The memory paging type",
          "examples": [
            "minor"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "system.paging.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "in",
                "value": "in",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "out",
                "value": "out",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The paging access direction",
          "examples": [
            "in"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.paging.operations",
      "instrument": "counter",
      "unit": "{operation}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "system.paging.direction": {
            "source_group": "registry.system.paging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.paging.type": {
            "source_group": "registry.system.paging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.disk.io",
      "type": "metric",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "disk.io.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "read",
                "value": "read",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "write",
                "value": "write",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The disk IO operation direction.",
          "examples": [
            "read"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.disk.io",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "disk.io.direction": {
            "source_group": "registry.disk",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.disk.operations",
      "type": "metric",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "disk.io.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "read",
                "value": "read",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "write",
                "value": "write",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The disk IO operation direction.",
          "examples": [
            "read"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.disk.operations",
      "instrument": "counter",
      "unit": "{operation}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "disk.io.direction": {
            "source_group": "registry.disk",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.disk.io_time",
      "type": "metric",
      "brief": "Time disk spent activated",
      "note": "The real elapsed time (\"wall clock\") used in the I/O path (time from operations running in parallel are not counted). Measured as:\n\n- Linux: Field 13 from [procfs-diskstats](https://www.kernel.org/doc/Documentation/ABI/testing/procfs-diskstats)\n- Windows: The complement of\n  [\"Disk\\% Idle Time\"](https://learn.microsoft.com/archive/blogs/askcore/windows-performance-monitor-disk-counters-explained#windows-performance-monitor-disk-counters-explained)\n  performance counter: `uptime * (100 - \"Disk\\% Idle Time\") / 100`\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.disk.io_time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.disk.operation_time",
      "type": "metric",
      "brief": "Sum of the time each operation took to complete",
      "note": "Because it is the sum of time each request took, parallel-issued requests each contribute to make the count grow. Measured as:\n\n- Linux: Fields 7 & 11 from [procfs-diskstats](https://www.kernel.org/doc/Documentation/ABI/testing/procfs-diskstats)\n- Windows: \"Avg. Disk sec/Read\" perf counter multiplied by \"Disk Reads/sec\" perf counter (similar for Writes)\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "disk.io.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "read",
                "value": "read",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "write",
                "value": "write",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The disk IO operation direction.",
          "examples": [
            "read"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.disk.operation_time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "disk.io.direction": {
            "source_group": "registry.disk",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.disk.merged",
      "type": "metric",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "disk.io.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "read",
                "value": "read",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "write",
                "value": "write",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The disk IO operation direction.",
          "examples": [
            "read"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.disk.merged",
      "instrument": "counter",
      "unit": "{operation}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "disk.io.direction": {
            "source_group": "registry.disk",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.filesystem.usage",
      "type": "metric",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "system.filesystem.state",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "reserved",
                "value": "reserved",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The filesystem state",
          "examples": [
            "used"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "system.filesystem.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "fat32",
                "value": "fat32",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "exfat",
                "value": "exfat",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ntfs",
                "value": "ntfs",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "refs",
                "value": "refs",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hfsplus",
                "value": "hfsplus",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ext4",
                "value": "ext4",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The filesystem type",
          "examples": [
            "ext4"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "system.filesystem.mode",
          "type": "string",
          "brief": "The filesystem mode",
          "examples": [
            "rw, ro"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "system.filesystem.mountpoint",
          "type": "string",
          "brief": "The filesystem mount path",
          "examples": [
            "/mnt/data"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.filesystem.usage",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.mode": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.mountpoint": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.state": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.type": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.filesystem.utilization",
      "type": "metric",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "system.filesystem.state",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "free",
                "value": "free",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "reserved",
                "value": "reserved",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The filesystem state",
          "examples": [
            "used"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "system.filesystem.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "fat32",
                "value": "fat32",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "exfat",
                "value": "exfat",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ntfs",
                "value": "ntfs",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "refs",
                "value": "refs",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hfsplus",
                "value": "hfsplus",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ext4",
                "value": "ext4",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The filesystem type",
          "examples": [
            "ext4"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "system.filesystem.mode",
          "type": "string",
          "brief": "The filesystem mode",
          "examples": [
            "rw, ro"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "system.filesystem.mountpoint",
          "type": "string",
          "brief": "The filesystem mount path",
          "examples": [
            "/mnt/data"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.filesystem.utilization",
      "instrument": "gauge",
      "unit": "1",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.mode": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.mountpoint": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.state": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.filesystem.type": {
            "source_group": "registry.system.filesystem",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.network.dropped",
      "type": "metric",
      "brief": "Count of packets that are dropped or discarded even though there was no error",
      "note": "Measured as:\n\n- Linux: the `drop` column in `/proc/dev/net` ([source](https://web.archive.org/web/20180321091318/http://www.onlamp.com/pub/a/linux/2000/11/16/LinuxAdmin.html))\n- Windows: [`InDiscards`/`OutDiscards`](https://docs.microsoft.com/windows/win32/api/netioapi/ns-netioapi-mib_if_row2)\n  from [`GetIfEntry2`](https://docs.microsoft.com/windows/win32/api/netioapi/nf-netioapi-getifentry2)\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.network.dropped",
      "instrument": "counter",
      "unit": "{packet}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.network.packets",
      "type": "metric",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.network.packets",
      "instrument": "counter",
      "unit": "{packet}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.network.errors",
      "type": "metric",
      "brief": "Count of network errors detected",
      "note": "Measured as:\n\n- Linux: the `errs` column in `/proc/dev/net` ([source](https://web.archive.org/web/20180321091318/http://www.onlamp.com/pub/a/linux/2000/11/16/LinuxAdmin.html)).\n- Windows: [`InErrors`/`OutErrors`](https://docs.microsoft.com/windows/win32/api/netioapi/ns-netioapi-mib_if_row2)\n  from [`GetIfEntry2`](https://docs.microsoft.com/windows/win32/api/netioapi/nf-netioapi-getifentry2).\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.network.errors",
      "instrument": "counter",
      "unit": "{error}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.network.io",
      "type": "metric",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.network.io",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.network.connections",
      "type": "metric",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "system.network.state",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "close",
                "value": "close",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "close_wait",
                "value": "close_wait",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "closing",
                "value": "closing",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "delete",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "established",
                "value": "established",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "fin_wait_1",
                "value": "fin_wait_1",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "fin_wait_2",
                "value": "fin_wait_2",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "last_ack",
                "value": "last_ack",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "listen",
                "value": "listen",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "syn_recv",
                "value": "syn_recv",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "syn_sent",
                "value": "syn_sent",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "time_wait",
                "value": "time_wait",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "A stateless protocol MUST NOT set this attribute",
          "examples": [
            "close_wait"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.network.connections",
      "instrument": "updowncounter",
      "unit": "{connection}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "network.transport": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.network.state": {
            "source_group": "registry.system.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.process.count",
      "type": "metric",
      "brief": "Total number of processes in each state",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.process.status",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "running",
                "value": "running",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "sleeping",
                "value": "sleeping",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "stopped",
                "value": "stopped",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "defunct",
                "value": "defunct",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The process state, e.g., [Linux Process State Codes](https://man7.org/linux/man-pages/man1/ps.1.html#PROCESS_STATE_CODES)\n",
          "examples": [
            "running"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "system.process.count",
      "instrument": "updowncounter",
      "unit": "{process}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml",
        "attributes": {
          "system.process.status": {
            "source_group": "registry.system.process",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.system.process.created",
      "type": "metric",
      "brief": "Total number of processes created over uptime of the host",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.process.created",
      "instrument": "counter",
      "unit": "{process}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml"
      }
    },
    {
      "id": "metric.system.linux.memory.available",
      "type": "metric",
      "brief": "An estimate of how much memory is available for starting new applications, without causing swapping",
      "note": "This is an alternative to `system.memory.usage` metric with `state=free`.\nLinux starting from 3.14 exports \"available\" memory. It takes \"free\" memory as a baseline, and then factors in kernel-specific values.\nThis is supposed to be more accurate than just \"free\" memory.\nFor reference, see the calculations [here](https://superuser.com/a/980821).\nSee also `MemAvailable` in [/proc/meminfo](https://man7.org/linux/man-pages/man5/proc.5.html).\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "system.linux.memory.available",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/system-metrics.yaml"
      }
    },
    {
      "id": "registry.event",
      "type": "attribute_group",
      "brief": "Attributes for Events represented using Log Records.\n",
      "prefix": "event",
      "attributes": [
        {
          "name": "event.name",
          "type": "string",
          "brief": "Identifies the class / type of event.\n",
          "examples": [
            "browser.mouse.click",
            "device.app.lifecycle"
          ],
          "requirement_level": "recommended",
          "note": "Event names are subject to the same rules as [attribute names](/docs/general/attribute-naming.md). Notably, event names are namespaced to avoid collisions and provide a clean separation of semantics for events in separate domains like browser, mobile, and kubernetes.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/event.yaml"
      }
    },
    {
      "id": "registry.faas",
      "type": "attribute_group",
      "brief": "FaaS attributes",
      "prefix": "faas",
      "attributes": [
        {
          "name": "faas.name",
          "type": "string",
          "brief": "The name of the single function that this runtime instance executes.\n",
          "examples": [
            "my-function",
            "myazurefunctionapp/some-function-name"
          ],
          "requirement_level": "recommended",
          "note": "This is the name of the function as configured/deployed on the FaaS\nplatform and is usually different from the name of the callback\nfunction (which may be stored in the\n[`code.namespace`/`code.function`](/docs/general/attributes.md#source-code-attributes)\nspan attributes).\n\nFor some cloud providers, the above definition is ambiguous. The following\ndefinition of function name MUST be used for this attribute\n(and consequently the span name) for the listed cloud providers/products:\n\n* **Azure:**  The full name `<FUNCAPP>/<FUNC>`, i.e., function app name\n  followed by a forward slash followed by the function name (this form\n  can also be seen in the resource JSON for the function).\n  This means that a span attribute MUST be used, as an Azure function\n  app can host multiple functions that would usually share\n  a TracerProvider (see also the `cloud.resource_id` attribute).\n",
          "stability": "experimental"
        },
        {
          "name": "faas.version",
          "type": "string",
          "brief": "The immutable version of the function being executed.",
          "examples": [
            "26",
            "pinkfroid-00002"
          ],
          "requirement_level": "recommended",
          "note": "Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run (Services):** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n",
          "stability": "experimental"
        },
        {
          "name": "faas.instance",
          "type": "string",
          "brief": "The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n",
          "examples": [
            "2021/06/28/[$LATEST]2f399eb14537447da05ab2a2e39309de"
          ],
          "requirement_level": "recommended",
          "note": "* **AWS Lambda:** Use the (full) log stream name.\n",
          "stability": "experimental"
        },
        {
          "name": "faas.max_memory",
          "type": "int",
          "brief": "The amount of memory available to the serverless function converted to Bytes.\n",
          "examples": 134217728,
          "requirement_level": "recommended",
          "note": "It's recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information (which must be multiplied by 1,048,576).\n",
          "stability": "experimental"
        },
        {
          "name": "faas.trigger",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "datasource",
                "value": "datasource",
                "brief": "A response to some data source operation such as a database or filesystem read/write",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "http",
                "value": "http",
                "brief": "To provide an answer to an inbound HTTP request",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pubsub",
                "value": "pubsub",
                "brief": "A function is set to be executed when messages are sent to a messaging system",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "timer",
                "value": "timer",
                "brief": "A function is scheduled to be executed regularly",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "If none of the others apply",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Type of the trigger which caused this function invocation.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "faas.invoked_name",
          "type": "string",
          "brief": "The name of the invoked function.\n",
          "examples": "my-function",
          "requirement_level": "recommended",
          "note": "SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n",
          "stability": "experimental"
        },
        {
          "name": "faas.invoked_provider",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "alibaba_cloud",
                "value": "alibaba_cloud",
                "brief": "Alibaba Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws",
                "value": "aws",
                "brief": "Amazon Web Services",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "azure",
                "value": "azure",
                "brief": "Microsoft Azure",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp",
                "value": "gcp",
                "brief": "Google Cloud Platform",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "tencent_cloud",
                "value": "tencent_cloud",
                "brief": "Tencent Cloud",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The cloud provider of the invoked function.\n",
          "requirement_level": "recommended",
          "note": "SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n",
          "stability": "experimental"
        },
        {
          "name": "faas.invoked_region",
          "type": "string",
          "brief": "The cloud region of the invoked function.\n",
          "examples": "eu-central-1",
          "requirement_level": "recommended",
          "note": "SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n",
          "stability": "experimental"
        },
        {
          "name": "faas.invocation_id",
          "type": "string",
          "brief": "The invocation ID of the current function invocation.\n",
          "examples": "af9d5aa4-a685-4c5f-a22b-444f80b3cc28",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "faas.time",
          "type": "string",
          "brief": "A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n",
          "examples": "2020-01-23T13:47:06Z",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "faas.cron",
          "type": "string",
          "brief": "A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n",
          "examples": "0/5 * * * ? *",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "faas.coldstart",
          "type": "boolean",
          "brief": "A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "faas.document.collection",
          "type": "string",
          "brief": "The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n",
          "examples": [
            "myBucketName",
            "myDbName"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "faas.document.operation",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "insert",
                "value": "insert",
                "brief": "When a new object is created.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "edit",
                "value": "edit",
                "brief": "When an object is modified.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "delete",
                "brief": "When an object is deleted.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes the type of the operation that was performed on the data.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "faas.document.time",
          "type": "string",
          "brief": "A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n",
          "examples": "2020-01-23T13:47:06Z",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "faas.document.name",
          "type": "string",
          "brief": "The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n",
          "examples": [
            "myFile.txt",
            "myTableName"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/faas.yaml"
      }
    },
    {
      "id": "registry.cloudevents",
      "type": "attribute_group",
      "brief": "This document defines attributes for CloudEvents.\n",
      "prefix": "cloudevents",
      "attributes": [
        {
          "name": "cloudevents.event_id",
          "type": "string",
          "brief": "The [event_id](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#id) uniquely identifies the event.\n",
          "examples": [
            "123e4567-e89b-12d3-a456-426614174000",
            "0001"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "cloudevents.event_source",
          "type": "string",
          "brief": "The [source](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#source-1) identifies the context in which an event happened.\n",
          "examples": [
            "https://github.com/cloudevents",
            "/cloudevents/spec/pull/123",
            "my-service"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "cloudevents.event_spec_version",
          "type": "string",
          "brief": "The [version of the CloudEvents specification](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#specversion) which the event uses.\n",
          "examples": "1.0",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "cloudevents.event_type",
          "type": "string",
          "brief": "The [event_type](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#type) contains a value describing the type of event related to the originating occurrence.\n",
          "examples": [
            "com.github.pull_request.opened",
            "com.example.object.deleted.v2"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "cloudevents.event_subject",
          "type": "string",
          "brief": "The [subject](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#subject) of the event in the context of the event producer (identified by source).\n",
          "examples": "mynewfile.jpg",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/cloudevents.yaml"
      }
    },
    {
      "id": "registry.http",
      "type": "attribute_group",
      "brief": "This document defines semantic convention attributes in the HTTP namespace.",
      "prefix": "http",
      "attributes": [
        {
          "name": "http.request.body.size",
          "type": "int",
          "brief": "The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
          "examples": 3495,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "http.request.header",
          "type": "template[string[]]",
          "brief": "HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            "http.request.header.content-type=[\"application/json\"]",
            "http.request.header.x-forwarded-for=[\"1.2.3.4\", \"1.2.3.5\"]"
          ],
          "requirement_level": "recommended",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured. Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\nThe `User-Agent` header is already captured in the `user_agent.original` attribute. Users MAY explicitly configure instrumentations to capture them even though it is not recommended.\nThe attribute value MUST consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "connect",
                "value": "CONNECT",
                "brief": "CONNECT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "DELETE",
                "brief": "DELETE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "get",
                "value": "GET",
                "brief": "GET method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "HEAD",
                "brief": "HEAD method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "options",
                "value": "OPTIONS",
                "brief": "OPTIONS method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "PATCH",
                "brief": "PATCH method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "post",
                "value": "POST",
                "brief": "POST method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "put",
                "value": "PUT",
                "brief": "PUT method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "trace",
                "value": "TRACE",
                "brief": "TRACE method.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "Any HTTP method that the instrumentation has no prior knowledge of.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "HTTP request method.",
          "examples": [
            "GET",
            "POST",
            "HEAD"
          ],
          "requirement_level": "recommended",
          "note": "HTTP request method value SHOULD be \"known\" to the instrumentation.\nBy default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\nand the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n\nIf the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER`.\n\nIf the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override\nthe list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named\nOTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n(this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n\nHTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.\nInstrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.\nTracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.\n",
          "stability": "stable"
        },
        {
          "name": "http.request.method_original",
          "type": "string",
          "brief": "Original HTTP method sent by the client in the request line.",
          "examples": [
            "GeT",
            "ACL",
            "foo"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "http.request.resend_count",
          "type": "int",
          "brief": "The ordinal number of request resending attempt (for any reason, including redirects).\n",
          "examples": 3,
          "requirement_level": "recommended",
          "note": "The resend count SHOULD be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n",
          "stability": "stable"
        },
        {
          "name": "http.request.size",
          "type": "int",
          "brief": "The total size of the request in bytes. This should be the total number of bytes sent over the wire, including the request line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and request body if any.\n",
          "examples": 1437,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "http.response.body.size",
          "type": "int",
          "brief": "The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n",
          "examples": 3495,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "http.response.header",
          "type": "template[string[]]",
          "brief": "HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n",
          "examples": [
            "http.response.header.content-type=[\"application/json\"]",
            "http.response.header.my-custom-header=[\"abc\", \"def\"]"
          ],
          "requirement_level": "recommended",
          "note": "Instrumentations SHOULD require an explicit configuration of which headers are to be captured. Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\nUsers MAY explicitly configure instrumentations to capture them even though it is not recommended.\nThe attribute value MUST consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n",
          "stability": "stable"
        },
        {
          "name": "http.response.size",
          "type": "int",
          "brief": "The total size of the response in bytes. This should be the total number of bytes sent over the wire, including the status line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and response body and trailers if any.\n",
          "examples": 1437,
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "http.response.status_code",
          "type": "int",
          "brief": "[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).",
          "examples": [
            200
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "http.route",
          "type": "string",
          "brief": "The matched route, that is, the path template in the format used by the respective server framework.\n",
          "examples": [
            "/users/:userID?",
            "{controller}/{action}/{id?}"
          ],
          "requirement_level": "recommended",
          "note": "MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\nSHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n",
          "stability": "stable"
        },
        {
          "name": "http.connection.state",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "active",
                "value": "active",
                "brief": "active state.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": "idle state.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "State of the HTTP connection in the HTTP connection pool.",
          "examples": [
            "active",
            "idle"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/http.yaml"
      }
    },
    {
      "id": "aws",
      "type": "span",
      "brief": "The `aws` conventions apply to operations using the AWS SDK. They map request or response parameters in AWS SDK API calls to attributes on a Span. The conventions have been collected over time based on feedback from AWS users of tracing and will continue to evolve as new interesting conventions are found.\nSome descriptions are also provided for populating general OpenTelemetry semantic conventions based on these APIs.\n",
      "prefix": "aws",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "dynamodb.all",
      "type": "span",
      "brief": "Attributes always filled for all DynamoDB request types.",
      "attributes": [
        {
          "name": "db.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other_sql",
                "value": "other_sql",
                "brief": "Some other SQL database. Fallback only. See notes.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "adabas",
                "value": "adabas",
                "brief": "Adabas (Adaptable Database System)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cache",
                "value": "cache",
                "brief": "Deprecated, use `intersystems_cache` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `intersystems_cache`."
              },
              {
                "id": "intersystems_cache",
                "value": "intersystems_cache",
                "brief": "InterSystems Caché",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cassandra",
                "value": "cassandra",
                "brief": "Apache Cassandra",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "clickhouse",
                "value": "clickhouse",
                "brief": "ClickHouse",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cloudscape",
                "value": "cloudscape",
                "brief": "Deprecated, use `other_sql` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `other_sql`."
              },
              {
                "id": "cockroachdb",
                "value": "cockroachdb",
                "brief": "CockroachDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "coldfusion",
                "value": "coldfusion",
                "brief": "Deprecated, no replacement at this time.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Removed."
              },
              {
                "id": "cosmosdb",
                "value": "cosmosdb",
                "brief": "Microsoft Azure Cosmos DB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "couchbase",
                "value": "couchbase",
                "brief": "Couchbase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "couchdb",
                "value": "couchdb",
                "brief": "CouchDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "db2",
                "value": "db2",
                "brief": "IBM Db2",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "derby",
                "value": "derby",
                "brief": "Apache Derby",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dynamodb",
                "value": "dynamodb",
                "brief": "Amazon DynamoDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "edb",
                "value": "edb",
                "brief": "EnterpriseDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "elasticsearch",
                "value": "elasticsearch",
                "brief": "Elasticsearch",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "filemaker",
                "value": "filemaker",
                "brief": "FileMaker",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "firebird",
                "value": "firebird",
                "brief": "Firebird",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "firstsql",
                "value": "firstsql",
                "brief": "Deprecated, use `other_sql` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `other_sql`."
              },
              {
                "id": "geode",
                "value": "geode",
                "brief": "Apache Geode",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "h2",
                "value": "h2",
                "brief": "H2",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hanadb",
                "value": "hanadb",
                "brief": "SAP HANA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hbase",
                "value": "hbase",
                "brief": "Apache HBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hive",
                "value": "hive",
                "brief": "Apache Hive",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hsqldb",
                "value": "hsqldb",
                "brief": "HyperSQL DataBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "influxdb",
                "value": "influxdb",
                "brief": "InfluxDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "informix",
                "value": "informix",
                "brief": "Informix",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ingres",
                "value": "ingres",
                "brief": "Ingres",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "instantdb",
                "value": "instantdb",
                "brief": "InstantDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "interbase",
                "value": "interbase",
                "brief": "InterBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mariadb",
                "value": "mariadb",
                "brief": "MariaDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "maxdb",
                "value": "maxdb",
                "brief": "SAP MaxDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "memcached",
                "value": "memcached",
                "brief": "Memcached",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mongodb",
                "value": "mongodb",
                "brief": "MongoDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mssql",
                "value": "mssql",
                "brief": "Microsoft SQL Server",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mssqlcompact",
                "value": "mssqlcompact",
                "brief": "Deprecated, Microsoft SQL Server Compact is discontinued.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Removed, use `other_sql` instead."
              },
              {
                "id": "mysql",
                "value": "mysql",
                "brief": "MySQL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "neo4j",
                "value": "neo4j",
                "brief": "Neo4j",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "netezza",
                "value": "netezza",
                "brief": "Netezza",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "opensearch",
                "value": "opensearch",
                "brief": "OpenSearch",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "oracle",
                "value": "oracle",
                "brief": "Oracle Database",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pervasive",
                "value": "pervasive",
                "brief": "Pervasive PSQL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pointbase",
                "value": "pointbase",
                "brief": "PointBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "postgresql",
                "value": "postgresql",
                "brief": "PostgreSQL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "progress",
                "value": "progress",
                "brief": "Progress Database",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "redis",
                "value": "redis",
                "brief": "Redis",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "redshift",
                "value": "redshift",
                "brief": "Amazon Redshift",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "spanner",
                "value": "spanner",
                "brief": "Cloud Spanner",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "sqlite",
                "value": "sqlite",
                "brief": "SQLite",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "sybase",
                "value": "sybase",
                "brief": "Sybase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "teradata",
                "value": "teradata",
                "brief": "Teradata",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "trino",
                "value": "trino",
                "brief": "Trino",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "vertica",
                "value": "vertica",
                "brief": "Vertica",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `dynamodb`.",
          "examples": [
            "dynamodb"
          ],
          "requirement_level": "required",
          "note": "The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system` is set to `postgresql` based on the instrumentation's best knowledge.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "db.system": {
            "source_group": "registry.db",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "dynamodb.shared",
      "type": "span",
      "brief": "Attributes that exist for multiple DynamoDB request types.",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "The keys in the `RequestItems` object field.",
          "examples": [
            "Users",
            "Cats"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.item_collection_metrics",
          "type": "string",
          "brief": "The JSON-serialized value of the `ItemCollectionMetrics` response field.",
          "examples": [
            "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.provisioned_read_capacity",
          "type": "double",
          "brief": "The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.",
          "examples": [
            1.0,
            2.0
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.provisioned_write_capacity",
          "type": "double",
          "brief": "The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.",
          "examples": [
            1.0,
            2.0
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consistent_read",
          "type": "boolean",
          "brief": "The value of the `ConsistentRead` request parameter.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.projection",
          "type": "string",
          "brief": "The value of the `ProjectionExpression` request parameter.",
          "examples": [
            "Title",
            "Title, Price, Color",
            "Title, Description, RelatedItems, ProductReviews"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.limit",
          "type": "int",
          "brief": "The value of the `Limit` request parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.attributes_to_get",
          "type": "string[]",
          "brief": "The value of the `AttributesToGet` request parameter.",
          "examples": [
            "lives",
            "id"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.index_name",
          "type": "string",
          "brief": "The value of the `IndexName` request parameter.",
          "examples": [
            "name_to_group"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.select",
          "type": "string",
          "brief": "The value of the `Select` request parameter.",
          "examples": [
            "ALL_ATTRIBUTES",
            "COUNT"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The same value as `rpc.method`.",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the operation name is parsed from the query text, it SHOULD be the first operation name found in the query.\nFor batch operations, if the individual operations are known to have the same operation name then that operation name SHOULD be used prepended by `BATCH `, otherwise `db.operation.name` SHOULD be `BATCH` or some other database system specific term if more applicable.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.dynamodb.attributes_to_get": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.consistent_read": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.index_name": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.item_collection_metrics": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.limit": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.projection": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.provisioned_read_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.provisioned_write_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.select": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "dynamodb.batchgetitem",
      "type": "span",
      "brief": "DynamoDB.BatchGetItem",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "The keys in the `RequestItems` object field.",
          "examples": [
            "Users",
            "Cats"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "dynamodb.batchwriteitem",
      "type": "span",
      "brief": "DynamoDB.BatchWriteItem",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "The keys in the `RequestItems` object field.",
          "examples": [
            "Users",
            "Cats"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.item_collection_metrics",
          "type": "string",
          "brief": "The JSON-serialized value of the `ItemCollectionMetrics` response field.",
          "examples": [
            "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.item_collection_metrics": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "dynamodb.createtable",
      "type": "span",
      "brief": "DynamoDB.CreateTable",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.item_collection_metrics",
          "type": "string",
          "brief": "The JSON-serialized value of the `ItemCollectionMetrics` response field.",
          "examples": [
            "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.provisioned_read_capacity",
          "type": "double",
          "brief": "The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.",
          "examples": [
            1.0,
            2.0
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.provisioned_write_capacity",
          "type": "double",
          "brief": "The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.",
          "examples": [
            1.0,
            2.0
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.global_secondary_indexes",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field",
          "examples": [
            "{ \"IndexName\": \"string\", \"KeySchema\": [ { \"AttributeName\": \"string\", \"KeyType\": \"string\" } ], \"Projection\": { \"NonKeyAttributes\": [ \"string\" ], \"ProjectionType\": \"string\" }, \"ProvisionedThroughput\": { \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.local_secondary_indexes",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.",
          "examples": [
            "{ \"IndexArn\": \"string\", \"IndexName\": \"string\", \"IndexSizeBytes\": number, \"ItemCount\": number, \"KeySchema\": [ { \"AttributeName\": \"string\", \"KeyType\": \"string\" } ], \"Projection\": { \"NonKeyAttributes\": [ \"string\" ], \"ProjectionType\": \"string\" } }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.global_secondary_indexes": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.item_collection_metrics": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.local_secondary_indexes": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.provisioned_read_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.provisioned_write_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "dynamodb.deleteitem",
      "type": "span",
      "brief": "DynamoDB.DeleteItem",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.item_collection_metrics",
          "type": "string",
          "brief": "The JSON-serialized value of the `ItemCollectionMetrics` response field.",
          "examples": [
            "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.item_collection_metrics": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "dynamodb.deletetable",
      "type": "span",
      "brief": "DynamoDB.DeleteTable",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "dynamodb.describetable",
      "type": "span",
      "brief": "DynamoDB.DescribeTable",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "dynamodb.getitem",
      "type": "span",
      "brief": "DynamoDB.GetItem",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consistent_read",
          "type": "boolean",
          "brief": "The value of the `ConsistentRead` request parameter.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.projection",
          "type": "string",
          "brief": "The value of the `ProjectionExpression` request parameter.",
          "examples": [
            "Title",
            "Title, Price, Color",
            "Title, Description, RelatedItems, ProductReviews"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.dynamodb.consistent_read": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.projection": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "dynamodb.listtables",
      "type": "span",
      "brief": "DynamoDB.ListTables",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.limit",
          "type": "int",
          "brief": "The value of the `Limit` request parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.exclusive_start_table",
          "type": "string",
          "brief": "The value of the `ExclusiveStartTableName` request parameter.",
          "examples": [
            "Users",
            "CatsTable"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.table_count",
          "type": "int",
          "brief": "The number of items in the `TableNames` response parameter.",
          "examples": [
            20
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.dynamodb.exclusive_start_table": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.limit": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_count": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "dynamodb.putitem",
      "type": "span",
      "brief": "DynamoDB.PutItem",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "The keys in the `RequestItems` object field.",
          "examples": [
            "Users",
            "Cats"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.item_collection_metrics",
          "type": "string",
          "brief": "The JSON-serialized value of the `ItemCollectionMetrics` response field.",
          "examples": [
            "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.item_collection_metrics": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "dynamodb.query",
      "type": "span",
      "brief": "DynamoDB.Query",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consistent_read",
          "type": "boolean",
          "brief": "The value of the `ConsistentRead` request parameter.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.projection",
          "type": "string",
          "brief": "The value of the `ProjectionExpression` request parameter.",
          "examples": [
            "Title",
            "Title, Price, Color",
            "Title, Description, RelatedItems, ProductReviews"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.limit",
          "type": "int",
          "brief": "The value of the `Limit` request parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.attributes_to_get",
          "type": "string[]",
          "brief": "The value of the `AttributesToGet` request parameter.",
          "examples": [
            "lives",
            "id"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.index_name",
          "type": "string",
          "brief": "The value of the `IndexName` request parameter.",
          "examples": [
            "name_to_group"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.select",
          "type": "string",
          "brief": "The value of the `Select` request parameter.",
          "examples": [
            "ALL_ATTRIBUTES",
            "COUNT"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.scan_forward",
          "type": "boolean",
          "brief": "The value of the `ScanIndexForward` request parameter.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.dynamodb.attributes_to_get": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.consistent_read": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.index_name": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.limit": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.projection": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.scan_forward": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.select": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "dynamodb.scan",
      "type": "span",
      "brief": "DynamoDB.Scan",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consistent_read",
          "type": "boolean",
          "brief": "The value of the `ConsistentRead` request parameter.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.projection",
          "type": "string",
          "brief": "The value of the `ProjectionExpression` request parameter.",
          "examples": [
            "Title",
            "Title, Price, Color",
            "Title, Description, RelatedItems, ProductReviews"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.limit",
          "type": "int",
          "brief": "The value of the `Limit` request parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.attributes_to_get",
          "type": "string[]",
          "brief": "The value of the `AttributesToGet` request parameter.",
          "examples": [
            "lives",
            "id"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.index_name",
          "type": "string",
          "brief": "The value of the `IndexName` request parameter.",
          "examples": [
            "name_to_group"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.select",
          "type": "string",
          "brief": "The value of the `Select` request parameter.",
          "examples": [
            "ALL_ATTRIBUTES",
            "COUNT"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.segment",
          "type": "int",
          "brief": "The value of the `Segment` request parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.total_segments",
          "type": "int",
          "brief": "The value of the `TotalSegments` request parameter.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.count",
          "type": "int",
          "brief": "The value of the `Count` response parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.scanned_count",
          "type": "int",
          "brief": "The value of the `ScannedCount` response parameter.",
          "examples": [
            50
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.dynamodb.attributes_to_get": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.consistent_read": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.count": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.index_name": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.limit": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.projection": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.scanned_count": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.segment": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.select": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.dynamodb.total_segments": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "dynamodb.updateitem",
      "type": "span",
      "brief": "DynamoDB.UpdateItem",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.item_collection_metrics",
          "type": "string",
          "brief": "The JSON-serialized value of the `ItemCollectionMetrics` response field.",
          "examples": [
            "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.item_collection_metrics": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "dynamodb.updatetable",
      "type": "span",
      "brief": "DynamoDB.UpdateTable",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.provisioned_read_capacity",
          "type": "double",
          "brief": "The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.",
          "examples": [
            1.0,
            2.0
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.provisioned_write_capacity",
          "type": "double",
          "brief": "The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.",
          "examples": [
            1.0,
            2.0
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.attribute_definitions",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `AttributeDefinitions` request field.",
          "examples": [
            "{ \"AttributeName\": \"string\", \"AttributeType\": \"string\" }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.global_secondary_index_updates",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `GlobalSecondaryIndexUpdates` request field.",
          "examples": [
            "{ \"Create\": { \"IndexName\": \"string\", \"KeySchema\": [ { \"AttributeName\": \"string\", \"KeyType\": \"string\" } ], \"Projection\": { \"NonKeyAttributes\": [ \"string\" ], \"ProjectionType\": \"string\" }, \"ProvisionedThroughput\": { \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "A single-element array with the value of the TableName request parameter.",
          "examples": [
            "Users"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.dynamodb.attribute_definitions": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.consumed_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.global_secondary_index_updates": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.provisioned_read_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.provisioned_write_capacity": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.dynamodb.table_names": {
            "source_group": "registry.aws.dynamodb",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          },
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "aws.s3",
      "type": "span",
      "brief": "Attributes that exist for S3 request types.",
      "attributes": [
        {
          "name": "rpc.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "grpc",
                "value": "grpc",
                "brief": "gRPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "java_rmi",
                "value": "java_rmi",
                "brief": "Java RMI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dotnet_wcf",
                "value": "dotnet_wcf",
                "brief": ".NET WCF",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "apache_dubbo",
                "value": "apache_dubbo",
                "brief": "Apache Dubbo",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "connect_rpc",
                "value": "connect_rpc",
                "brief": "Connect RPC",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The value `aws-api`.",
          "examples": [
            "aws-api"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "rpc.service",
          "type": "string",
          "brief": "The name of the service to which a request is made, as returned by the AWS SDK.",
          "examples": [
            "DynamoDB",
            "S3"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "rpc.method",
          "type": "string",
          "brief": "The name of the operation corresponding to the request, as returned by the AWS SDK",
          "examples": [
            "GetItem",
            "PutItem"
          ],
          "requirement_level": "recommended",
          "note": "This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.s3.bucket",
          "type": "string",
          "brief": "The S3 bucket name the request refers to. Corresponds to the `--bucket` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.",
          "examples": [
            "some-bucket-name"
          ],
          "requirement_level": "recommended",
          "note": "The `bucket` attribute is applicable to all S3 operations that reference a bucket, i.e. that require the bucket name as a mandatory parameter.\nThis applies to almost all S3 operations except `list-buckets`.\n",
          "stability": "experimental"
        },
        {
          "name": "aws.s3.key",
          "type": "string",
          "brief": "The S3 object key the request refers to. Corresponds to the `--key` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.",
          "examples": [
            "someFile.yml"
          ],
          "requirement_level": "recommended",
          "note": "The `key` attribute is applicable to all object-related S3 operations, i.e. that require the object key as a mandatory parameter.\nThis applies in particular to the following operations:\n\n- [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)\n- [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html)\n- [get-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/get-object.html)\n- [head-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/head-object.html)\n- [put-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/put-object.html)\n- [restore-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/restore-object.html)\n- [select-object-content](https://docs.aws.amazon.com/cli/latest/reference/s3api/select-object-content.html)\n- [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)\n- [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)\n- [create-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/create-multipart-upload.html)\n- [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)\n- [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)\n- [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)\n",
          "stability": "experimental"
        },
        {
          "name": "aws.s3.copy_source",
          "type": "string",
          "brief": "The source object (in the form `bucket`/`key`) for the copy operation.",
          "examples": [
            "someFile.yml"
          ],
          "requirement_level": "recommended",
          "note": "The `copy_source` attribute applies to S3 copy operations and corresponds to the `--copy-source` parameter\nof the [copy-object operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html).\nThis applies in particular to the following operations:\n\n- [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)\n- [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)\n",
          "stability": "experimental"
        },
        {
          "name": "aws.s3.upload_id",
          "type": "string",
          "brief": "Upload ID that identifies the multipart upload.",
          "examples": [
            "dfRtDYWFbkRONycy.Yxwh66Yjlx.cph0gtNBtJ"
          ],
          "requirement_level": "recommended",
          "note": "The `upload_id` attribute applies to S3 multipart-upload operations and corresponds to the `--upload-id` parameter\nof the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) multipart operations.\nThis applies in particular to the following operations:\n\n- [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)\n- [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)\n- [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)\n- [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)\n- [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)\n",
          "stability": "experimental"
        },
        {
          "name": "aws.s3.delete",
          "type": "string",
          "brief": "The delete request container that specifies the objects to be deleted.",
          "examples": [
            "Objects=[{Key=string,VersionId=string},{Key=string,VersionId=string}],Quiet=boolean"
          ],
          "requirement_level": "recommended",
          "note": "The `delete` attribute is only applicable to the [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html) operation.\nThe `delete` attribute corresponds to the `--delete` parameter of the\n[delete-objects operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-objects.html).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.s3.part_number",
          "type": "int",
          "brief": "The part number of the part being uploaded in a multipart-upload operation. This is a positive integer between 1 and 10,000.",
          "examples": [
            3456
          ],
          "requirement_level": "recommended",
          "note": "The `part_number` attribute is only applicable to the [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)\nand [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html) operations.\nThe `part_number` attribute corresponds to the `--part-number` parameter of the\n[upload-part operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html).\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/instrumentation/aws-sdk.yml",
        "attributes": {
          "aws.request_id": {
            "source_group": "registry.aws",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.s3.bucket": {
            "source_group": "registry.aws.s3",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.s3.copy_source": {
            "source_group": "registry.aws.s3",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.s3.delete": {
            "source_group": "registry.aws.s3",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.s3.key": {
            "source_group": "registry.aws.s3",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.s3.part_number": {
            "source_group": "registry.aws.s3",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.s3.upload_id": {
            "source_group": "registry.aws.s3",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "rpc.method": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.service": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples"
            ]
          },
          "rpc.system": {
            "source_group": "registry.rpc",
            "inherited_fields": [
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "examples",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.k8s.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated k8s attributes.",
      "attributes": [
        {
          "name": "k8s.pod.labels",
          "type": "template[string]",
          "brief": "Deprecated, use `k8s.pod.label` instead.",
          "examples": [
            "k8s.pod.label.app=my-app"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `k8s.pod.label`."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deprecated/k8s.yaml"
      }
    },
    {
      "id": "registry.system.deprecated",
      "type": "attribute_group",
      "brief": "Deprecated system attributes.",
      "attributes": [
        {
          "name": "system.processes.status",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "running",
                "value": "running",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "sleeping",
                "value": "sleeping",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "stopped",
                "value": "stopped",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "defunct",
                "value": "defunct",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `system.process.status` instead.",
          "examples": [
            "running"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `system.process.status`."
        },
        {
          "name": "system.cpu.state",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `cpu.mode` instead.",
          "examples": [
            "idle",
            "interrupt"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `cpu.mode`"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deprecated/system.yaml"
      }
    },
    {
      "id": "registry.destination",
      "type": "attribute_group",
      "brief": "These attributes may be used to describe the receiver of a network exchange/packet. These should be used when there is no client/server relationship between the two sides, or when that relationship is unknown. This covers low-level network interactions (e.g. packet tracing) where you don't know if there was a connection or which side initiated it. This also covers unidirectional UDP flows and peer-to-peer communication where the \"user-facing\" surface of the protocol / API doesn't expose a clear notion of client and server.\n",
      "prefix": "destination",
      "attributes": [
        {
          "name": "destination.address",
          "type": "string",
          "brief": "Destination address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "destination.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the source side, and when communicating through an intermediary, `destination.address` SHOULD represent the destination address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "experimental"
        },
        {
          "name": "destination.port",
          "type": "int",
          "brief": "Destination port number",
          "examples": [
            3389,
            2888
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/destination.yaml"
      }
    },
    {
      "id": "registry.v8js",
      "type": "attribute_group",
      "brief": "Describes V8 JS Engine Runtime related attributes.",
      "prefix": "v8js",
      "attributes": [
        {
          "name": "v8js.gc.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "major",
                "value": "major",
                "brief": "Major (Mark Sweep Compact).",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "minor",
                "value": "minor",
                "brief": "Minor (Scavenge).",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "incremental",
                "value": "incremental",
                "brief": "Incremental (Incremental Marking).",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "weakcb",
                "value": "weakcb",
                "brief": "Weak Callbacks (Process Weak Callbacks).",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of garbage collection.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "v8js.heap.space.name",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "new_space",
                "value": "new_space",
                "brief": "New memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "old_space",
                "value": "old_space",
                "brief": "Old memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "code_space",
                "value": "code_space",
                "brief": "Code memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "map_space",
                "value": "map_space",
                "brief": "Map memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "large_object_space",
                "value": "large_object_space",
                "brief": "Large object memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the space type of heap memory.",
          "requirement_level": "recommended",
          "note": "Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/v8js.yaml"
      }
    },
    {
      "id": "registry.oci.manifest",
      "type": "attribute_group",
      "brief": "An OCI image manifest.\n",
      "prefix": "oci.manifest",
      "attributes": [
        {
          "name": "oci.manifest.digest",
          "type": "string",
          "brief": "The digest of the OCI image manifest. For container images specifically is the digest by which the container image is known.\n",
          "examples": [
            "sha256:e4ca62c0d62f3e886e684806dfe9d4e0cda60d54986898173c1083856cfda0f4"
          ],
          "requirement_level": "recommended",
          "note": "Follows [OCI Image Manifest Specification](https://github.com/opencontainers/image-spec/blob/main/manifest.md), and specifically the [Digest property](https://github.com/opencontainers/image-spec/blob/main/descriptor.md#digests).\nAn example can be found in [Example Image Manifest](https://docs.docker.com/registry/spec/manifest-v2-2/#example-image-manifest).\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/oci.yaml"
      }
    },
    {
      "id": "registry.aws",
      "type": "attribute_group",
      "brief": "This document defines generic attributes for AWS services.\n",
      "prefix": "aws",
      "attributes": [
        {
          "name": "aws.request_id",
          "type": "string",
          "brief": "The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.",
          "examples": [
            "79b9da39-b7ae-508a-a6bc-864b2829c622",
            "C9ER4AJX75574TDJ"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/aws.yaml"
      }
    },
    {
      "id": "registry.aws.dynamodb",
      "type": "attribute_group",
      "brief": "This document defines attributes for AWS DynamoDB.\n",
      "prefix": "aws.dynamodb",
      "attributes": [
        {
          "name": "aws.dynamodb.table_names",
          "type": "string[]",
          "brief": "The keys in the `RequestItems` object field.",
          "examples": [
            "Users",
            "Cats"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consumed_capacity",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `ConsumedCapacity` response field.",
          "examples": [
            "{ \"CapacityUnits\": number, \"GlobalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"LocalSecondaryIndexes\": { \"string\" : { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }, \"ReadCapacityUnits\": number, \"Table\": { \"CapacityUnits\": number, \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number }, \"TableName\": \"string\", \"WriteCapacityUnits\": number }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.item_collection_metrics",
          "type": "string",
          "brief": "The JSON-serialized value of the `ItemCollectionMetrics` response field.",
          "examples": [
            "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.provisioned_read_capacity",
          "type": "double",
          "brief": "The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.",
          "examples": [
            1.0,
            2.0
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.provisioned_write_capacity",
          "type": "double",
          "brief": "The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.",
          "examples": [
            1.0,
            2.0
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.consistent_read",
          "type": "boolean",
          "brief": "The value of the `ConsistentRead` request parameter.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.projection",
          "type": "string",
          "brief": "The value of the `ProjectionExpression` request parameter.",
          "examples": [
            "Title",
            "Title, Price, Color",
            "Title, Description, RelatedItems, ProductReviews"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.limit",
          "type": "int",
          "brief": "The value of the `Limit` request parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.attributes_to_get",
          "type": "string[]",
          "brief": "The value of the `AttributesToGet` request parameter.",
          "examples": [
            "lives",
            "id"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.index_name",
          "type": "string",
          "brief": "The value of the `IndexName` request parameter.",
          "examples": [
            "name_to_group"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.select",
          "type": "string",
          "brief": "The value of the `Select` request parameter.",
          "examples": [
            "ALL_ATTRIBUTES",
            "COUNT"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.global_secondary_indexes",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field",
          "examples": [
            "{ \"IndexName\": \"string\", \"KeySchema\": [ { \"AttributeName\": \"string\", \"KeyType\": \"string\" } ], \"Projection\": { \"NonKeyAttributes\": [ \"string\" ], \"ProjectionType\": \"string\" }, \"ProvisionedThroughput\": { \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.local_secondary_indexes",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.",
          "examples": [
            "{ \"IndexArn\": \"string\", \"IndexName\": \"string\", \"IndexSizeBytes\": number, \"ItemCount\": number, \"KeySchema\": [ { \"AttributeName\": \"string\", \"KeyType\": \"string\" } ], \"Projection\": { \"NonKeyAttributes\": [ \"string\" ], \"ProjectionType\": \"string\" } }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.exclusive_start_table",
          "type": "string",
          "brief": "The value of the `ExclusiveStartTableName` request parameter.",
          "examples": [
            "Users",
            "CatsTable"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.table_count",
          "type": "int",
          "brief": "The number of items in the `TableNames` response parameter.",
          "examples": [
            20
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.scan_forward",
          "type": "boolean",
          "brief": "The value of the `ScanIndexForward` request parameter.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.segment",
          "type": "int",
          "brief": "The value of the `Segment` request parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.total_segments",
          "type": "int",
          "brief": "The value of the `TotalSegments` request parameter.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.count",
          "type": "int",
          "brief": "The value of the `Count` response parameter.",
          "examples": [
            10
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.scanned_count",
          "type": "int",
          "brief": "The value of the `ScannedCount` response parameter.",
          "examples": [
            50
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.attribute_definitions",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `AttributeDefinitions` request field.",
          "examples": [
            "{ \"AttributeName\": \"string\", \"AttributeType\": \"string\" }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.dynamodb.global_secondary_index_updates",
          "type": "string[]",
          "brief": "The JSON-serialized value of each item in the `GlobalSecondaryIndexUpdates` request field.",
          "examples": [
            "{ \"Create\": { \"IndexName\": \"string\", \"KeySchema\": [ { \"AttributeName\": \"string\", \"KeyType\": \"string\" } ], \"Projection\": { \"NonKeyAttributes\": [ \"string\" ], \"ProjectionType\": \"string\" }, \"ProvisionedThroughput\": { \"ReadCapacityUnits\": number, \"WriteCapacityUnits\": number } }"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/aws.yaml"
      }
    },
    {
      "id": "registry.aws.ecs",
      "type": "attribute_group",
      "brief": "This document defines attributes for AWS Elastic Container Service (ECS).\n",
      "prefix": "aws.ecs",
      "attributes": [
        {
          "name": "aws.ecs.container.arn",
          "type": "string",
          "brief": "The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n",
          "examples": [
            "arn:aws:ecs:us-west-1:123456789123:container/32624152-9086-4f0e-acae-1a75b14fe4d9"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.ecs.cluster.arn",
          "type": "string",
          "brief": "The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n",
          "examples": [
            "arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.ecs.launchtype",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ec2",
                "value": "ec2",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "fargate",
                "value": "fargate",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.ecs.task.arn",
          "type": "string",
          "brief": "The ARN of a running [ECS task](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids).\n",
          "examples": [
            "arn:aws:ecs:us-west-1:123456789123:task/10838bed-421f-43ef-870a-f43feacbbb5b",
            "arn:aws:ecs:us-west-1:123456789123:task/my-cluster/task-id/23ebb8ac-c18f-46c6-8bbe-d55d0e37cfbd"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.ecs.task.family",
          "type": "string",
          "brief": "The family name of the [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html) used to create the ECS task.\n",
          "examples": [
            "opentelemetry-family"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.ecs.task.id",
          "type": "string",
          "brief": "The ID of a running ECS task. The ID MUST be extracted from `task.arn`.\n",
          "examples": [
            "10838bed-421f-43ef-870a-f43feacbbb5b",
            "23ebb8ac-c18f-46c6-8bbe-d55d0e37cfbd"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if `task.arn` is populated."
          },
          "stability": "experimental"
        },
        {
          "name": "aws.ecs.task.revision",
          "type": "string",
          "brief": "The revision for the task definition used to create the ECS task.\n",
          "examples": [
            "8",
            "26"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/aws.yaml"
      }
    },
    {
      "id": "registry.aws.eks",
      "type": "attribute_group",
      "brief": "This document defines attributes for AWS Elastic Kubernetes Service (EKS).\n",
      "prefix": "aws.eks",
      "attributes": [
        {
          "name": "aws.eks.cluster.arn",
          "type": "string",
          "brief": "The ARN of an EKS cluster.\n",
          "examples": [
            "arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/aws.yaml"
      }
    },
    {
      "id": "registry.aws.log",
      "type": "attribute_group",
      "brief": "This document defines attributes for AWS Logs.\n",
      "prefix": "aws.log",
      "attributes": [
        {
          "name": "aws.log.group.names",
          "type": "string[]",
          "brief": "The name(s) of the AWS log group(s) an application is writing to.\n",
          "examples": [
            "/aws/lambda/my-function",
            "opentelemetry-service"
          ],
          "requirement_level": "recommended",
          "note": "Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n",
          "stability": "experimental"
        },
        {
          "name": "aws.log.group.arns",
          "type": "string[]",
          "brief": "The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n",
          "examples": [
            "arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:*"
          ],
          "requirement_level": "recommended",
          "note": "See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.log.stream.names",
          "type": "string[]",
          "brief": "The name(s) of the AWS log stream(s) an application is writing to.\n",
          "examples": [
            "logs/main/10838bed-421f-43ef-870a-f43feacbbb5b"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.log.stream.arns",
          "type": "string[]",
          "brief": "The ARN(s) of the AWS log stream(s).\n",
          "examples": [
            "arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:log-stream:logs/main/10838bed-421f-43ef-870a-f43feacbbb5b"
          ],
          "requirement_level": "recommended",
          "note": "See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/aws.yaml"
      }
    },
    {
      "id": "registry.aws.lambda",
      "type": "attribute_group",
      "brief": "This document defines attributes for AWS Lambda.\n",
      "prefix": "aws.lambda",
      "attributes": [
        {
          "name": "aws.lambda.invoked_arn",
          "type": "string",
          "brief": "The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n",
          "examples": [
            "arn:aws:lambda:us-east-1:123456:function:myfunction:myalias"
          ],
          "requirement_level": "recommended",
          "note": "This may be different from `cloud.resource_id` if an alias is involved.",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/aws.yaml"
      }
    },
    {
      "id": "registry.aws.s3",
      "type": "attribute_group",
      "brief": "This document defines attributes for AWS S3.\n",
      "prefix": "aws.s3",
      "attributes": [
        {
          "name": "aws.s3.bucket",
          "type": "string",
          "brief": "The S3 bucket name the request refers to. Corresponds to the `--bucket` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.",
          "examples": [
            "some-bucket-name"
          ],
          "requirement_level": "recommended",
          "note": "The `bucket` attribute is applicable to all S3 operations that reference a bucket, i.e. that require the bucket name as a mandatory parameter.\nThis applies to almost all S3 operations except `list-buckets`.\n",
          "stability": "experimental"
        },
        {
          "name": "aws.s3.key",
          "type": "string",
          "brief": "The S3 object key the request refers to. Corresponds to the `--key` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.",
          "examples": [
            "someFile.yml"
          ],
          "requirement_level": "recommended",
          "note": "The `key` attribute is applicable to all object-related S3 operations, i.e. that require the object key as a mandatory parameter.\nThis applies in particular to the following operations:\n\n- [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)\n- [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html)\n- [get-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/get-object.html)\n- [head-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/head-object.html)\n- [put-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/put-object.html)\n- [restore-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/restore-object.html)\n- [select-object-content](https://docs.aws.amazon.com/cli/latest/reference/s3api/select-object-content.html)\n- [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)\n- [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)\n- [create-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/create-multipart-upload.html)\n- [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)\n- [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)\n- [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)\n",
          "stability": "experimental"
        },
        {
          "name": "aws.s3.copy_source",
          "type": "string",
          "brief": "The source object (in the form `bucket`/`key`) for the copy operation.",
          "examples": [
            "someFile.yml"
          ],
          "requirement_level": "recommended",
          "note": "The `copy_source` attribute applies to S3 copy operations and corresponds to the `--copy-source` parameter\nof the [copy-object operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html).\nThis applies in particular to the following operations:\n\n- [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)\n- [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)\n",
          "stability": "experimental"
        },
        {
          "name": "aws.s3.upload_id",
          "type": "string",
          "brief": "Upload ID that identifies the multipart upload.",
          "examples": [
            "dfRtDYWFbkRONycy.Yxwh66Yjlx.cph0gtNBtJ"
          ],
          "requirement_level": "recommended",
          "note": "The `upload_id` attribute applies to S3 multipart-upload operations and corresponds to the `--upload-id` parameter\nof the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) multipart operations.\nThis applies in particular to the following operations:\n\n- [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)\n- [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)\n- [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)\n- [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)\n- [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)\n",
          "stability": "experimental"
        },
        {
          "name": "aws.s3.delete",
          "type": "string",
          "brief": "The delete request container that specifies the objects to be deleted.",
          "examples": [
            "Objects=[{Key=string,VersionId=string},{Key=string,VersionId=string}],Quiet=boolean"
          ],
          "requirement_level": "recommended",
          "note": "The `delete` attribute is only applicable to the [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html) operation.\nThe `delete` attribute corresponds to the `--delete` parameter of the\n[delete-objects operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-objects.html).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.s3.part_number",
          "type": "int",
          "brief": "The part number of the part being uploaded in a multipart-upload operation. This is a positive integer between 1 and 10,000.",
          "examples": [
            3456
          ],
          "requirement_level": "recommended",
          "note": "The `part_number` attribute is only applicable to the [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)\nand [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html) operations.\nThe `part_number` attribute corresponds to the `--part-number` parameter of the\n[upload-part operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html).\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/aws.yaml"
      }
    },
    {
      "id": "cloudevents",
      "type": "span",
      "brief": "This document defines attributes for CloudEvents. CloudEvents is a specification on how to define event data in a standard way. These attributes can be attached to spans when performing operations with CloudEvents, regardless of the protocol being used.\n",
      "attributes": [
        {
          "name": "cloudevents.event_spec_version",
          "type": "string",
          "brief": "The [version of the CloudEvents specification](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#specversion) which the event uses.\n",
          "examples": "1.0",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "cloudevents.event_type",
          "type": "string",
          "brief": "The [event_type](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#type) contains a value describing the type of event related to the originating occurrence.\n",
          "examples": [
            "com.github.pull_request.opened",
            "com.example.object.deleted.v2"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "cloudevents.event_subject",
          "type": "string",
          "brief": "The [subject](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#subject) of the event in the context of the event producer (identified by source).\n",
          "examples": "mynewfile.jpg",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "cloudevents.event_id",
          "type": "string",
          "brief": "The [event_id](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#id) uniquely identifies the event.\n",
          "examples": [
            "123e4567-e89b-12d3-a456-426614174000",
            "0001"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "cloudevents.event_source",
          "type": "string",
          "brief": "The [source](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#source-1) identifies the context in which an event happened.\n",
          "examples": [
            "https://github.com/cloudevents",
            "/cloudevents/spec/pull/123",
            "my-service"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/cloudevents.yaml",
        "attributes": {
          "cloudevents.event_id": {
            "source_group": "registry.cloudevents",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "cloudevents.event_source": {
            "source_group": "registry.cloudevents",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "cloudevents.event_spec_version": {
            "source_group": "registry.cloudevents",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "cloudevents.event_subject": {
            "source_group": "registry.cloudevents",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "cloudevents.event_type": {
            "source_group": "registry.cloudevents",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "attributes.db.client.minimal",
      "type": "attribute_group",
      "brief": "Database Client attributes",
      "attributes": [
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "timeout",
            "java.net.UnknownHostException",
            "server_certificate_invalid",
            "500"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the operation failed."
          },
          "note": "The `error.type` SHOULD match the error code returned by the database or the client library, the canonical name of exception that occurred, or another low-cardinality error identifier. Instrumentations SHOULD document the list of errors they report.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Name of the database host.\n",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent the server address behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": {
            "conditionally_required": "If using a port other than the default port for this DBMS and if `server.address` is set."
          },
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": {
            "conditionally_required": "If readily available. The operation name MAY be parsed from the query text, in which case it SHOULD be the first operation name found in the query.\n"
          },
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the operation name is parsed from the query text, it SHOULD be the first operation name found in the query.\nFor batch operations, if the individual operations are known to have the same operation name then that operation name SHOULD be used prepended by `BATCH `, otherwise `db.operation.name` SHOULD be `BATCH` or some other database system specific term if more applicable.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/db-common.yaml",
        "attributes": {
          "db.operation.name": {
            "source_group": "registry.db",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "examples",
              "note",
              "requirement_level",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.veightjs.gc.duration",
      "type": "metric",
      "brief": "Garbage collection duration.",
      "note": "The values can be retrieve from [`perf_hooks.PerformanceObserver(...).observe({ entryTypes: ['gc'] })`](https://nodejs.org/api/perf_hooks.html#performanceobserverobserveoptions)\n",
      "prefix": "v8js.gc",
      "stability": "experimental",
      "attributes": [
        {
          "name": "v8js.gc.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "major",
                "value": "major",
                "brief": "Major (Mark Sweep Compact).",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "minor",
                "value": "minor",
                "brief": "Minor (Scavenge).",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "incremental",
                "value": "incremental",
                "brief": "Incremental (Incremental Marking).",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "weakcb",
                "value": "weakcb",
                "brief": "Weak Callbacks (Process Weak Callbacks).",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of garbage collection.",
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "v8js.gc.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/v8js-metrics.yaml",
        "attributes": {
          "v8js.gc.type": {
            "source_group": "registry.v8js",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.veightjs.memory.heap.limit",
      "type": "metric",
      "brief": "Total heap memory size pre-allocated.",
      "note": "The value can be retrieved from value `space_size` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "v8js.heap.space.name",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "new_space",
                "value": "new_space",
                "brief": "New memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "old_space",
                "value": "old_space",
                "brief": "Old memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "code_space",
                "value": "code_space",
                "brief": "Code memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "map_space",
                "value": "map_space",
                "brief": "Map memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "large_object_space",
                "value": "large_object_space",
                "brief": "Large object memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the space type of heap memory.",
          "requirement_level": "required",
          "note": "Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "v8js.memory.heap.limit",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/v8js-metrics.yaml",
        "attributes": {
          "v8js.heap.space.name": {
            "source_group": "registry.v8js",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.veightjs.memory.heap.used",
      "type": "metric",
      "brief": "Heap Memory size allocated.",
      "note": "The value can be retrieved from value `space_used_size` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "v8js.heap.space.name",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "new_space",
                "value": "new_space",
                "brief": "New memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "old_space",
                "value": "old_space",
                "brief": "Old memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "code_space",
                "value": "code_space",
                "brief": "Code memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "map_space",
                "value": "map_space",
                "brief": "Map memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "large_object_space",
                "value": "large_object_space",
                "brief": "Large object memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the space type of heap memory.",
          "requirement_level": "required",
          "note": "Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "v8js.memory.heap.used",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/v8js-metrics.yaml",
        "attributes": {
          "v8js.heap.space.name": {
            "source_group": "registry.v8js",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.veightjs.heap.space.available_size",
      "type": "metric",
      "brief": "Heap space available size.",
      "note": "Value can be retrieved from value `space_available_size` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "v8js.heap.space.name",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "new_space",
                "value": "new_space",
                "brief": "New memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "old_space",
                "value": "old_space",
                "brief": "Old memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "code_space",
                "value": "code_space",
                "brief": "Code memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "map_space",
                "value": "map_space",
                "brief": "Map memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "large_object_space",
                "value": "large_object_space",
                "brief": "Large object memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the space type of heap memory.",
          "requirement_level": "required",
          "note": "Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "v8js.heap.space.available_size",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/v8js-metrics.yaml",
        "attributes": {
          "v8js.heap.space.name": {
            "source_group": "registry.v8js",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.veightjs.heap.space.physical_size",
      "type": "metric",
      "brief": "Committed size of a heap space.",
      "note": "Value can be retrieved from value `physical_space_size` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
      "prefix": "v8js.heap.space.physical_size",
      "stability": "experimental",
      "attributes": [
        {
          "name": "v8js.heap.space.name",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "new_space",
                "value": "new_space",
                "brief": "New memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "old_space",
                "value": "old_space",
                "brief": "Old memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "code_space",
                "value": "code_space",
                "brief": "Code memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "map_space",
                "value": "map_space",
                "brief": "Map memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "large_object_space",
                "value": "large_object_space",
                "brief": "Large object memory space.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The name of the space type of heap memory.",
          "requirement_level": "required",
          "note": "Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "v8js.heap.space.physical_size",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/v8js-metrics.yaml",
        "attributes": {
          "v8js.heap.space.name": {
            "source_group": "registry.v8js",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.container.cpu.time",
      "type": "metric",
      "brief": "Total CPU time consumed",
      "note": "Total CPU time consumed by the specific container on all available CPU cores\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "cpu.mode",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "nice",
                "value": "nice",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "iowait",
                "value": "iowait",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "interrupt",
                "value": "interrupt",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "steal",
                "value": "steal",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The CPU mode for this data point. A container's CPU metric SHOULD be characterized _either_ by data points with no `mode` labels, _or only_ data points with `mode` labels.",
          "examples": [
            "user",
            "system"
          ],
          "requirement_level": "opt_in",
          "note": "Following states SHOULD be used: `user`, `system`, `kernel`",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "container.cpu.time",
      "instrument": "counter",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/container.yaml",
        "attributes": {
          "cpu.mode": {
            "source_group": "registry.cpu",
            "inherited_fields": [
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "brief",
              "note",
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.container.memory.usage",
      "type": "metric",
      "brief": "Memory usage of the container.",
      "note": "Memory usage of the container.\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "container.memory.usage",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/container.yaml"
      }
    },
    {
      "id": "metric.container.disk.io",
      "type": "metric",
      "brief": "Disk bytes for the container.",
      "note": "The total number of bytes read/written successfully (aggregated from all disks).\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "disk.io.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "read",
                "value": "read",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "write",
                "value": "write",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The disk IO operation direction.",
          "examples": [
            "read"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "container.disk.io",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/container.yaml",
        "attributes": {
          "disk.io.direction": {
            "source_group": "registry.disk",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.container.network.io",
      "type": "metric",
      "brief": "Network bytes for the container.",
      "note": "The number of bytes sent/received on all network interfaces by the container.\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "system.device",
          "type": "string",
          "brief": "The device identifier",
          "examples": [
            "(identifier)"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "container.network.io",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/container.yaml",
        "attributes": {
          "network.io.direction": {
            "source_group": "registry.network",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "system.device": {
            "source_group": "registry.system",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.go.memory.used",
      "type": "metric",
      "brief": "Memory used by the Go runtime.",
      "note": "Computed from `(/memory/classes/total:bytes - /memory/classes/heap/released:bytes)`.\n",
      "prefix": "go.memory",
      "stability": "experimental",
      "attributes": [
        {
          "name": "go.memory.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "stack",
                "value": "stack",
                "brief": "Memory allocated from the heap that is reserved for stack space, whether or not it is currently in-use.",
                "note": "Computed from `/memory/classes/heap/stacks:bytes`.\n",
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "other",
                "value": "other",
                "brief": "Memory used by the Go runtime, excluding other categories of memory usage described in this enumeration.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of memory.",
          "examples": [
            "other",
            "stack"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "go.memory.used",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/go-metrics.yaml",
        "attributes": {
          "go.memory.type": {
            "source_group": "registry.go",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.go.memory.limit",
      "type": "metric",
      "brief": "Go runtime memory limit configured by the user, if a limit exists.",
      "note": "Computed from `/gc/gomemlimit:bytes`. This metric is excluded if the limit obtained from the Go runtime is math.MaxInt64.\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.memory.limit",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/go-metrics.yaml"
      }
    },
    {
      "id": "metric.go.memory.allocated",
      "type": "metric",
      "brief": "Memory allocated to the heap by the application.",
      "note": "Computed from `/gc/heap/allocs:bytes`.\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.memory.allocated",
      "instrument": "counter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/go-metrics.yaml"
      }
    },
    {
      "id": "metric.go.memory.allocations",
      "type": "metric",
      "brief": "Count of allocations to the heap by the application.",
      "note": "Computed from `/gc/heap/allocs:objects`.\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.memory.allocations",
      "instrument": "counter",
      "unit": "{allocation}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/go-metrics.yaml"
      }
    },
    {
      "id": "metric.go.memory.gc.goal",
      "type": "metric",
      "brief": "Heap size target for the end of the GC cycle.",
      "note": "Computed from `/gc/heap/goal:bytes`.\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.memory.gc.goal",
      "instrument": "updowncounter",
      "unit": "By",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/go-metrics.yaml"
      }
    },
    {
      "id": "metric.go.goroutine.count",
      "type": "metric",
      "brief": "Count of live goroutines.",
      "note": "Computed from `/sched/goroutines:goroutines`.\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.goroutine.count",
      "instrument": "updowncounter",
      "unit": "{goroutine}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/go-metrics.yaml"
      }
    },
    {
      "id": "metric.go.processor.limit",
      "type": "metric",
      "brief": "The number of OS threads that can execute user-level Go code simultaneously.",
      "note": "Computed from `/sched/gomaxprocs:threads`.\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.processor.limit",
      "instrument": "updowncounter",
      "unit": "{thread}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/go-metrics.yaml"
      }
    },
    {
      "id": "metric.go.schedule.duration",
      "type": "metric",
      "brief": "The time goroutines have spent in the scheduler in a runnable state before actually running.",
      "note": "Computed from `/sched/latencies:seconds`. Bucket boundaries are provided by the runtime, and are subject to change.\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.schedule.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/go-metrics.yaml"
      }
    },
    {
      "id": "metric.go.config.gogc",
      "type": "metric",
      "brief": "Heap size target percentage configured by the user, otherwise 100.",
      "note": "The value range is [0.0,100.0]. Computed from `/gc/gogc:percent`.\n",
      "stability": "experimental",
      "attributes": [],
      "span_kind": null,
      "events": [],
      "metric_name": "go.config.gogc",
      "instrument": "updowncounter",
      "unit": "%",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/go-metrics.yaml"
      }
    },
    {
      "id": "service_experimental",
      "type": "resource",
      "brief": "A service instance.\n",
      "prefix": "service",
      "attributes": [
        {
          "name": "service.namespace",
          "type": "string",
          "brief": "A namespace for `service.name`.\n",
          "examples": [
            "Shop"
          ],
          "requirement_level": "recommended",
          "note": "A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n",
          "stability": "experimental"
        },
        {
          "name": "service.instance.id",
          "type": "string",
          "brief": "The string ID of the service instance.\n",
          "examples": [
            "627cc493-f310-47de-96bd-71410b7dec09"
          ],
          "requirement_level": "recommended",
          "note": "MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words\n`service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to\ndistinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled\nservice).\n\nImplementations, such as SDKs, are recommended to generate a random Version 1 or Version 4 [RFC\n4122](https://www.ietf.org/rfc/rfc4122.txt) UUID, but are free to use an inherent unique ID as the source of\nthis value if stability is desirable. In that case, the ID SHOULD be used as source of a UUID Version 5 and\nSHOULD use the following UUID as the namespace: `4d63009a-8d0f-11ee-aad7-4c796ed8e320`.\n\nUUIDs are typically recommended, as only an opaque value for the purposes of identifying a service instance is\nneeded. Similar to what can be seen in the man page for the\n[`/etc/machine-id`](https://www.freedesktop.org/software/systemd/man/machine-id.html) file, the underlying\ndata, such as pod name and namespace should be treated as confidential, being the user's choice to expose it\nor not via another resource attribute.\n\nFor applications running behind an application server (like unicorn), we do not recommend using one identifier\nfor all processes participating in the application. Instead, it's recommended each division (e.g. a worker\nthread in unicorn) to have its own instance.id.\n\nIt's not recommended for a Collector to set `service.instance.id` if it can't unambiguously determine the\nservice instance that is generating that telemetry. For instance, creating an UUID based on `pod.name` will\nlikely be wrong, as the Collector might not know from which container within that pod the telemetry originated.\nHowever, Collectors can set the `service.instance.id` if they can unambiguously determine the service instance\nfor that telemetry. This is typically the case for scraping receivers, as they know the target address and\nport.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/service_experimental.yaml",
        "attributes": {
          "service.instance.id": {
            "source_group": "registry.service",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "service.namespace": {
            "source_group": "registry.service",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "deployment",
      "type": "resource",
      "brief": "The software deployment.\n",
      "attributes": [
        {
          "name": "deployment.environment",
          "type": "string",
          "brief": "Name of the [deployment environment](https://wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n",
          "examples": [
            "staging",
            "production"
          ],
          "requirement_level": "recommended",
          "note": "`deployment.environment` does not affect the uniqueness constraints defined through\nthe `service.namespace`, `service.name` and `service.instance.id` resource attributes.\nThis implies that resources carrying the following attribute combinations MUST be\nconsidered to be identifying the same service:\n\n* `service.name=frontend`, `deployment.environment=production`\n* `service.name=frontend`, `deployment.environment=staging`.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/deployment_environment.yaml",
        "attributes": {
          "deployment.environment": {
            "source_group": "registry.deployment",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "gcp.cloud_run",
      "type": "resource",
      "brief": "Resource used by Google Cloud Run.\n",
      "attributes": [
        {
          "name": "gcp.cloud_run.job.execution",
          "type": "string",
          "brief": "The name of the Cloud Run [execution](https://cloud.google.com/run/docs/managing/job-executions) being run for the Job, as set by the [`CLOUD_RUN_EXECUTION`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.\n",
          "examples": [
            "job-name-xxxx",
            "sample-job-mdw84"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gcp.cloud_run.job.task_index",
          "type": "int",
          "brief": "The index for a task within an execution as provided by the [`CLOUD_RUN_TASK_INDEX`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.\n",
          "examples": [
            0,
            1
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/cloud_provider/gcp/cloud_run.yaml",
        "attributes": {
          "gcp.cloud_run.job.execution": {
            "source_group": "registry.gcp.cloud_run",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "gcp.cloud_run.job.task_index": {
            "source_group": "registry.gcp.cloud_run",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "aws.log",
      "type": "resource",
      "brief": "Resources specific to Amazon Web Services.\n",
      "attributes": [
        {
          "name": "aws.log.group.names",
          "type": "string[]",
          "brief": "The name(s) of the AWS log group(s) an application is writing to.\n",
          "examples": [
            "/aws/lambda/my-function",
            "opentelemetry-service"
          ],
          "requirement_level": "recommended",
          "note": "Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n",
          "stability": "experimental"
        },
        {
          "name": "aws.log.group.arns",
          "type": "string[]",
          "brief": "The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n",
          "examples": [
            "arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:*"
          ],
          "requirement_level": "recommended",
          "note": "See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n",
          "stability": "experimental"
        },
        {
          "name": "aws.log.stream.names",
          "type": "string[]",
          "brief": "The name(s) of the AWS log stream(s) an application is writing to.\n",
          "examples": [
            "logs/main/10838bed-421f-43ef-870a-f43feacbbb5b"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "aws.log.stream.arns",
          "type": "string[]",
          "brief": "The ARN(s) of the AWS log stream(s).\n",
          "examples": [
            "arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:log-stream:logs/main/10838bed-421f-43ef-870a-f43feacbbb5b"
          ],
          "requirement_level": "recommended",
          "note": "See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/cloud_provider/aws/logs.yaml",
        "attributes": {
          "aws.log.group.arns": {
            "source_group": "registry.aws.log",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.log.group.names": {
            "source_group": "registry.aws.log",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.log.stream.arns": {
            "source_group": "registry.aws.log",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "aws.log.stream.names": {
            "source_group": "registry.aws.log",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "registry.network",
      "type": "attribute_group",
      "brief": "These attributes may be used for any network related operation.\n",
      "prefix": "network",
      "attributes": [
        {
          "name": "network.carrier.icc",
          "type": "string",
          "brief": "The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.",
          "examples": "DE",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.carrier.mcc",
          "type": "string",
          "brief": "The mobile carrier country code.",
          "examples": "310",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.carrier.mnc",
          "type": "string",
          "brief": "The mobile carrier network code.",
          "examples": "001",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.carrier.name",
          "type": "string",
          "brief": "The name of the mobile carrier.",
          "examples": "sprint",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.connection.subtype",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "gprs",
                "value": "gprs",
                "brief": "GPRS",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "edge",
                "value": "edge",
                "brief": "EDGE",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "umts",
                "value": "umts",
                "brief": "UMTS",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cdma",
                "value": "cdma",
                "brief": "CDMA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "evdo_0",
                "value": "evdo_0",
                "brief": "EVDO Rel. 0",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "evdo_a",
                "value": "evdo_a",
                "brief": "EVDO Rev. A",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cdma2000_1xrtt",
                "value": "cdma2000_1xrtt",
                "brief": "CDMA2000 1XRTT",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hsdpa",
                "value": "hsdpa",
                "brief": "HSDPA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hsupa",
                "value": "hsupa",
                "brief": "HSUPA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hspa",
                "value": "hspa",
                "brief": "HSPA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "iden",
                "value": "iden",
                "brief": "IDEN",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "evdo_b",
                "value": "evdo_b",
                "brief": "EVDO Rev. B",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "lte",
                "value": "lte",
                "brief": "LTE",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ehrpd",
                "value": "ehrpd",
                "brief": "EHRPD",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hspap",
                "value": "hspap",
                "brief": "HSPAP",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gsm",
                "value": "gsm",
                "brief": "GSM",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "td_scdma",
                "value": "td_scdma",
                "brief": "TD-SCDMA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "iwlan",
                "value": "iwlan",
                "brief": "IWLAN",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "nr",
                "value": "nr",
                "brief": "5G NR (New Radio)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "nrnsa",
                "value": "nrnsa",
                "brief": "5G NRNSA (New Radio Non-Standalone)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "lte_ca",
                "value": "lte_ca",
                "brief": "LTE CA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.",
          "examples": "LTE",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.connection.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "wifi",
                "value": "wifi",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "wired",
                "value": "wired",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cell",
                "value": "cell",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unavailable",
                "value": "unavailable",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "unknown",
                "value": "unknown",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The internet connection type.",
          "examples": "wifi",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "network.local.address",
          "type": "string",
          "brief": "Local address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.local.port",
          "type": "int",
          "brief": "Local port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.peer.address",
          "type": "string",
          "brief": "Peer address of the network connection - IP address or Unix domain socket name.",
          "examples": [
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.peer.port",
          "type": "int",
          "brief": "Peer port number of the network connection.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "network.protocol.name",
          "type": "string",
          "brief": "[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.",
          "examples": [
            "amqp",
            "http",
            "mqtt"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.protocol.version",
          "type": "string",
          "brief": "The actual version of the protocol used for network communication.",
          "examples": [
            "1.1",
            "2"
          ],
          "requirement_level": "recommended",
          "note": "If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.\n",
          "stability": "stable"
        },
        {
          "name": "network.transport",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "tcp",
                "value": "tcp",
                "brief": "TCP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "udp",
                "value": "udp",
                "brief": "UDP",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "pipe",
                "value": "pipe",
                "brief": "Named or anonymous pipe.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "unix",
                "value": "unix",
                "brief": "Unix domain socket",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI transport layer](https://osi-model.com/transport-layer/) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n",
          "examples": [
            "tcp",
            "udp"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.\n\nConsider always setting the transport when setting a port number, since\na port number is ambiguous without knowing the transport. For example\ndifferent processes could be listening on TCP port 12345 and UDP port 12345.\n",
          "stability": "stable"
        },
        {
          "name": "network.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ipv4",
                "value": "ipv4",
                "brief": "IPv4",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "ipv6",
                "value": "ipv6",
                "brief": "IPv6",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "[OSI network layer](https://osi-model.com/network-layer/) or non-OSI equivalent.",
          "examples": [
            "ipv4",
            "ipv6"
          ],
          "requirement_level": "recommended",
          "note": "The value SHOULD be normalized to lowercase.",
          "stability": "stable"
        },
        {
          "name": "network.io.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "transmit",
                "value": "transmit",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The network IO operation direction.",
          "examples": [
            "transmit"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/network.yaml"
      }
    },
    {
      "id": "registry.db",
      "type": "attribute_group",
      "brief": "This group defines the attributes used to describe telemetry in the context of databases.\n",
      "prefix": "db",
      "attributes": [
        {
          "name": "db.collection.name",
          "type": "string",
          "brief": "The name of a collection (table, container) within the database.",
          "examples": [
            "public.users",
            "customers"
          ],
          "requirement_level": "recommended",
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the collection name is parsed from the query text, it SHOULD be the first collection name found in the query and it SHOULD match the value provided in the query text including any schema and database name prefix.\nFor batch operations, if the individual operations are known to have the same collection name then that collection name SHOULD be used, otherwise `db.collection.name` SHOULD NOT be captured.\n",
          "stability": "experimental"
        },
        {
          "name": "db.namespace",
          "type": "string",
          "brief": "The name of the database, fully qualified within the server address and port.\n",
          "examples": [
            "customers",
            "test.users"
          ],
          "requirement_level": "recommended",
          "note": "If a database system has multiple namespace components, they SHOULD be concatenated (potentially using database system specific conventions) from most general to most specific namespace component, and more specific namespaces SHOULD NOT be captured without the more general namespaces, to ensure that \"startswith\" queries for the more general namespaces will be valid.\nSemantic conventions for individual database systems SHOULD document what `db.namespace` means in the context of that system.\nIt is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\n",
          "stability": "experimental"
        },
        {
          "name": "db.operation.name",
          "type": "string",
          "brief": "The name of the operation or command being executed.\n",
          "examples": [
            "findAndModify",
            "HMSET",
            "SELECT"
          ],
          "requirement_level": "recommended",
          "note": "It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.\nIf the operation name is parsed from the query text, it SHOULD be the first operation name found in the query.\nFor batch operations, if the individual operations are known to have the same operation name then that operation name SHOULD be used prepended by `BATCH `, otherwise `db.operation.name` SHOULD be `BATCH` or some other database system specific term if more applicable.\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.text",
          "type": "string",
          "brief": "The database query being executed.\n",
          "examples": [
            "SELECT * FROM wuser_table where username = ?",
            "SET mykey \"WuValue\""
          ],
          "requirement_level": "recommended",
          "note": "For sanitization see [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).\nFor batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator `; ` or some other database system specific separator if more applicable.\nEven though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n",
          "stability": "experimental"
        },
        {
          "name": "db.query.parameter",
          "type": "template[string]",
          "brief": "A query parameter used in `db.query.text`, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.\n",
          "examples": [
            "someval",
            "55"
          ],
          "requirement_level": "recommended",
          "note": "Query parameters should only be captured when `db.query.text` is parameterized with placeholders.\nIf a parameter has no name and instead is referenced only by index, then `<key>` SHOULD be the 0-based index.\n",
          "stability": "experimental"
        },
        {
          "name": "db.operation.batch.size",
          "type": "int",
          "brief": "The number of queries included in a [batch operation](/docs/database/database-spans.md#batch-operations).",
          "examples": [
            2,
            3,
            4
          ],
          "requirement_level": "recommended",
          "note": "Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` SHOULD never be `1`.\n",
          "stability": "experimental"
        },
        {
          "name": "db.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other_sql",
                "value": "other_sql",
                "brief": "Some other SQL database. Fallback only. See notes.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "adabas",
                "value": "adabas",
                "brief": "Adabas (Adaptable Database System)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cache",
                "value": "cache",
                "brief": "Deprecated, use `intersystems_cache` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `intersystems_cache`."
              },
              {
                "id": "intersystems_cache",
                "value": "intersystems_cache",
                "brief": "InterSystems Caché",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cassandra",
                "value": "cassandra",
                "brief": "Apache Cassandra",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "clickhouse",
                "value": "clickhouse",
                "brief": "ClickHouse",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cloudscape",
                "value": "cloudscape",
                "brief": "Deprecated, use `other_sql` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `other_sql`."
              },
              {
                "id": "cockroachdb",
                "value": "cockroachdb",
                "brief": "CockroachDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "coldfusion",
                "value": "coldfusion",
                "brief": "Deprecated, no replacement at this time.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Removed."
              },
              {
                "id": "cosmosdb",
                "value": "cosmosdb",
                "brief": "Microsoft Azure Cosmos DB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "couchbase",
                "value": "couchbase",
                "brief": "Couchbase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "couchdb",
                "value": "couchdb",
                "brief": "CouchDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "db2",
                "value": "db2",
                "brief": "IBM Db2",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "derby",
                "value": "derby",
                "brief": "Apache Derby",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dynamodb",
                "value": "dynamodb",
                "brief": "Amazon DynamoDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "edb",
                "value": "edb",
                "brief": "EnterpriseDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "elasticsearch",
                "value": "elasticsearch",
                "brief": "Elasticsearch",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "filemaker",
                "value": "filemaker",
                "brief": "FileMaker",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "firebird",
                "value": "firebird",
                "brief": "Firebird",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "firstsql",
                "value": "firstsql",
                "brief": "Deprecated, use `other_sql` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `other_sql`."
              },
              {
                "id": "geode",
                "value": "geode",
                "brief": "Apache Geode",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "h2",
                "value": "h2",
                "brief": "H2",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hanadb",
                "value": "hanadb",
                "brief": "SAP HANA",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hbase",
                "value": "hbase",
                "brief": "Apache HBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hive",
                "value": "hive",
                "brief": "Apache Hive",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hsqldb",
                "value": "hsqldb",
                "brief": "HyperSQL DataBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "influxdb",
                "value": "influxdb",
                "brief": "InfluxDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "informix",
                "value": "informix",
                "brief": "Informix",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "ingres",
                "value": "ingres",
                "brief": "Ingres",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "instantdb",
                "value": "instantdb",
                "brief": "InstantDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "interbase",
                "value": "interbase",
                "brief": "InterBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mariadb",
                "value": "mariadb",
                "brief": "MariaDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "maxdb",
                "value": "maxdb",
                "brief": "SAP MaxDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "memcached",
                "value": "memcached",
                "brief": "Memcached",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mongodb",
                "value": "mongodb",
                "brief": "MongoDB",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mssql",
                "value": "mssql",
                "brief": "Microsoft SQL Server",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mssqlcompact",
                "value": "mssqlcompact",
                "brief": "Deprecated, Microsoft SQL Server Compact is discontinued.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Removed, use `other_sql` instead."
              },
              {
                "id": "mysql",
                "value": "mysql",
                "brief": "MySQL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "neo4j",
                "value": "neo4j",
                "brief": "Neo4j",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "netezza",
                "value": "netezza",
                "brief": "Netezza",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "opensearch",
                "value": "opensearch",
                "brief": "OpenSearch",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "oracle",
                "value": "oracle",
                "brief": "Oracle Database",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pervasive",
                "value": "pervasive",
                "brief": "Pervasive PSQL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pointbase",
                "value": "pointbase",
                "brief": "PointBase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "postgresql",
                "value": "postgresql",
                "brief": "PostgreSQL",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "progress",
                "value": "progress",
                "brief": "Progress Database",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "redis",
                "value": "redis",
                "brief": "Redis",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "redshift",
                "value": "redshift",
                "brief": "Amazon Redshift",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "spanner",
                "value": "spanner",
                "brief": "Cloud Spanner",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "sqlite",
                "value": "sqlite",
                "brief": "SQLite",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "sybase",
                "value": "sybase",
                "brief": "Sybase",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "teradata",
                "value": "teradata",
                "brief": "Teradata",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "trino",
                "value": "trino",
                "brief": "Trino",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "vertica",
                "value": "vertica",
                "brief": "Vertica",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The database management system (DBMS) product as identified by the client instrumentation.",
          "requirement_level": "recommended",
          "note": "The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system` is set to `postgresql` based on the instrumentation's best knowledge.\n",
          "stability": "experimental"
        },
        {
          "name": "db.client.connection.state",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "idle",
                "value": "idle",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "used",
                "value": "used",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The state of a connection in the pool",
          "examples": [
            "idle"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.client.connection.pool.name",
          "type": "string",
          "brief": "The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation should use a combination of `server.address` and `server.port` attributes formatted as `server.address:server.port`.\n",
          "examples": [
            "myDataSource"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/db.yaml"
      }
    },
    {
      "id": "registry.db.cassandra",
      "type": "attribute_group",
      "brief": "This group defines attributes for Cassandra.\n",
      "prefix": "db",
      "attributes": [
        {
          "name": "db.cassandra.coordinator.dc",
          "type": "string",
          "brief": "The data center of the coordinating node for a query.\n",
          "examples": "us-west-2",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cassandra.coordinator.id",
          "type": "string",
          "brief": "The ID of the coordinating node for a query.\n",
          "examples": "be13faa2-8574-4d71-926d-27f16cf8a7af",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cassandra.consistency_level",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "all",
                "value": "all",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "each_quorum",
                "value": "each_quorum",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "quorum",
                "value": "quorum",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "local_quorum",
                "value": "local_quorum",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "one",
                "value": "one",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "two",
                "value": "two",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "three",
                "value": "three",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "local_one",
                "value": "local_one",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "any",
                "value": "any",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "serial",
                "value": "serial",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "local_serial",
                "value": "local_serial",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cassandra.idempotence",
          "type": "boolean",
          "brief": "Whether or not the query is idempotent.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cassandra.page_size",
          "type": "int",
          "brief": "The fetch size used for paging, i.e. how many rows will be returned at once.\n",
          "examples": [
            5000
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cassandra.speculative_execution_count",
          "type": "int",
          "brief": "The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n",
          "examples": [
            0,
            2
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/db.yaml"
      }
    },
    {
      "id": "registry.db.cosmosdb",
      "type": "attribute_group",
      "brief": "This group defines attributes for Azure Cosmos DB.\n",
      "prefix": "db",
      "attributes": [
        {
          "name": "db.cosmosdb.client_id",
          "type": "string",
          "brief": "Unique Cosmos client instance id.",
          "examples": "3ba4827d-4422-483f-b59f-85b74211c11d",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cosmosdb.connection_mode",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "gateway",
                "value": "gateway",
                "brief": "Gateway (HTTP) connections mode",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "direct",
                "value": "direct",
                "brief": "Direct connection.",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Cosmos client connection mode.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cosmosdb.operation_type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "invalid",
                "value": "Invalid",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "create",
                "value": "Create",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "patch",
                "value": "Patch",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "read",
                "value": "Read",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "read_feed",
                "value": "ReadFeed",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "delete",
                "value": "Delete",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "replace",
                "value": "Replace",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "execute",
                "value": "Execute",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "query",
                "value": "Query",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "head",
                "value": "Head",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "head_feed",
                "value": "HeadFeed",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "upsert",
                "value": "Upsert",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "batch",
                "value": "Batch",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "query_plan",
                "value": "QueryPlan",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "execute_javascript",
                "value": "ExecuteJavaScript",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "CosmosDB Operation Type.",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cosmosdb.request_charge",
          "type": "double",
          "brief": "RU consumed for that operation",
          "examples": [
            46.18,
            1.0
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cosmosdb.request_content_length",
          "type": "int",
          "brief": "Request payload size in bytes",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cosmosdb.status_code",
          "type": "int",
          "brief": "Cosmos DB status code.",
          "examples": [
            200,
            201
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.cosmosdb.sub_status_code",
          "type": "int",
          "brief": "Cosmos DB sub status code.",
          "examples": [
            1000,
            1002
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/db.yaml"
      }
    },
    {
      "id": "registry.db.elasticsearch",
      "type": "attribute_group",
      "brief": "This group defines attributes for Elasticsearch.\n",
      "prefix": "db",
      "attributes": [
        {
          "name": "db.elasticsearch.node.name",
          "type": "string",
          "brief": "Represents the human-readable identifier of the node/instance to which a request was routed.\n",
          "examples": [
            "instance-0000000001"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "db.elasticsearch.path_parts",
          "type": "template[string]",
          "brief": "A dynamic value in the url path.\n",
          "examples": [
            "db.elasticsearch.path_parts.index=test-index",
            "db.elasticsearch.path_parts.doc_id=123"
          ],
          "requirement_level": "recommended",
          "note": "Many Elasticsearch url paths allow dynamic values. These SHOULD be recorded in span attributes in the format `db.elasticsearch.path_parts.<key>`, where `<key>` is the url path part name. The implementation SHOULD reference the [elasticsearch schema](https://raw.githubusercontent.com/elastic/elasticsearch-specification/main/output/schema/schema.json) in order to map the path part values to their names.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/db.yaml"
      }
    },
    {
      "id": "trace-exception",
      "type": "event",
      "brief": "This document defines the attributes used to report a single exception associated with a span.\n",
      "prefix": "exception",
      "attributes": [
        {
          "name": "exception.stacktrace",
          "type": "string",
          "brief": "A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n",
          "examples": "Exception in thread \"main\" java.lang.RuntimeException: Test exception\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)",
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "exception.escaped",
          "type": "boolean",
          "brief": "SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n",
          "requirement_level": "recommended",
          "note": "An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically \"in flight\".\nThis may be actually \"in flight\" in some languages (e.g. if the exception\nis passed to a Context manager's `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example for recording span exceptions](https://opentelemetry.io/docs/specs/semconv/exceptions/exceptions-spans/#recording-an-exception).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.",
          "stability": "stable"
        },
        {
          "name": "exception.type",
          "type": "string",
          "brief": "The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n",
          "examples": [
            "java.net.ConnectException",
            "OSError"
          ],
          "requirement_level": {
            "conditionally_required": "Required if `exception.message` is not set, recommended otherwise."
          },
          "stability": "stable"
        },
        {
          "name": "exception.message",
          "type": "string",
          "brief": "The exception message.",
          "examples": [
            "Division by zero",
            "Can't convert 'int' object to str implicitly"
          ],
          "requirement_level": {
            "conditionally_required": "Required if `exception.type` is not set, recommended otherwise."
          },
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/trace/trace-exception.yaml",
        "attributes": {
          "exception.escaped": {
            "source_group": "registry.exception",
            "inherited_fields": [
              "brief",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "exception.message": {
            "source_group": "registry.exception",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "exception.stacktrace": {
            "source_group": "registry.exception",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "exception.type": {
            "source_group": "registry.exception",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.attributes",
      "type": "attribute_group",
      "brief": "Common messaging metrics attributes.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": {
            "conditionally_required": "if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated."
          },
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": {
            "conditionally_required": "if available."
          },
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/messaging-metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.destination.template": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.system": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.consumer.attributes",
      "type": "attribute_group",
      "brief": "Messaging consumer metrics attributes.",
      "stability": "experimental",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": {
            "conditionally_required": "if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated."
          },
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": {
            "conditionally_required": "if available."
          },
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "ack",
            "nack",
            "send"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "The name of the consumer group with which a consumer is associated.\n",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "The name of the destination subscription from which a message is consumed.",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/messaging-metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.destination.subscription.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.template": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.system": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.client.operation.duration",
      "type": "metric",
      "brief": "Duration of messaging operation initiated by a producer or consumer client.",
      "note": "This metric SHOULD NOT be used to report processing duration - processing duration is reported in `messaging.process.duration` metric.\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": {
            "conditionally_required": "if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated."
          },
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": {
            "conditionally_required": "if available."
          },
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "The name of the consumer group with which a consumer is associated.\n",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "The name of the destination subscription from which a message is consumed.",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "send",
            "receive",
            "ack"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "publish",
                "value": "publish",
                "brief": "One or more messages are provided for publishing to an intermediary. If a single message is published, the context of the \"Publish\" span can be used as the creation context and no \"Create\" span needs to be created.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "create",
                "value": "create",
                "brief": "A message is created. \"Create\" spans always refer to a single message and are used to provide a unique creation context for messages in batch publishing scenarios.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "receive",
                "value": "receive",
                "brief": "One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "process",
                "value": "process",
                "brief": "One or more messages are processed by a consumer.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "settle",
                "value": "settle",
                "brief": "One or more messages are settled.\n",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "deliver",
                "value": "deliver",
                "brief": "Deprecated. Use `process` instead.",
                "note": null,
                "stability": "experimental",
                "deprecated": "Replaced by `process`."
              }
            ]
          },
          "brief": "A string identifying the type of the messaging operation.\n",
          "requirement_level": {
            "conditionally_required": "If applicable."
          },
          "note": "If a custom value is used, it MUST be of low cardinality.",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.client.operation.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/messaging-metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.destination.subscription.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.template": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.operation.type": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.system": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.process.duration",
      "type": "metric",
      "brief": "Duration of processing operation.",
      "note": "This metric MUST be reported for operations with `messaging.operation.type` that matches `process`.\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": {
            "conditionally_required": "if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated."
          },
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": {
            "conditionally_required": "if available."
          },
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "The name of the consumer group with which a consumer is associated.\n",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "The name of the destination subscription from which a message is consumed.",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "process",
            "consume",
            "handle"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.process.duration",
      "instrument": "histogram",
      "unit": "s",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/messaging-metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.destination.subscription.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.template": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.system": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.client.published.messages",
      "type": "metric",
      "brief": "Number of messages producer attempted to publish to the broker.",
      "note": "This metric MUST NOT count messages that were created haven't yet been attempted to be published.\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": {
            "conditionally_required": "if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated."
          },
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": {
            "conditionally_required": "if available."
          },
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "send",
            "schedule",
            "enqueue"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.client.published.messages",
      "instrument": "counter",
      "unit": "{message}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/messaging-metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.destination.template": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.system": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "metric.messaging.client.consumed.messages",
      "type": "metric",
      "brief": "Number of messages that were delivered to the application.",
      "note": "Records the number of messages pulled from the broker or number of messages dispatched to the application in push-based scenarios.\nThe metric SHOULD be reported once per message delivery. For example, if receiving and processing operations are both instrumented for a single message delivery, this counter is incremented when the message is received and not reported when it is processed.\n",
      "stability": "experimental",
      "attributes": [
        {
          "name": "server.port",
          "type": "int",
          "brief": "Server port number.",
          "examples": [
            80,
            8080,
            443
          ],
          "requirement_level": "recommended",
          "note": "When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries, for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "server.address",
          "type": "string",
          "brief": "Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": {
            "conditionally_required": "If available."
          },
          "note": "Server domain name of the broker if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n",
          "stability": "stable"
        },
        {
          "name": "error.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "other",
                "value": "_OTHER",
                "brief": "A fallback error value to be used when the instrumentation doesn't define a custom value.\n",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Describes a class of error the operation ended with.\n",
          "examples": [
            "amqp:decode-error",
            "KAFKA_STORAGE_ERROR",
            "channel-error"
          ],
          "requirement_level": {
            "conditionally_required": "If and only if the messaging operation has failed."
          },
          "note": "The `error.type` SHOULD be predictable, and SHOULD have low cardinality.\n\nWhen `error.type` is set to a type (e.g., an exception type), its\ncanonical class name identifying the type within the artifact SHOULD be used.\n\nInstrumentations SHOULD document the list of errors they report.\n\nThe cardinality of `error.type` within one instrumentation library SHOULD be low.\nTelemetry consumers that aggregate data from multiple instrumentation libraries and applications\nshould be prepared for `error.type` to have high cardinality at query time when no\nadditional filters are applied.\n\nIf the operation has completed successfully, instrumentations SHOULD NOT set `error.type`.\n\nIf a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\nit's RECOMMENDED to:\n\n* Use a domain-specific attribute\n* Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n",
          "stability": "stable"
        },
        {
          "name": "messaging.destination.partition.id",
          "type": "string",
          "brief": "The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.\n",
          "examples": "1",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.name",
          "type": "string",
          "brief": "The message destination name",
          "examples": [
            "MyQueue",
            "MyTopic"
          ],
          "tag": "messaging-generic",
          "requirement_level": {
            "conditionally_required": "if and only if `messaging.destination.name` is known to have low cardinality. Otherwise, `messaging.destination.template` MAY be populated."
          },
          "note": "Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If\nthe broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.template",
          "type": "string",
          "brief": "Low cardinality representation of the messaging destination name",
          "examples": [
            "/customers/{customerId}"
          ],
          "requirement_level": {
            "conditionally_required": "if available."
          },
          "note": "Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "activemq",
                "value": "activemq",
                "brief": "Apache ActiveMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aws_sqs",
                "value": "aws_sqs",
                "brief": "Amazon Simple Queue Service (SQS)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventgrid",
                "value": "eventgrid",
                "brief": "Azure Event Grid",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "eventhubs",
                "value": "eventhubs",
                "brief": "Azure Event Hubs",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "servicebus",
                "value": "servicebus",
                "brief": "Azure Service Bus",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "gcp_pubsub",
                "value": "gcp_pubsub",
                "brief": "Google Cloud Pub/Sub",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "jms",
                "value": "jms",
                "brief": "Java Message Service",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "kafka",
                "value": "kafka",
                "brief": "Apache Kafka",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rabbitmq",
                "value": "rabbitmq",
                "brief": "RabbitMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "rocketmq",
                "value": "rocketmq",
                "brief": "Apache RocketMQ",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "pulsar",
                "value": "pulsar",
                "brief": "Apache Pulsar",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The messaging system as identified by the client instrumentation.",
          "requirement_level": "required",
          "note": "The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.consumer.group.name",
          "type": "string",
          "brief": "The name of the consumer group with which a consumer is associated.\n",
          "examples": [
            "my-group",
            "indexer"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.destination.subscription.name",
          "type": "string",
          "brief": "The name of the destination subscription from which a message is consumed.",
          "examples": [
            "subscription-a"
          ],
          "requirement_level": {
            "conditionally_required": "if applicable."
          },
          "note": "Semantic conventions for individual messaging systems SHOULD document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.\n",
          "stability": "experimental"
        },
        {
          "name": "messaging.operation.name",
          "type": "string",
          "brief": "The system-specific name of the messaging operation.\n",
          "examples": [
            "receive",
            "peek",
            "poll",
            "consume"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": "messaging.client.consumed.messages",
      "instrument": "counter",
      "unit": "{message}",
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/metrics/messaging-metrics.yaml",
        "attributes": {
          "error.type": {
            "source_group": "registry.error",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.consumer.group.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability",
              "tag"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.partition.id": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "messaging.destination.subscription.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.destination.template": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "messaging.operation.name": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "examples",
              "requirement_level"
            ]
          },
          "messaging.system": {
            "source_group": "registry.messaging",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "server.address": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "stability"
            ],
            "locally_overridden_fields": [
              "note",
              "requirement_level"
            ]
          },
          "server.port": {
            "source_group": "registry.server",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "os",
      "type": "resource",
      "brief": "The operating system (OS) on which the process represented by this resource is running.\n",
      "note": "In case of virtualized environments, this is the operating system as it is observed by the process, i.e., the virtualized guest rather than the underlying host.\n",
      "prefix": "os",
      "attributes": [
        {
          "name": "os.description",
          "type": "string",
          "brief": "Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n",
          "examples": [
            "Microsoft Windows [Version 10.0.18363.778]",
            "Ubuntu 18.04.1 LTS"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "os.name",
          "type": "string",
          "brief": "Human readable operating system name.",
          "examples": [
            "iOS",
            "Android",
            "Ubuntu"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "os.version",
          "type": "string",
          "brief": "The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).\n",
          "examples": [
            "14.2.1",
            "18.04.1"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "os.build_id",
          "type": "string",
          "brief": "Unique identifier for a particular build or compilation of the operating system.",
          "examples": [
            "TQ3C.230805.001.B2",
            "20E247",
            "22621"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "os.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "windows",
                "value": "windows",
                "brief": "Microsoft Windows",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "linux",
                "value": "linux",
                "brief": "Linux",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "darwin",
                "value": "darwin",
                "brief": "Apple Darwin",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "freebsd",
                "value": "freebsd",
                "brief": "FreeBSD",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "netbsd",
                "value": "netbsd",
                "brief": "NetBSD",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "openbsd",
                "value": "openbsd",
                "brief": "OpenBSD",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "dragonflybsd",
                "value": "dragonflybsd",
                "brief": "DragonFly BSD",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "hpux",
                "value": "hpux",
                "brief": "HP-UX (Hewlett Packard Unix)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "aix",
                "value": "aix",
                "brief": "AIX (Advanced Interactive eXecutive)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "solaris",
                "value": "solaris",
                "brief": "SunOS, Oracle Solaris",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "z_os",
                "value": "z_os",
                "brief": "IBM z/OS",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The operating system type.\n",
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/os.yaml",
        "attributes": {
          "os.build_id": {
            "source_group": "registry.os",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "os.description": {
            "source_group": "registry.os",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "os.name": {
            "source_group": "registry.os",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "os.type": {
            "source_group": "registry.os",
            "inherited_fields": [
              "brief",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "os.version": {
            "source_group": "registry.os",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "device",
      "type": "resource",
      "brief": "The device on which the process represented by this resource is running.\n",
      "prefix": "device",
      "attributes": [
        {
          "name": "device.id",
          "type": "string",
          "brief": "A unique identifier representing the device\n",
          "examples": [
            "2ab2916d-a51f-4ac8-80ee-45ac31a28092"
          ],
          "requirement_level": "recommended",
          "note": "The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n",
          "stability": "experimental"
        },
        {
          "name": "device.manufacturer",
          "type": "string",
          "brief": "The name of the device manufacturer\n",
          "examples": [
            "Apple",
            "Samsung"
          ],
          "requirement_level": "recommended",
          "note": "The Android OS provides this field via [Build](https://developer.android.com/reference/android/os/Build#MANUFACTURER). iOS apps SHOULD hardcode the value `Apple`.\n",
          "stability": "experimental"
        },
        {
          "name": "device.model.identifier",
          "type": "string",
          "brief": "The model identifier for the device\n",
          "examples": [
            "iPhone3,4",
            "SM-G920F"
          ],
          "requirement_level": "recommended",
          "note": "It's recommended this value represents a machine-readable version of the model identifier rather than the market or consumer-friendly name of the device.\n",
          "stability": "experimental"
        },
        {
          "name": "device.model.name",
          "type": "string",
          "brief": "The marketing name for the device model\n",
          "examples": [
            "iPhone 6s Plus",
            "Samsung Galaxy S6"
          ],
          "requirement_level": "recommended",
          "note": "It's recommended this value represents a human-readable version of the device model rather than a machine-readable alternative.\n",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/device.yaml",
        "attributes": {
          "device.id": {
            "source_group": "registry.device",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "device.manufacturer": {
            "source_group": "registry.device",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "device.model.identifier": {
            "source_group": "registry.device",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "device.model.name": {
            "source_group": "registry.device",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "webengine_resource",
      "type": "resource",
      "brief": "Resource describing the packaged software running the application code. Web engines are typically executed using process.runtime.\n",
      "attributes": [
        {
          "name": "webengine.version",
          "type": "string",
          "brief": "The version of the web engine.\n",
          "examples": [
            "21.0.0"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "webengine.description",
          "type": "string",
          "brief": "Additional description of the web engine (e.g. detailed version and edition information).\n",
          "examples": [
            "WildFly Full 21.0.0.Final (WildFly Core 13.0.1.Final) - 2.2.2.Final"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "webengine.name",
          "type": "string",
          "brief": "The name of the web engine.\n",
          "examples": [
            "WildFly"
          ],
          "requirement_level": "required",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/webengine.yaml",
        "attributes": {
          "webengine.description": {
            "source_group": "registry.webengine",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "webengine.name": {
            "source_group": "registry.webengine",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "webengine.version": {
            "source_group": "registry.webengine",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          }
        }
      }
    },
    {
      "id": "container",
      "type": "resource",
      "brief": "A container instance.\n",
      "prefix": "container",
      "attributes": [
        {
          "name": "container.name",
          "type": "string",
          "brief": "Container name used by container runtime.\n",
          "examples": [
            "opentelemetry-autoconf"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "container.id",
          "type": "string",
          "brief": "Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n",
          "examples": [
            "a3bf90e006b2"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "container.runtime",
          "type": "string",
          "brief": "The container runtime managing this container.\n",
          "examples": [
            "docker",
            "containerd",
            "rkt"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "container.image.name",
          "type": "string",
          "brief": "Name of the image the container was built on.\n",
          "examples": [
            "gcr.io/opentelemetry/operator"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "container.image.tags",
          "type": "string[]",
          "brief": "Container image tags. An example can be found in [Docker Image Inspect](https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect). Should be only the `<tag>` section of the full name for example from `registry.example.com/my-org/my-image:<tag>`.\n",
          "examples": [
            "v1.27.1",
            "3.5.7-0"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "container.image.id",
          "type": "string",
          "brief": "Runtime specific image identifier. Usually a hash algorithm followed by a UUID.\n",
          "examples": [
            "sha256:19c92d0a00d1b66d897bceaa7319bee0dd38a10a851c60bcec9474aa3f01e50f"
          ],
          "requirement_level": "recommended",
          "note": "Docker defines a sha256 of the image id; `container.image.id` corresponds to the `Image` field from the Docker container inspect [API](https://docs.docker.com/engine/api/v1.43/#tag/Container/operation/ContainerInspect) endpoint.\nK8s defines a link to the container registry repository with digest `\"imageID\": \"registry.azurecr.io /namespace/service/dockerfile@sha256:bdeabd40c3a8a492eaf9e8e44d0ebbb84bac7ee25ac0cf8a7159d25f62555625\"`.\nThe ID is assigned by the container runtime and can vary in different environments. Consider using `oci.manifest.digest` if it is important to identify the same image in different environments/runtimes.\n",
          "stability": "experimental"
        },
        {
          "name": "container.image.repo_digests",
          "type": "string[]",
          "brief": "Repo digests of the container image as provided by the container runtime.\n",
          "examples": [
            "example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb",
            "internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578"
          ],
          "requirement_level": "recommended",
          "note": "[Docker](https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect) and [CRI](https://github.com/kubernetes/cri-api/blob/c75ef5b473bbe2d0a4fc92f82235efd665ea8e9f/pkg/apis/runtime/v1/api.proto#L1237-L1238) report those under the `RepoDigests` field.\n",
          "stability": "experimental"
        },
        {
          "name": "container.label",
          "type": "template[string]",
          "brief": "Container labels, `<key>` being the label name, the value being the label value.\n",
          "examples": [
            "container.label.app=nginx"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "oci.manifest.digest",
          "type": "string",
          "brief": "The digest of the OCI image manifest. For container images specifically is the digest by which the container image is known.\n",
          "examples": [
            "sha256:e4ca62c0d62f3e886e684806dfe9d4e0cda60d54986898173c1083856cfda0f4"
          ],
          "requirement_level": "recommended",
          "note": "Follows [OCI Image Manifest Specification](https://github.com/opencontainers/image-spec/blob/main/manifest.md), and specifically the [Digest property](https://github.com/opencontainers/image-spec/blob/main/descriptor.md#digests).\nAn example can be found in [Example Image Manifest](https://docs.docker.com/registry/spec/manifest-v2-2/#example-image-manifest).\n",
          "stability": "experimental"
        },
        {
          "name": "container.command",
          "type": "string",
          "brief": "The command used to run the container (i.e. the command name).\n",
          "examples": [
            "otelcontribcol"
          ],
          "requirement_level": "opt_in",
          "note": "If using embedded credentials or sensitive data, it is recommended to remove them to prevent potential leakage.\n",
          "stability": "experimental"
        },
        {
          "name": "container.command_line",
          "type": "string",
          "brief": "The full command run by the container as a single string representing the full command. [2]\n",
          "examples": [
            "otelcontribcol --config config.yaml"
          ],
          "requirement_level": "opt_in",
          "stability": "experimental"
        },
        {
          "name": "container.command_args",
          "type": "string[]",
          "brief": "All the command arguments (including the command/executable itself) run by the container. [2]\n",
          "examples": [
            "otelcontribcol, --config, config.yaml"
          ],
          "requirement_level": "opt_in",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/resource/container.yaml",
        "attributes": {
          "container.command": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "container.command_args": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "container.command_line": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "stability"
            ],
            "locally_overridden_fields": [
              "requirement_level"
            ]
          },
          "container.id": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "container.image.id": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "container.image.name": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "container.image.repo_digests": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "container.image.tags": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "container.label": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "container.name": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "container.runtime": {
            "source_group": "registry.container",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          },
          "oci.manifest.digest": {
            "source_group": "registry.oci.manifest",
            "inherited_fields": [
              "brief",
              "examples",
              "note",
              "requirement_level",
              "stability"
            ]
          }
        }
      }
    },
    {
      "id": "registry.otel",
      "type": "attribute_group",
      "brief": "Attributes reserved for OpenTelemetry",
      "prefix": "otel",
      "attributes": [
        {
          "name": "otel.status_code",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "ok",
                "value": "OK",
                "brief": "The operation has been validated by an Application developer or Operator to have completed successfully.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              },
              {
                "id": "error",
                "value": "ERROR",
                "brief": "The operation contains an error.",
                "note": null,
                "stability": "stable",
                "deprecated": null
              }
            ]
          },
          "brief": "Name of the code, either \"OK\" or \"ERROR\". MUST NOT be set if the status code is UNSET.",
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "otel.status_description",
          "type": "string",
          "brief": "Description of the Status if it has a value, otherwise not set.",
          "examples": [
            "resource not found"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/otel.yaml"
      }
    },
    {
      "id": "registry.otel.scope",
      "type": "attribute_group",
      "brief": "Attributes used by non-OTLP exporters to represent OpenTelemetry Scope's concepts.",
      "prefix": "otel.scope",
      "attributes": [
        {
          "name": "otel.scope.name",
          "type": "string",
          "brief": "The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).",
          "examples": [
            "io.opentelemetry.contrib.mongodb"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        },
        {
          "name": "otel.scope.version",
          "type": "string",
          "brief": "The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).",
          "examples": [
            "1.0.0"
          ],
          "requirement_level": "recommended",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/otel.yaml"
      }
    },
    {
      "id": "registry.feature_flag",
      "type": "attribute_group",
      "brief": "This document defines attributes for Feature Flags.\n",
      "prefix": "feature_flag",
      "attributes": [
        {
          "name": "feature_flag.key",
          "type": "string",
          "brief": "The unique identifier of the feature flag.",
          "examples": [
            "logo-color"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "feature_flag.provider_name",
          "type": "string",
          "brief": "The name of the service provider that performs the flag evaluation.",
          "examples": [
            "Flag Manager"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "feature_flag.variant",
          "type": "string",
          "brief": "SHOULD be a semantic identifier for a value. If one is unavailable, a stringified version of the value can be used.\n",
          "examples": [
            "red",
            "true",
            "on"
          ],
          "requirement_level": "recommended",
          "note": "A semantic identifier, commonly referred to as a variant, provides a means\nfor referring to a value without including the value itself. This can\nprovide additional context for understanding the meaning behind a value.\nFor example, the variant `red` maybe be used for the value `#c05543`.\n\nA stringified version of the value can be used in situations where a\nsemantic identifier is unavailable. String representation of the value\nshould be determined by the implementer.",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/feature-flag.yaml"
      }
    },
    {
      "id": "registry.graphql",
      "type": "attribute_group",
      "brief": "This document defines attributes for GraphQL.",
      "prefix": "graphql",
      "attributes": [
        {
          "name": "graphql.operation.name",
          "type": "string",
          "brief": "The name of the operation being executed.",
          "examples": "findBookById",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "graphql.operation.type",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "query",
                "value": "query",
                "brief": "GraphQL query",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "mutation",
                "value": "mutation",
                "brief": "GraphQL mutation",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "subscription",
                "value": "subscription",
                "brief": "GraphQL subscription",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of the operation being executed.",
          "examples": [
            "query",
            "mutation",
            "subscription"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "graphql.document",
          "type": "string",
          "brief": "The GraphQL document being executed.",
          "examples": "query findBookById { bookById(id: ?) { name } }",
          "requirement_level": "recommended",
          "note": "The value may be sanitized to exclude sensitive information.",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/graphql.yaml"
      }
    },
    {
      "id": "registry.container.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated container attributes.",
      "attributes": [
        {
          "name": "container.labels",
          "type": "template[string]",
          "brief": "Deprecated, use `container.label` instead.",
          "examples": [
            "container.label.app=nginx"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `container.label`."
        },
        {
          "name": "container.cpu.state",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "user",
                "value": "user",
                "brief": "When tasks of the cgroup are in user mode (Linux). When all container processes are in user mode (Windows).",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "system",
                "value": "system",
                "brief": "When CPU is used by the system (host OS)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "kernel",
                "value": "kernel",
                "brief": "When tasks of the cgroup are in kernel mode (Linux). When all container processes are in kernel mode (Windows).",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "Deprecated, use `cpu.mode` instead.",
          "examples": [
            "user",
            "kernel"
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `cpu.mode`"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deprecated/container.yaml"
      }
    },
    {
      "id": "registry.gen_ai.deprecated",
      "type": "attribute_group",
      "brief": "Describes deprecated `gen_ai` attributes.",
      "attributes": [
        {
          "name": "gen_ai.usage.prompt_tokens",
          "type": "int",
          "brief": "Deprecated, use `gen_ai.usage.input_tokens` instead.",
          "examples": [
            42
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `gen_ai.usage.input_tokens` attribute."
        },
        {
          "name": "gen_ai.usage.completion_tokens",
          "type": "int",
          "brief": "Deprecated, use `gen_ai.usage.output_tokens` instead.",
          "examples": [
            42
          ],
          "requirement_level": "recommended",
          "stability": "experimental",
          "deprecated": "Replaced by `gen_ai.usage.output_tokens` attribute."
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/deprecated/gen-ai.yaml"
      }
    },
    {
      "id": "registry.file",
      "type": "attribute_group",
      "brief": "Describes file attributes.",
      "prefix": "file",
      "attributes": [
        {
          "name": "file.directory",
          "type": "string",
          "brief": "Directory where the file is located. It should include the drive letter, when appropriate.\n",
          "examples": [
            "/home/user",
            "C:\\Program Files\\MyApp"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "file.extension",
          "type": "string",
          "brief": "File extension, excluding the leading dot.\n",
          "examples": [
            "png",
            "gz"
          ],
          "requirement_level": "recommended",
          "note": "When the file name has multiple extensions (example.tar.gz), only the last one should be captured (\"gz\", not \"tar.gz\").\n",
          "stability": "experimental"
        },
        {
          "name": "file.name",
          "type": "string",
          "brief": "Name of the file including the extension, without the directory.\n",
          "examples": [
            "example.png"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "file.path",
          "type": "string",
          "brief": "Full path to the file, including the file name. It should include the drive letter, when appropriate.\n",
          "examples": [
            "/home/alice/example.png",
            "C:\\Program Files\\MyApp\\myapp.exe"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "file.size",
          "type": "int",
          "brief": "File size in bytes.\n",
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/file.yaml"
      }
    },
    {
      "id": "registry.disk",
      "type": "attribute_group",
      "brief": "These attributes may be used for any disk related operation.\n",
      "prefix": "disk",
      "attributes": [
        {
          "name": "disk.io.direction",
          "type": {
            "allow_custom_values": false,
            "members": [
              {
                "id": "read",
                "value": "read",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "write",
                "value": "write",
                "brief": null,
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The disk IO operation direction.",
          "examples": [
            "read"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/disk.yaml"
      }
    },
    {
      "id": "registry.user",
      "type": "attribute_group",
      "brief": "Describes information about the user.",
      "prefix": "user",
      "attributes": [
        {
          "name": "user.email",
          "type": "string",
          "brief": "User email address.\n",
          "examples": [
            "a.einstein@example.com"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "user.full_name",
          "type": "string",
          "brief": "User's full name\n",
          "examples": [
            "Albert Einstein"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "user.hash",
          "type": "string",
          "brief": "Unique user hash to correlate information for a user in anonymized form.\n",
          "examples": [
            "364fc68eaf4c8acec74a4e52d7d1feaa"
          ],
          "requirement_level": "recommended",
          "note": "Useful if `user.id` or `user.name` contain confidential information and cannot be used.\n",
          "stability": "experimental"
        },
        {
          "name": "user.id",
          "type": "string",
          "brief": "Unique identifier of the user.\n",
          "examples": [
            "S-1-5-21-202424912787-2692429404-2351956786-1000"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "user.name",
          "type": "string",
          "brief": "Short name or login/username of the user.\n",
          "examples": [
            "a.einstein"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "user.roles",
          "type": "string[]",
          "brief": "Array of user roles at the time of the event.\n",
          "examples": [
            "admin",
            "reporting_user"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/user.yaml"
      }
    },
    {
      "id": "registry.client",
      "type": "attribute_group",
      "brief": "These attributes may be used to describe the client in a connection-based network interaction where there is one side that initiates the connection (the client is the side that initiates the connection). This covers all TCP network interactions since TCP is connection-based and one side initiates the connection (an exception is made for peer-to-peer communication over TCP where the \"user-facing\" surface of the protocol / API doesn't expose a clear notion of client and server). This also covers UDP network interactions where one side initiates the interaction, e.g. QUIC (HTTP/3) and DNS.\n",
      "prefix": "client",
      "attributes": [
        {
          "name": "client.address",
          "type": "string",
          "brief": "Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.",
          "examples": [
            "client.example.com",
            "10.1.2.80",
            "/tmp/my.sock"
          ],
          "requirement_level": "recommended",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.address` SHOULD represent the client address behind any intermediaries,  for example proxies, if it's available.\n",
          "stability": "stable"
        },
        {
          "name": "client.port",
          "type": "int",
          "brief": "Client port number.",
          "examples": [
            65123
          ],
          "requirement_level": "recommended",
          "note": "When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries,  for example proxies, if it's available.\n",
          "stability": "stable"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/client.yaml"
      }
    },
    {
      "id": "registry.gen_ai",
      "type": "attribute_group",
      "brief": "This document defines the attributes used to describe telemetry in the context of Generative Artificial Intelligence (GenAI) Models requests and responses.\n",
      "prefix": "gen_ai",
      "attributes": [
        {
          "name": "gen_ai.system",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "openai",
                "value": "openai",
                "brief": "OpenAI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "vertex_ai",
                "value": "vertex_ai",
                "brief": "Vertex AI",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "anthropic",
                "value": "anthropic",
                "brief": "Anthropic",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "cohere",
                "value": "cohere",
                "brief": "Cohere",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The Generative AI product as identified by the client or server instrumentation.",
          "examples": "openai",
          "requirement_level": "recommended",
          "note": "The actual GenAI product may differ from the one identified by the client. For example, when using OpenAI client libraries to communicate with Mistral, the `gen_ai.system` is set to `openai` based on the instrumentation's best knowledge.\nFor custom model, a custom friendly name SHOULD be used. If none of these options apply, the `gen_ai.system` SHOULD be set to `_OTHER`.\n",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.model",
          "type": "string",
          "brief": "The name of the GenAI model a request is being made to.",
          "examples": "gpt-4",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.max_tokens",
          "type": "int",
          "brief": "The maximum number of tokens the model generates for a request.",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.temperature",
          "type": "double",
          "brief": "The temperature setting for the GenAI request.",
          "examples": [
            0.0
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.top_p",
          "type": "double",
          "brief": "The top_p sampling setting for the GenAI request.",
          "examples": [
            1.0
          ],
          "tag": "llm-generic-request",
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.top_k",
          "type": "double",
          "brief": "The top_k sampling setting for the GenAI request.",
          "examples": [
            1.0
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.stop_sequences",
          "type": "string[]",
          "brief": "List of sequences that the model will use to stop generating further tokens.",
          "examples": [
            "forest",
            "lived"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.frequency_penalty",
          "type": "double",
          "brief": "The frequency penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.request.presence_penalty",
          "type": "double",
          "brief": "The presence penalty setting for the GenAI request.",
          "examples": [
            0.1
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.response.id",
          "type": "string",
          "brief": "The unique identifier for the completion.",
          "examples": [
            "chatcmpl-123"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.response.model",
          "type": "string",
          "brief": "The name of the model that generated the response.",
          "examples": [
            "gpt-4-0613"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.response.finish_reasons",
          "type": "string[]",
          "brief": "Array of reasons the model stopped generating tokens, corresponding to each generation received.",
          "examples": [
            "stop"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.usage.input_tokens",
          "type": "int",
          "brief": "The number of tokens used in the GenAI input (prompt).",
          "examples": [
            100
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.usage.output_tokens",
          "type": "int",
          "brief": "The number of tokens used in the GenAI response (completion).",
          "examples": [
            180
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.token.type",
          "type": {
            "allow_custom_values": true,
            "members": [
              {
                "id": "input",
                "value": "input",
                "brief": "Input tokens (prompt, input, etc.)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              },
              {
                "id": "completion",
                "value": "output",
                "brief": "Output tokens (completion, response, etc.)",
                "note": null,
                "stability": "experimental",
                "deprecated": null
              }
            ]
          },
          "brief": "The type of token being counted.",
          "examples": [
            "input",
            "output"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.prompt",
          "type": "string",
          "brief": "The full prompt sent to the GenAI model.",
          "examples": [
            "[{'role': 'user', 'content': 'What is the capital of France?'}]"
          ],
          "requirement_level": "recommended",
          "note": "It's RECOMMENDED to format prompts as JSON string matching [OpenAI messages format](https://platform.openai.com/docs/guides/text-generation)",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.completion",
          "type": "string",
          "brief": "The full response received from the GenAI model.",
          "examples": [
            "[{'role': 'assistant', 'content': 'The capital of France is Paris.'}]"
          ],
          "requirement_level": "recommended",
          "note": "It's RECOMMENDED to format completions as JSON string matching [OpenAI messages format](https://platform.openai.com/docs/guides/text-generation)",
          "stability": "experimental"
        },
        {
          "name": "gen_ai.operation.name",
          "type": "string",
          "brief": "The name of the operation being performed.",
          "examples": [
            "chat",
            "completion"
          ],
          "requirement_level": "recommended",
          "stability": "experimental"
        }
      ],
      "span_kind": null,
      "events": [],
      "metric_name": null,
      "instrument": null,
      "unit": null,
      "name": null,
      "lineage": {
        "source_file": "../semantic-conventions/model/registry/gen-ai.yaml"
      }
    }
  ]
}